{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-laughing/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/img/js_basic20170906/scope.png","path":"img/js_basic20170906/scope.png","modified":0,"renderable":0},{"_id":"source/img/layout20170317/layout-auto.png","path":"img/layout20170317/layout-auto.png","modified":0,"renderable":0},{"_id":"source/img/layout20170317/layout-center.png","path":"img/layout20170317/layout-center.png","modified":0,"renderable":0},{"_id":"source/img/trans_vuex20170531/problem.dot.png","path":"img/trans_vuex20170531/problem.dot.png","modified":0,"renderable":0},{"_id":"source/img/trans_vuex20170531/solution1.dot.png","path":"img/trans_vuex20170531/solution1.dot.png","modified":0,"renderable":0},{"_id":"source/img/trans_vuex20170531/solution3.dot.png","path":"img/trans_vuex20170531/solution3.dot.png","modified":0,"renderable":0},{"_id":"source/img/trans_vuex20170531/target.png","path":"img/trans_vuex20170531/target.png","modified":0,"renderable":0},{"_id":"source/img/trans_vuex20170531/todo.dot.png","path":"img/trans_vuex20170531/todo.dot.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css","path":"css/main_style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css.map","path":"css/main_style.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css","path":"css/main_style.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css.map","path":"css/main_style.min.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.eot","path":"fonts/icon.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.svg","path":"fonts/icon.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.ttf","path":"fonts/icon.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.woff","path":"fonts/icon.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/sass/main_style.scss","path":"sass/main_style.scss","modified":0,"renderable":1},{"_id":"source/img/layout20170317/layout-layout.png","path":"img/layout20170317/layout-layout.png","modified":0,"renderable":0},{"_id":"source/img/1ebd064b0c29334994ba9e7a8.png","path":"img/1ebd064b0c29334994ba9e7a8.png","modified":0,"renderable":0},{"_id":"source/img/js_basic20170906/format.png","path":"img/js_basic20170906/format.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/LICENSE","path":"components/reset-css/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/README.md","path":"components/reset-css/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/gruntfile.js","path":"components/reset-css/gruntfile.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/package.json","path":"components/reset-css/package.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/main.scss","path":"components/reset-css/sass/main.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-native.scss","path":"components/reset-css/sass/mobile-native.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-single.scss","path":"components/reset-css/sass/mobile-single.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.min.css","path":"components/reset-css/dist/mobile/reset.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.css","path":"components/reset-css/dist/mobile/reset.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.css","path":"components/reset-css/dist/pc/reset.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.min.css","path":"components/reset-css/dist/pc/reset.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css","path":"components/reset-css/public/main/reset.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css.map","path":"components/reset-css/public/main/reset.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css","path":"components/reset-css/public/main/reset.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css.map","path":"components/reset-css/public/main/reset.min.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css","path":"components/reset-css/public/mobile/reset.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css","path":"components/reset-css/public/mobile/reset.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css.map","path":"components/reset-css/public/mobile/reset.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css.map","path":"components/reset-css/public/mobile/reset.min.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css","path":"components/reset-css/public/native/reset.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css.map","path":"components/reset-css/public/native/reset.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css","path":"components/reset-css/public/native/reset.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css.map","path":"components/reset-css/public/native/reset.min.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/custom/imitation-native.scss","path":"components/reset-css/sass/custom/imitation-native.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/basic.scss","path":"components/reset-css/sass/reset/basic.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/ie.scss","path":"components/reset-css/sass/reset/ie.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/macos.scss","path":"components/reset-css/sass/reset/macos.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/mobile.scss","path":"components/reset-css/sass/reset/mobile.scss","modified":0,"renderable":1},{"_id":"source/img/8c1e501d04f6fac2c45c6526e.png","path":"img/8c1e501d04f6fac2c45c6526e.png","modified":0,"renderable":0},{"_id":"source/img/js_basic20170906/prototype.jpg","path":"img/js_basic20170906/prototype.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-laughing/.bowerrc","hash":"cd6df79a8be68d066ccb35c5470fba3e6f12bb00","modified":1517848725519},{"_id":"themes/hexo-theme-laughing/.gitignore","hash":"cbdea42ead12e6fd5e03d489e0482bbb37cd582b","modified":1517848725519},{"_id":"themes/hexo-theme-laughing/LICENSE","hash":"b2d04276dc82c827b32e34c9d7b473ad5c0c0f4f","modified":1517848725519},{"_id":"themes/hexo-theme-laughing/README.md","hash":"487a33f51b39656c9c2643c38dc76a6f9deb9e31","modified":1517848725519},{"_id":"themes/hexo-theme-laughing/_config.yml","hash":"b15054a5dee0f3f97fcf4d17d1b1c7e4f6a85121","modified":1517851674996},{"_id":"themes/hexo-theme-laughing/gruntfile.js","hash":"dce145bcbf831af91d778a0f05adf8ab3f648262","modified":1517848725520},{"_id":"themes/hexo-theme-laughing/package.json","hash":"90437a166ff42fe162a7224078fdcd69de48b6cb","modified":1517848725522},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517848589993},{"_id":"source/_posts/How-to-setup-a-blog-on-github-with-Hexo.md","hash":"41f5b25ec9ef11e4d5479d7aab3ad18723424224","modified":1517848589993},{"_id":"source/_posts/es6-learning-notes.md","hash":"6d764255215fcbb1ba9a4672afc94d6c941ddf4b","modified":1517848589994},{"_id":"source/_posts/front-end-spec.md","hash":"6b75febf93f7039d41ffb1690a190c7a40a8b5e8","modified":1517848589995},{"_id":"source/_posts/hello-world.md","hash":"794d85bed36558a56338fb04d46cfe9c14aeb3cb","modified":1517851697597},{"_id":"source/_posts/html5-meta.md","hash":"bda10cf2120aad0e6c76e6a354d14874e1b18a7a","modified":1517848589996},{"_id":"source/_posts/js-basic-2.md","hash":"af8cf546e922e9ac46e4fb37c74aab044fd83e4c","modified":1517848589997},{"_id":"source/_posts/js-basic.md","hash":"ca12a0c35b2b0813d90cc22b743c511331110eef","modified":1517848589997},{"_id":"source/_posts/js之闭包.md","hash":"a753c28e668bf8844277c0ed1e2313f9a02cdc2a","modified":1517848589998},{"_id":"source/_posts/layout.md","hash":"704df0e3ba297670e45b79e99b6943a592ca60b5","modified":1517848589998},{"_id":"source/_posts/mobile-terminal-dev.md","hash":"ca6d0223b1e478a80e3effa8db4ee1d213f03cad","modified":1517848589999},{"_id":"source/_posts/promise.md","hash":"fdd81bcd64f3dd4f6fd14ac28347fe38b48a3c4e","modified":1517848590000},{"_id":"source/_posts/trans_vuex_basics_tutorial.md","hash":"8cf7178e5616369332c66ec5f88552cdeee347a2","modified":1517848590001},{"_id":"themes/hexo-theme-laughing/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517848725512},{"_id":"themes/hexo-theme-laughing/.git/config","hash":"1e0d8f874f8e943cdb9f5692936b6773e5d67dbc","modified":1517848725514},{"_id":"themes/hexo-theme-laughing/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517848700447},{"_id":"themes/hexo-theme-laughing/.git/index","hash":"8067a2a50b10a99668d30d07a3282f3267800b98","modified":1517851615771},{"_id":"themes/hexo-theme-laughing/.git/packed-refs","hash":"52bc608226a9ace041729a3aa6145ed9bfb488bc","modified":1517848725510},{"_id":"themes/hexo-theme-laughing/layout/index.pug","hash":"342ec754890a8e4f037f4c47938a91468f4decee","modified":1517848725521},{"_id":"themes/hexo-theme-laughing/layout/post.pug","hash":"fd10e59f17b02653b0e2faafaa0a98af134c7713","modified":1517848725522},{"_id":"themes/hexo-theme-laughing/source/favicon.ico","hash":"3c779118c15f1734e08d83ec62d8e0d73c61339b","modified":1517848725533},{"_id":"source/img/js_basic20170906/scope.png","hash":"d95f9b63cf969e43b97b8fb48c02a578ca99bf9c","modified":1517848590048},{"_id":"source/img/layout20170317/layout-auto.png","hash":"2755f9b442549cb1d5c0a3b806eda57f73e17753","modified":1517848590051},{"_id":"source/img/layout20170317/layout-center.png","hash":"57645839a40db2117eee0ee94d78e1a81e2ab7e7","modified":1517848590055},{"_id":"source/img/trans_vuex20170531/problem.dot.png","hash":"6afcc56c41f73144568501345294ed24cd20e00f","modified":1517848590058},{"_id":"source/img/trans_vuex20170531/solution1.dot.png","hash":"46927803deeaf4b945d01077e336c19bf3514fe9","modified":1517848590059},{"_id":"source/img/trans_vuex20170531/solution3.dot.png","hash":"8ef64022f35d0e6a11b1015b88eb3a2366f610d3","modified":1517848590060},{"_id":"source/img/trans_vuex20170531/target.png","hash":"208cfd942e84d124d83792884fff2d33f866d46c","modified":1517848590061},{"_id":"source/img/trans_vuex20170531/todo.dot.png","hash":"36a8a1f8cc8847094fa1a12aaa1c8222b6782651","modified":1517848590062},{"_id":"themes/hexo-theme-laughing/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517848700452},{"_id":"themes/hexo-theme-laughing/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517848700450},{"_id":"themes/hexo-theme-laughing/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517848700453},{"_id":"themes/hexo-theme-laughing/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517848700454},{"_id":"themes/hexo-theme-laughing/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517848700451},{"_id":"themes/hexo-theme-laughing/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517848700454},{"_id":"themes/hexo-theme-laughing/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1517848700451},{"_id":"themes/hexo-theme-laughing/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517848700453},{"_id":"themes/hexo-theme-laughing/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1517848700454},{"_id":"themes/hexo-theme-laughing/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517848700446},{"_id":"themes/hexo-theme-laughing/.git/logs/HEAD","hash":"146b3eb2d76ec4d9ab11300e165f80fc4a70af16","modified":1517851615739},{"_id":"themes/hexo-theme-laughing/layout/_partial/footer.pug","hash":"73a26c2c5cedfe6ab7c31b7e58639e62d0c64bb0","modified":1517848725520},{"_id":"themes/hexo-theme-laughing/layout/_partial/layout.pug","hash":"96f07d54e5712092ca41604abe0c0d3133837ad0","modified":1517848725520},{"_id":"themes/hexo-theme-laughing/layout/_partial/page_header.pug","hash":"6b46eae5f0a1db0c39d7a622a7acb3494f4de242","modified":1517848725521},{"_id":"themes/hexo-theme-laughing/layout/_partial/pagination.pug","hash":"0622c7633acdeb16d51979e05e360a2b69b13495","modified":1517848725521},{"_id":"themes/hexo-theme-laughing/layout/_partial/post_header.pug","hash":"2470e6d75691be209f176716815b81347acb699d","modified":1517848725521},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css","hash":"cbd0541a11ebd938d798e3cee397a5a4d26d84ec","modified":1517848725532},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css.map","hash":"c3e624de8678bffa3d0859362382c86245015d1b","modified":1517848725532},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css","hash":"7224d03577ecfa3cb51688ce5f0ef68d73166156","modified":1517848725533},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css.map","hash":"b714707c0c6893720548709c52dc35e0e4ac5387","modified":1517848725533},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.eot","hash":"845e74fd0134d11cb064e5440ae490c846670f2e","modified":1517848725534},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.svg","hash":"b812a585d7dbb508874605a48436c77c8271e28b","modified":1517848725535},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.ttf","hash":"c403df27000403dd4de7ffe2b4e80d04c4475a07","modified":1517848725535},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.woff","hash":"7d828283afa799b70a8531b9a2662c559b346439","modified":1517848725536},{"_id":"themes/hexo-theme-laughing/source/sass/main_style.scss","hash":"898aefb75f72fed686ac9a60eff1ceb44a2f3ea3","modified":1517848725541},{"_id":"source/img/layout20170317/layout-layout.png","hash":"ebaf74875705bdf1da97a5668c0c335640f19427","modified":1517848590057},{"_id":"source/img/1ebd064b0c29334994ba9e7a8.png","hash":"30f25c4b9d8b3c251aa0faf8a8e8e2bd657138af","modified":1517848590005},{"_id":"source/img/js_basic20170906/format.png","hash":"5e5f3412362c14687c6d153a2f079c323f408f3e","modified":1517848590024},{"_id":"themes/hexo-theme-laughing/.git/objects/pack/pack-5d0758bfd5dc51771dc190626e5e64ae58217f3d.idx","hash":"cf16d502d9eafa3fc8c46aeb8c8287d1748ec573","modified":1517848725495},{"_id":"themes/hexo-theme-laughing/.git/refs/heads/master","hash":"46a74dd717f72e4e65a072985a8d6ac4ed61a534","modified":1517848725512},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/.bower.json","hash":"870be6ad54cc1c5284d38b1cd104ac8412054498","modified":1517848725522},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/.gitignore","hash":"dc763f22f9c31a8daefbf47989e76da901ffd47c","modified":1517848725522},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/LICENSE","hash":"b2d04276dc82c827b32e34c9d7b473ad5c0c0f4f","modified":1517848725522},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/README.md","hash":"42ba92ca71daff15d0e27ae9e1624e86298f88b8","modified":1517848725523},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/gruntfile.js","hash":"eda72e7747c8952dcc98d9249a5d8ca2279a89d6","modified":1517848725524},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/package.json","hash":"c859e74c55d08e683d72ada52ad786f49eb19be2","modified":1517848725524},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/duoshuo.scss","hash":"033b88d981fea35adad1b2ad96fbf5a497598cc3","modified":1517848725536},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/footer.scss","hash":"353e3e086aa70849c924fb8789b30b5a996d8676","modified":1517848725537},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/layout.scss","hash":"32c191b0a510c387baa4ef85426eb13607e3c451","modified":1517848725537},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/list.scss","hash":"ea845f4182a2979a3039a587cacff7fb170f5184","modified":1517848725538},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/main_navi.scss","hash":"068d1c8cf9af65c0258cf06e01305574629145ae","modified":1517848725538},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/navication.scss","hash":"08a01a3b4d627cff6b2521114378578625f779da","modified":1517848725538},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/page_header.scss","hash":"628a2cdcf1093cfdf05b2c7e67f270d3bbea4fb4","modified":1517848725538},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/pagination.scss","hash":"6d26b9990bf957e06af87f36aafee1e3bdb505ef","modified":1517848725539},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/post.scss","hash":"4f2a71a3a11896bb364fe3d51d32aa96e37b80d5","modified":1517848725539},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/post_header.scss","hash":"dd790985f86f7a6af1a26baca50d8ec8fab14add","modified":1517848725539},{"_id":"themes/hexo-theme-laughing/source/sass/_util/color.scss","hash":"2dfaa41b7f960473b9c2a154989791f643737211","modified":1517848725540},{"_id":"themes/hexo-theme-laughing/source/sass/_util/hightlight.scss","hash":"2be013af766705fcac2cbcb8058b5eed2a314550","modified":1517848725540},{"_id":"themes/hexo-theme-laughing/source/sass/_util/icon.scss","hash":"f7a2f1adb843c211a4b526ba56565ad683902df1","modified":1517848725540},{"_id":"themes/hexo-theme-laughing/source/sass/_util/media.scss","hash":"7eb47453422b703af4a272f64b44a5e062f133ee","modified":1517848725540},{"_id":"themes/hexo-theme-laughing/source/sass/_util/mixin.scss","hash":"37309124d68d74e1d920dae40546c6dfa53c4d86","modified":1517848725540},{"_id":"themes/hexo-theme-laughing/.git/logs/refs/heads/master","hash":"146b3eb2d76ec4d9ab11300e165f80fc4a70af16","modified":1517851615739},{"_id":"themes/hexo-theme-laughing/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517848725510},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/_common.scss","hash":"e43ee0cc485b6e8ee11e33434dd8472e449f8804","modified":1517848725528},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/main.scss","hash":"b34aeac5d981e3ac4c46a292e6197f2f7f860b32","modified":1517848725529},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-native.scss","hash":"ce2116425e00aa7a450cfcd93c86f95213b7deed","modified":1517848725529},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-single.scss","hash":"80c5c752656b61690e8df463e5b45b787621c249","modified":1517848725529},{"_id":"themes/hexo-theme-laughing/.git/logs/refs/remotes/origin/HEAD","hash":"146b3eb2d76ec4d9ab11300e165f80fc4a70af16","modified":1517851615737},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.min.css","hash":"752bcb20555fb6152867a7437aacf079f3c93c36","modified":1517848725523},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.css","hash":"c157f0c30827d47590cb99a25a34eb712ca1890a","modified":1517848725523},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.css","hash":"9ed2cbf6f1dd7df99849ad22700e9339914a358a","modified":1517848725523},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.min.css","hash":"d0e76dd5d95e95deee9c745438d8bf36b342081c","modified":1517848725523},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css","hash":"8879756ab7e775eaf29e661503e4e472bde804d9","modified":1517848725524},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css.map","hash":"af850e4c2b2ab129e8c419cdd3da8dc3190449ed","modified":1517848725524},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css","hash":"1a81aa7c066cf34dbc61709c9c11d2ef053ae456","modified":1517848725525},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css.map","hash":"8132d37d36c5b1d9826f9896dc61165229178c42","modified":1517848725525},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css","hash":"f531c995853af9871b8be1c7c324a8f65d1c355a","modified":1517848725525},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css","hash":"64fbf2a4717a88d31b9b85806f39ec8d3edfb538","modified":1517848725526},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css.map","hash":"a2ccb8da7fe8a22edcf91bf2171ebca67cb6c093","modified":1517848725526},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css.map","hash":"7a98495520ecb5d4badd36d6145d7b22f0a57c5b","modified":1517848725526},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css","hash":"6cbf4e09d9f8f5fd2c6b961cf4f473c41a5cde48","modified":1517848725527},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css.map","hash":"926d39cb34066c99e9ba3185926865b73c943288","modified":1517848725527},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css","hash":"fa81cc36008bb69fefc9986d3e3c479d14ad3a09","modified":1517848725527},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css.map","hash":"840a041a42aa45b3dafccaaeabf869076d7cc9de","modified":1517848725528},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/custom/_microsoft-yahei.scss","hash":"4c29be667ae1decd0cc2da424e89c792b901eefe","modified":1517848725528},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/custom/imitation-native.scss","hash":"db910f6a7a008bc3c47a4ccebb0f9301b1dd6f58","modified":1517848725529},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/basic.scss","hash":"523a6deffbd0699f3225adbdeda5d0fc5c6e1e4d","modified":1517848725530},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/ie.scss","hash":"032d5f6831a43ffe278b711331308a17b0fa0848","modified":1517848725530},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/macos.scss","hash":"c4863f82e33f87dd4c724d68906a4cbe2b935e6c","modified":1517848725531},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/mobile.scss","hash":"391a7886de3256582d37a252f743a2cd08ae0964","modified":1517848725531},{"_id":"source/img/8c1e501d04f6fac2c45c6526e.png","hash":"7cf0785723177ee98a100b57ae3be3a21a491a42","modified":1517848590018},{"_id":"source/img/js_basic20170906/prototype.jpg","hash":"7cbe72be881a810dc3e41836ea965bd51c5f4128","modified":1517848590038},{"_id":"themes/hexo-theme-laughing/.git/objects/pack/pack-5d0758bfd5dc51771dc190626e5e64ae58217f3d.pack","hash":"d48008e6de627600e2f8e18d2af980001af91e6a","modified":1517848725495},{"_id":"public/2018/02/06/hello-world/index.html","hash":"07103edbe0058ab50483bc1c3c6661c63a2601ae","modified":1517850713656},{"_id":"public/2017/09/13/js-basic-2/index.html","hash":"809ff1830a10ff7015d66532293197c6754cde6b","modified":1517851783181},{"_id":"public/2016/08/11/How-to-setup-a-blog-on-github-with-Hexo/index.html","hash":"559f5eb0c43d6022cd7f2f1287ca9eaff6aebcc1","modified":1517851783182},{"_id":"public/archives/index.html","hash":"81bcf06e7593354067641a582d5b54da8cec7983","modified":1517851783146},{"_id":"public/archives/page/2/index.html","hash":"719784cba562ae3ab1c8d621c85c73e7bdc67eaa","modified":1517851783182},{"_id":"public/archives/page/3/index.html","hash":"cb0f5dc6e7acad14a29f2b3971eb701554387665","modified":1517851783182},{"_id":"public/archives/2016/index.html","hash":"1952642cf3317018f5d20d78072be6453f41fb1f","modified":1517851783182},{"_id":"public/archives/2016/08/index.html","hash":"9db0c9cc531c8206be821181aa3de91eada20802","modified":1517851783182},{"_id":"public/archives/2016/10/index.html","hash":"6a7dc1385df29ae8b5bef9ae45bac0864f549072","modified":1517851783182},{"_id":"public/archives/2017/index.html","hash":"11855fe96be2871602cb2f2aad1c005257208994","modified":1517851783162},{"_id":"public/archives/2017/page/2/index.html","hash":"a8d0c9096cac01293e13e8ffa697b7d8e6096f52","modified":1517851783182},{"_id":"public/archives/2017/03/index.html","hash":"04b865dde61ca0c357da5ac1708a996ea5955afe","modified":1517851783183},{"_id":"public/archives/2017/06/index.html","hash":"e26597905e1302108c297fd6d9c2cfda15651b0c","modified":1517851783183},{"_id":"public/archives/2017/08/index.html","hash":"8cacf345ab0c31b49fa1ae3c676589b279484b9a","modified":1517851783163},{"_id":"public/archives/2017/09/index.html","hash":"96aaae1163ee568941834c62c32b21e4e01f52ca","modified":1517851783183},{"_id":"public/archives/2017/11/index.html","hash":"12809c49d7caa9bf137b44a52829837eec7fda3e","modified":1517851783183},{"_id":"public/archives/2018/index.html","hash":"d41e8769a92e7a961a34462584e52be7a7c435d1","modified":1517851783183},{"_id":"public/archives/2018/01/index.html","hash":"d41e8769a92e7a961a34462584e52be7a7c435d1","modified":1517851783183},{"_id":"public/archives/2018/02/index.html","hash":"5d90146c238bcbaf734325e40fa7e4bbfdb79aa9","modified":1517850713659},{"_id":"public/categories/front-end/index.html","hash":"64ff21851c02e8f78ed4c53f4dd9396033c79ece","modified":1517851783183},{"_id":"public/categories/front-end/page/2/index.html","hash":"fe4ee59ab09f9df030e4619ab341de54ab6a51a8","modified":1517851783183},{"_id":"public/categories/tool/index.html","hash":"de9d13339099718f207cf78a961c290f4b3d1da6","modified":1517851783183},{"_id":"public/categories/杂记/index.html","hash":"519bc9668543e7c7d0ba15dfef9d0ec28e3316b8","modified":1517851783163},{"_id":"public/categories/js/index.html","hash":"ada973f8dc9714e8109ede4fb08be2ce12d6e462","modified":1517851783163},{"_id":"public/categories/mobile/index.html","hash":"73e0085f7ebb043e7fa037f5939e8f991800ad96","modified":1517851783163},{"_id":"public/index.html","hash":"bb42c295ff321a3a0acdc8a82f1fc9c55a00abfa","modified":1517851783163},{"_id":"public/page/2/index.html","hash":"70b24845b8a179080259ea4e7095e64a5f39fc6a","modified":1517851783183},{"_id":"public/page/3/index.html","hash":"05972e45afd138f489baa84fabd27d4f4d38866d","modified":1517851783183},{"_id":"public/tags/ES6/index.html","hash":"6a7dc1385df29ae8b5bef9ae45bac0864f549072","modified":1517851783183},{"_id":"public/tags/hexo/index.html","hash":"de9d13339099718f207cf78a961c290f4b3d1da6","modified":1517851783183},{"_id":"public/tags/规范/index.html","hash":"7874398f9efcbee71cf53f9c5ff530c21eced325","modified":1517851783184},{"_id":"public/tags/随笔/index.html","hash":"519bc9668543e7c7d0ba15dfef9d0ec28e3316b8","modified":1517851783164},{"_id":"public/tags/meta/index.html","hash":"d41e8769a92e7a961a34462584e52be7a7c435d1","modified":1517851783184},{"_id":"public/tags/javascript/index.html","hash":"96aaae1163ee568941834c62c32b21e4e01f52ca","modified":1517851783185},{"_id":"public/tags/js/index.html","hash":"ada973f8dc9714e8109ede4fb08be2ce12d6e462","modified":1517851783164},{"_id":"public/tags/layout/index.html","hash":"04b865dde61ca0c357da5ac1708a996ea5955afe","modified":1517851783185},{"_id":"public/tags/promise/index.html","hash":"12809c49d7caa9bf137b44a52829837eec7fda3e","modified":1517851783185},{"_id":"public/tags/vuex/index.html","hash":"e26597905e1302108c297fd6d9c2cfda15651b0c","modified":1517851783185},{"_id":"public/2018/01/02/html5-meta/index.html","hash":"646781807c09bb5197ef7205d4c7ccc74816c143","modified":1517851783185},{"_id":"public/2017/11/20/promise/index.html","hash":"65bf44f1db572190963214100180ead0fa8bdcf7","modified":1517851783185},{"_id":"public/2017/09/06/js-basic/index.html","hash":"c5ed3754c0dff92baf0f257a4454df90ec563b7f","modified":1517851783185},{"_id":"public/2017/08/18/mobile-terminal-dev/index.html","hash":"326c8e81f0e54200c3fa5f3e9451fe57091e32bc","modified":1517851783164},{"_id":"public/2017/08/17/js之闭包/index.html","hash":"6dfe456958ea6d581f043297e3bbe527cc9f4a1d","modified":1517851783164},{"_id":"public/2017/06/04/trans_vuex_basics_tutorial/index.html","hash":"e594f5c78893cd9ebd17d18b7e2ff3f451527381","modified":1517851783185},{"_id":"public/2017/03/31/layout/index.html","hash":"08c5e089b58051f297629b2892e01b163a63ff04","modified":1517851783185},{"_id":"public/2016/10/14/es6-learning-notes/index.html","hash":"38e1b12f1ec3568111b47f5dfed63918fef2a306","modified":1517851783185},{"_id":"public/2016/08/30/front-end-spec/index.html","hash":"8fb233c5627b672d720f5c1bd2487690a481b068","modified":1517851783185},{"_id":"public/favicon.ico","hash":"3c779118c15f1734e08d83ec62d8e0d73c61339b","modified":1517849094535},{"_id":"public/img/js_basic20170906/scope.png","hash":"d95f9b63cf969e43b97b8fb48c02a578ca99bf9c","modified":1517851783194},{"_id":"public/img/layout20170317/layout-auto.png","hash":"2755f9b442549cb1d5c0a3b806eda57f73e17753","modified":1517851783194},{"_id":"public/img/layout20170317/layout-center.png","hash":"57645839a40db2117eee0ee94d78e1a81e2ab7e7","modified":1517851783194},{"_id":"public/img/trans_vuex20170531/problem.dot.png","hash":"6afcc56c41f73144568501345294ed24cd20e00f","modified":1517851783194},{"_id":"public/img/trans_vuex20170531/solution1.dot.png","hash":"46927803deeaf4b945d01077e336c19bf3514fe9","modified":1517851783194},{"_id":"public/img/trans_vuex20170531/solution3.dot.png","hash":"8ef64022f35d0e6a11b1015b88eb3a2366f610d3","modified":1517851783194},{"_id":"public/img/trans_vuex20170531/target.png","hash":"208cfd942e84d124d83792884fff2d33f866d46c","modified":1517851783194},{"_id":"public/img/trans_vuex20170531/todo.dot.png","hash":"36a8a1f8cc8847094fa1a12aaa1c8222b6782651","modified":1517851783194},{"_id":"public/css/main_style.css.map","hash":"c3e624de8678bffa3d0859362382c86245015d1b","modified":1517849094535},{"_id":"public/css/main_style.min.css.map","hash":"b714707c0c6893720548709c52dc35e0e4ac5387","modified":1517849094536},{"_id":"public/fonts/icon.eot","hash":"845e74fd0134d11cb064e5440ae490c846670f2e","modified":1517849094536},{"_id":"public/fonts/icon.svg","hash":"b812a585d7dbb508874605a48436c77c8271e28b","modified":1517849094536},{"_id":"public/fonts/icon.ttf","hash":"c403df27000403dd4de7ffe2b4e80d04c4475a07","modified":1517849094536},{"_id":"public/fonts/icon.woff","hash":"7d828283afa799b70a8531b9a2662c559b346439","modified":1517849094536},{"_id":"public/sass/main_style.scss","hash":"898aefb75f72fed686ac9a60eff1ceb44a2f3ea3","modified":1517849094536},{"_id":"public/components/reset-css/LICENSE","hash":"b2d04276dc82c827b32e34c9d7b473ad5c0c0f4f","modified":1517849094536},{"_id":"public/components/reset-css/sass/main.scss","hash":"b34aeac5d981e3ac4c46a292e6197f2f7f860b32","modified":1517849094536},{"_id":"public/components/reset-css/sass/mobile-native.scss","hash":"ce2116425e00aa7a450cfcd93c86f95213b7deed","modified":1517849094536},{"_id":"public/components/reset-css/sass/mobile-single.scss","hash":"80c5c752656b61690e8df463e5b45b787621c249","modified":1517849094536},{"_id":"public/components/reset-css/public/main/reset.css.map","hash":"af850e4c2b2ab129e8c419cdd3da8dc3190449ed","modified":1517849094536},{"_id":"public/components/reset-css/public/main/reset.min.css.map","hash":"8132d37d36c5b1d9826f9896dc61165229178c42","modified":1517849094536},{"_id":"public/components/reset-css/public/mobile/reset.css.map","hash":"a2ccb8da7fe8a22edcf91bf2171ebca67cb6c093","modified":1517849094536},{"_id":"public/components/reset-css/public/mobile/reset.min.css.map","hash":"7a98495520ecb5d4badd36d6145d7b22f0a57c5b","modified":1517849094536},{"_id":"public/components/reset-css/public/native/reset.css.map","hash":"926d39cb34066c99e9ba3185926865b73c943288","modified":1517849094536},{"_id":"public/components/reset-css/public/native/reset.min.css.map","hash":"840a041a42aa45b3dafccaaeabf869076d7cc9de","modified":1517849094536},{"_id":"public/components/reset-css/sass/custom/imitation-native.scss","hash":"db910f6a7a008bc3c47a4ccebb0f9301b1dd6f58","modified":1517849094536},{"_id":"public/components/reset-css/sass/reset/basic.scss","hash":"523a6deffbd0699f3225adbdeda5d0fc5c6e1e4d","modified":1517849094536},{"_id":"public/components/reset-css/sass/reset/ie.scss","hash":"032d5f6831a43ffe278b711331308a17b0fa0848","modified":1517849094536},{"_id":"public/components/reset-css/sass/reset/macos.scss","hash":"c4863f82e33f87dd4c724d68906a4cbe2b935e6c","modified":1517849094536},{"_id":"public/components/reset-css/sass/reset/mobile.scss","hash":"391a7886de3256582d37a252f743a2cd08ae0964","modified":1517849094537},{"_id":"public/img/layout20170317/layout-layout.png","hash":"ebaf74875705bdf1da97a5668c0c335640f19427","modified":1517851783199},{"_id":"public/components/reset-css/README.html","hash":"8e6de58e63d6a04c3c1160409e17e7b255202704","modified":1517849094563},{"_id":"public/components/reset-css/gruntfile.js","hash":"eda72e7747c8952dcc98d9249a5d8ca2279a89d6","modified":1517849094564},{"_id":"public/components/reset-css/package.json","hash":"cafa376792f3516b399c2dff52f6de75fe5456e7","modified":1517849094564},{"_id":"public/components/reset-css/dist/mobile/reset.min.css","hash":"752bcb20555fb6152867a7437aacf079f3c93c36","modified":1517849094564},{"_id":"public/components/reset-css/dist/mobile/reset.css","hash":"c157f0c30827d47590cb99a25a34eb712ca1890a","modified":1517849094564},{"_id":"public/components/reset-css/dist/pc/reset.css","hash":"9ed2cbf6f1dd7df99849ad22700e9339914a358a","modified":1517849094564},{"_id":"public/components/reset-css/dist/pc/reset.min.css","hash":"d0e76dd5d95e95deee9c745438d8bf36b342081c","modified":1517849094564},{"_id":"public/components/reset-css/public/main/reset.css","hash":"8879756ab7e775eaf29e661503e4e472bde804d9","modified":1517849094564},{"_id":"public/components/reset-css/public/main/reset.min.css","hash":"1a81aa7c066cf34dbc61709c9c11d2ef053ae456","modified":1517849094564},{"_id":"public/components/reset-css/public/mobile/reset.css","hash":"f531c995853af9871b8be1c7c324a8f65d1c355a","modified":1517849094564},{"_id":"public/components/reset-css/public/mobile/reset.min.css","hash":"64fbf2a4717a88d31b9b85806f39ec8d3edfb538","modified":1517849094564},{"_id":"public/components/reset-css/public/native/reset.css","hash":"6cbf4e09d9f8f5fd2c6b961cf4f473c41a5cde48","modified":1517849094564},{"_id":"public/components/reset-css/public/native/reset.min.css","hash":"fa81cc36008bb69fefc9986d3e3c479d14ad3a09","modified":1517849094564},{"_id":"public/css/main_style.css","hash":"cbd0541a11ebd938d798e3cee397a5a4d26d84ec","modified":1517849094564},{"_id":"public/css/main_style.min.css","hash":"7224d03577ecfa3cb51688ce5f0ef68d73166156","modified":1517849094564},{"_id":"public/img/js_basic20170906/format.png","hash":"5e5f3412362c14687c6d153a2f079c323f408f3e","modified":1517851783214},{"_id":"public/img/1ebd064b0c29334994ba9e7a8.png","hash":"30f25c4b9d8b3c251aa0faf8a8e8e2bd657138af","modified":1517851783223},{"_id":"public/img/8c1e501d04f6fac2c45c6526e.png","hash":"7cf0785723177ee98a100b57ae3be3a21a491a42","modified":1517851783247},{"_id":"public/img/js_basic20170906/prototype.jpg","hash":"7cbe72be881a810dc3e41836ea965bd51c5f4128","modified":1517851783256},{"_id":"public/2017/08/16/hello-world/index.html","hash":"a2a569cf6f238f130f13da6f0987f326945581f7","modified":1517851783181}],"Category":[{"name":"front-end","_id":"cjdag5s6k00029ms69ez109cw"},{"name":"tool","_id":"cjdag5s6w00079ms6nqmmzw9v"},{"name":"杂记","_id":"cjdag5s7p000k9ms6e6xpj5dp"},{"name":"js","_id":"cjdag5s7z000r9ms66epugsn8"},{"name":"mobile","_id":"cjdag5s84000x9ms6uon0p82m"}],"Data":[],"Page":[],"Post":[{"title":"ES6 学习笔记 (ing)","date":"2016-10-14T11:07:06.000Z","toc":true,"_content":"\n> 我只是一个简单的学习笔记。\n\nlearn from this book:  [《ECMAScript 6 入门》](http://es6.ruanyifeng.com/) by 阮一峰\n\n<!-- more -->\n \n<!-- toc -->\n\n## 0. 发展历史\n\n- 1996.11，ECMAScript 1.0发布\n- 1998.6，ECMAScript 2.0发布\n- 1999.12，ECMAScript 3.0发布\n- 2000~2007.10，ECMAScript 4.0草案发布，最终因分歧较大未发布正式版本\n- 2009.12，ECMAScript 5.0\n- 2011.6，ECMAScript 5.1发布\n- 2015.6，ES2015（《ECMAScript 2015标准》）发布\n- 2016.6，ES2016（《ECMAScript 2016标准》）发布\n\n> ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准，涵盖了ES2015、ES2016、ES2017等等，而ES2015则是正式名称，特指该年发布的正式版本的语言标准。\n\n> 本书中提到“ES6”的地方，一般是指ES2015标准，但有时也是泛指“下一代JavaScript语言”。\n\nECMAScript 与 Javascript 的区别是：前者是后者的规格，后者是前者的一种实现。\n\n## 1. 环境\n\n### node (推荐使用nvm管理node版本)\n```\n    ## 安装nvm，<version number>需要用版本号替换，目前是v0.32.0\n    $ curl -o- https://raw.githubusercontent.com/creationix/nvm/<version number>/install.sh | bash\n\n    ## 激活nvm\n    $ source ~/.nvm/nvm.sh\n\n    ## 列出远程node版本\n    $ nvm ls-remote\n\n    ## 安装指定版本的node\n    $ nvm install v4.1.2\n\n    ## 切换到指定版本\n    $ nvm use v4.1.2\n\n    ## 查看当前已安装的node版本\n    $ nvm ls\n\n    ## 设置指定版本为默认的node版本\n    $ nvm alias default stable\n\n    ## 查看当前node版本\n    $ node -v\n\n    ## 查看node安装目录\n    $ which node\n\n    ## npm安装的全局目录\n    $ npm config get prefix\n    $ npm config set prefix /usr/local/\n```\n\n### Babel转码工具\n\n由于浏览器暂不支持 es6 的解析，所以需要使用Babel，第一步是添加配置\n有以下两种方式:\n\n1. 在项目根目录添加配置文件 `.babelrc`。\n```\n    {\n        // 设定转码规则\n        \"presets\": [\"es2015\"]\n    }\n```\n2. 在 `package.json` 添加如下配置\n```\n    \"babel\": {\n     　　\"presets\": [\"es2015\", \"stage-2\"]\n    }\n```\n\n[你可以在这里测试转码效果](http://babeljs.io/repl/)\n\n> [Babel官网](http://babeljs.io/docs/setup/#installation) 推荐将 babel-cli 安装在项目本地，原因有二：\n- Different projects on the same machine can depend on different versions of Babel allowing you to update one at a time.\n- It means you do not have an implicit dependency on the environment you are working in. Making your project far more portable and easier to setup.\n\n- 一台机器上的不同项目可能会基于不同版本的 Babel ，这样允许你一次升级一个项目，不会互相影响\n- 这意味着在你工作的环境下没有含义不明的依赖。使你的项目更轻便、更容易安装。\n\n[[这里还有其它的使用方式]](http://babeljs.io/docs/setup/#installation)\n\n## 2. 主要内容\n\n### 数据类型变化\n\nJS 中的数据类型有：undefined null String Number Boolean Object\n\n#### 新增 symbol 类型\n\n```\n// 创建一个新的symbol，它的值与其它任何值皆不相等：\nvar mySymbol = Symbol()\n\n// 创建一个独一无二的symbol：\nvar isMoving = Symbol(\"isMoving\")\n```\n\n- 三种获取 Symbol 的方式\n    1. Symbol()\n    2. Symbol.for(string)\n    3. 使用标准定义的 Symbol，如 `Symbol.iterator`\n\n- tips\n    - symbol 不能被自动转为字符串或数字，但可以转为 boolean；\n    - symbol 作为属性时不能被 for...in、 `Object.keys()`等遍历到，可以使用`Object.getOwnPropertySymbols(obj)` 或`Reflect.ownKeys(obj)`，前者返回对象的 symbol 键，后者返回所有字符串键和 symbol 键；\n    - Symbol.keyFor(s1) 返回 symbol s1的 key 值\n\n#### Object\n\n- Object.defineProperty()\n- Object.freeze()\n- Object.seal()\n\n### 语法变化\n\n#### 变量声明\n\n- let：声明变量，类似var。与var区别如下：\n    - **块级作用域**。只在let所在代码块内有效，for语句的计数器很适合用let声明；\n    - **先声明后使用**。不存在变量提升；暂时性死区，在一个作用域内所有变量都需要先声明后使用，否则会导致ReferenceError；\n    - **不允许重复声明**；\n\n- const：声明常量。\n    - 除 **只读** 外，其它特性与let类似。\n    - const定义引用类型时，表示的是地址可读，如对象或数组，其值仍然可修改，如果要冻结，可使用`Object.freeze()`;\n\n    ```\n    const foo = Object.freeze({});\n\n    // 常规模式时，下面一行不起作用；\n    // 严格模式时，该行会报错\n    foo.prop = 123;\n    ```\n\n- class\n\n通常我们这样实现一个类：\n```\nfunction Circle(radius) {\n    this.radius = radius;\n    Circle.circlesMade++;\n}\nCircle.draw = function draw(circle, canvas) { /* Canvas绘制代码 */ }\nObject.defineProperty(Circle, \"circlesMade\", {\n    get: function() {\n        return !this._count ? 0 : this._count;\n    },\n    set: function(val) {\n        this._count = val;\n    }\n});\nCircle.prototype = {\n    area() {\n        return Math.pow(this.radius, 2) * Math.PI;\n    },\n    get radius() {\n        return this._radius;\n    },\n    set radius(radius) {\n        if (!Number.isInteger(radius))\n            throw new Error(\"圆的半径必须为整数。\");\n        this._radius = radius;\n    }\n};\n```\n\n现在，新增了`class` 关键字用来声明一个类，像这样：\n\n```\nclass Circle {\n    constructor(radius) {\n        this.radius = radius;\n        Circle.circlesMade++;\n    };\n    static draw(circle, canvas) {\n        // Canvas绘制代码\n    };\n    static get circlesMade() {\n        return !this._count ? 0 : this._count;\n    };\n    static set circlesMade(val) {\n        this._count = val;\n    };\n    area() {\n        return Math.pow(this.radius, 2) * Math.PI;\n    };\n    get radius() {\n        return this._radius;\n    };\n    set radius(radius) {\n        if (!Number.isInteger(radius))\n            throw new Error(\"圆的半径必须为整数。\");\n        this._radius = radius;\n    };\n}\n```\n\n同时，还增加了`extends`来实现继承：\n\n```\nclass Shape {\n    get color() {\n        return this._color;\n    }\n    set color(c) {\n        this._color = parseColorAsRGB(c);\n        this.markChanged();  // 稍后重绘Canvas\n    }\n}\n\nclass Rectangle extends Shape {\n\n}\n```\n\n> ES5中，var或function定义的全局变量与顶层对象(window/global)的属性等价。\n> ES6中，let、const、class定义的全局变量不再跟顶层对象有关联。\n\n```\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n```\n\n#### 模板字符串\n\n- 基础使用方法\n```\nvar str = 'world'\nvar result = `hello ${str}` // 'hello world'\n```\n\n- 标签模板 tagged templates\n语法：模板字符串开始的反撇号前附加一个额外的标签，可以是标识符、属性值或方法调用等任何 ES6的成员表达式或调用表达式。\n\n```\nvar message = SaferHTML`<p>${bonk.sender} 向你示好。</p>`;\n\n// 等效于\nvar message = SaferHTML(templateData, bonk.sender);\n\n// SaferHTML是一个普通的函数，它可以是这样：\nfunction SaferHTML(templateData) {\n  var s = templateData[0];\n  for (var i = 1; i < arguments.length; i++) {\n    var arg = String(arguments[i]);\n\n    // 转义占位符中的特殊字符。\n    s += arg.replace(/&/g, \"&\")\n            .replace(/</g, \"<\")\n            .replace(/</g, \">\");\n\n    // 不转义模板中的特殊字符。\n    s += templateData[i];\n  }\n  return s;\n}\n```\n\n#### 不定参数、默认参数\n\n- 不定参数\n\n    1. 使用 `arguments`解决\n    2. 使用 `...` 展开运算符\n\n    ```\n    // needles 是\b haystack 后面所有参数组成的数组\n    function containsAll(haystack, ...needles) {\n        for (var needle of needles) {\n            if (haystack.indexOf(needle) === -1) {\n                return false\n            }\n        }\n        return true\n    }\n    ```\n\n- 默认参数\n形参部分通过赋值语句\b可以设置默认参数，从左至右依次赋值\n\n```\nfunction getItemById (id = 0) {\n    return {\n        id,\n        name: 'moly'\n    }\n}\n```\n\n\n#### 解构\n\n- 对象赋值模式\n    \n    被解构的值需要被强制转换为对象。因此 null 和 undefined 不能被解构。\n    ```\n    var {a, b} = {a: 1, b: 2} // a: 1, b: 2\n    var {a: name} = {a: 'moly'} // name: moly\n    ```\n\n- 数组赋值模式\n\n    被解构的值一定要包含一个迭代器。同样 null 和 undefined 不可迭代。\n    ```\n    var [a, b] = [1, 2, 3]\n    var [head, ...tail] = [1, 2, 3, 4]; // head: 1,  tail: [2, 3, 4]\n    ```\n\n- 用途总结\n    - 交换变量的值\n\n        ```\n        [x, y] = [y, x]\n        ```\n    - 函数参数定义\n\n        ```\n        // 参数是一组有次序的值\n        function f([x, y, z]) { ... }\n        f([1, 2, 3])\n\n        // 参数是一组无次序的值\n        function f({x, y, z}) { ... }\n        f({z: 3, y: 2, x: 1})\n        ```\n\n    - 函数参数的默认值\n\n        ```\n        jQuery.ajax = function (url, {\n            async = true,\n            beforeSend = function () {},\n            cache = true,\n            complete = function () {},\n            crossDomain = false,\n            global = true,\n            // ... more config\n        }) {\n          // ... do stuff\n        };\n        // 避免了 var foo = config.foo || 'default foo' 这样的语句\n        ```\n        \n    - 遍历Map\n\n        ```\n        var map = new Map()\n        map.set('first', 'hello')\n        map.set('second', 'world')\n        // [key] 或 [, value] 可以只获取key或只获取value\n        for (let [key, value] of map) {\n            console.log(key + \" is \" + value)\n        }\n        // first is hello\n        // second is world\n        ```\n\n    - 多重返回值\n    ```\n    // 数组形式\n    function returnMultipleValues() {\n        return [1, 2]\n    }\n    var [foo, bar] = returnMultipleValues()\n\n    // 对象形式\n    function returnMultipleValues() {\n        return {\n            foo: 1,\n            bar: 2\n        }\n    }\n    var {foo, bar} = returnMultipleValues()\n    ```\n\n    - 输入模块的指定方法\n\n        ```\n        const {SourceMapConsumer, SourceNode} = require(\"source-map\");\n        // 类似 `import` 的语法\n        ```\n\n#### 箭头函数\n\n```\nvar sum = (a, b) => a + b\nsum(2, 3) // 5\n```\n\n- 箭头函数没有自己的 this 值，它的 this 继承自外围作用域\n- 箭头函数没有自己的 arguments 值，可以使用不定参数和默认参数来实现\n\n详细的语法参考 [这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n#### 循环\n\n- 最初我们使用普通的 for 循环遍历数组\n```\nvar arr = [1, 2, 3]\nfor (var i = 0; i < arr.length; i++) {\n    console.log(i, arr[i])\n}\n```\n\n- ES5之后，使用 Array.prototype.forEach\n```\narr.forEach(function (val) {\n    console.log(val)\n})\n```\nforEach 的缺点： 不能使用 break 中断循环；不能使用 return 返回外层。\n\n- 或许也可以试一下 for-in 循环\n```\nfor (var index in arr) {\n    console.log(arr[index])\n}\n```\nfor-in 的缺点：循环变量 index 不是数字而是字符串；遍历的不仅包含数组元素还可能包含自定义属性，如 arr.name；更甚，遍历结果可能按随机顺序 orz！\n\n其实 for-in 是为遍历对象而设计的。\n\n- 请使用 for-of 循环吧\n```\nfor (var val of arr) {\n    console.log(val)\n}\n```\n简洁而正确，可正确响应 `break`、`continue`、`return`。\n它为遍历各种集合而设计，实际是调用集合的`[Symbol.iterator]()`方法。\n但它也有缺点，那就是无法获取索引值。\n```\n// 因为jQuery对象与数组相似，可以为其添加与数组一致的迭代器方法\njQuery.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator]\n// 这样就可以使用 for-of 遍历 jQuery 对象了\nfor (var $item of $('div')) {\n    console.log($item)\n}\n```\n\n#### 迭代器\n\nArray/Set/Map 都有一个迭代器方法，也就是`[Symbol.iterator]()`。可以为任何对象添加这个方法，拥有这个方法的对象被称为`可迭代的`。\n\n迭代器是一个拥有 `next` 方法的对象，遍历这个对象时，每个循环都调用 next 方法。\n\n```\nvar zeroesForeverIterator = {\n    [Symbol.iterator] () {\n        return this\n    },\n    next () {\n        return {done: false, value: 0};\n    }\n}\n```\n\n#### 生成器\n\n生成器是一种特殊的函数，它与函数有以下不同：\n1. 使用 `function*` 声明；\n2. 函数内部可以写无数个 `yield` 语句，类似`return`；\n3. 调用生成器函数，返回一个暂停的生成器对象；\n4. 每当调用生成器对象的 `.next()` 方法，函数将开启运行直到下一个`yield`语句，并返回对象 `{value: 'yield 后的值', done: false}`，执行到最后一个 yield 时，返回对象的 done 值为 true。\n\n```\nfunction* quips (name) {\n    yield 'this'\n    yield 'is'\n    yield name + '\\'s'\n    yield 'generator'\n}\n\nvar q = quips('celine')\nq.next()  // {value: 'this', done: false}\nq.next()  // {value: 'is', done: false}\nq.next()  // {value: 'celine's', done: false}\nq.next()  // {value: 'generator', done: true}\n```\n\n这个奇怪的东西是用来干嘛的呢？\n\n假如我想实现一个 range 迭代器，像这样：\n```\n// 应该弹出三次 \"ding\"\nfor (var value of range(0, 3)) {\n    alert(\"Ding! at floor #\" + value);\n}\n\n// 方法一：使用 ES6的 class 实现\nclass RangeIterator {\n  constructor(start, stop) {\n    this.value = start;\n    this.stop = stop;\n  }\n\n  [Symbol.iterator]() { return this; }\n\n  next() {\n    var value = this.value;\n    if (value < this.stop) {\n      this.value++;\n      return {done: false, value: value};\n    } else {\n      return {done: true, value: undefined};\n    }\n  }\n}\n\n// 返回一个新的迭代器，可以从start到stop计数。\nfunction range(start, stop) {\n  return new RangeIterator(start, stop);\n}\n\n// 方法二：用生成器\nfunction* range (start, stop) {\n    for (var i = start; i < stop; i++) {\n        yield i;\n    }\n}\n```\n就是这么简洁明了，我和我的小伙伴都惊呆了！\n\n> 生成器是迭代器。\n\n#### 模块\n\n- es6中，一个js 文件是一个模块，默认为严格模式；\n- 在模块中可以使用 import 来引入模块，用 export 来导出模块。\n\n#### 集合\n\n#### 代理 Proxy\n","source":"_posts/es6-learning-notes.md","raw":"---\ntitle: ES6 学习笔记 (ing)\ndate: 2016-10-14 19:07:06\ncategories: front-end\ntags: ES6\ntoc: true\n---\n\n> 我只是一个简单的学习笔记。\n\nlearn from this book:  [《ECMAScript 6 入门》](http://es6.ruanyifeng.com/) by 阮一峰\n\n<!-- more -->\n \n<!-- toc -->\n\n## 0. 发展历史\n\n- 1996.11，ECMAScript 1.0发布\n- 1998.6，ECMAScript 2.0发布\n- 1999.12，ECMAScript 3.0发布\n- 2000~2007.10，ECMAScript 4.0草案发布，最终因分歧较大未发布正式版本\n- 2009.12，ECMAScript 5.0\n- 2011.6，ECMAScript 5.1发布\n- 2015.6，ES2015（《ECMAScript 2015标准》）发布\n- 2016.6，ES2016（《ECMAScript 2016标准》）发布\n\n> ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准，涵盖了ES2015、ES2016、ES2017等等，而ES2015则是正式名称，特指该年发布的正式版本的语言标准。\n\n> 本书中提到“ES6”的地方，一般是指ES2015标准，但有时也是泛指“下一代JavaScript语言”。\n\nECMAScript 与 Javascript 的区别是：前者是后者的规格，后者是前者的一种实现。\n\n## 1. 环境\n\n### node (推荐使用nvm管理node版本)\n```\n    ## 安装nvm，<version number>需要用版本号替换，目前是v0.32.0\n    $ curl -o- https://raw.githubusercontent.com/creationix/nvm/<version number>/install.sh | bash\n\n    ## 激活nvm\n    $ source ~/.nvm/nvm.sh\n\n    ## 列出远程node版本\n    $ nvm ls-remote\n\n    ## 安装指定版本的node\n    $ nvm install v4.1.2\n\n    ## 切换到指定版本\n    $ nvm use v4.1.2\n\n    ## 查看当前已安装的node版本\n    $ nvm ls\n\n    ## 设置指定版本为默认的node版本\n    $ nvm alias default stable\n\n    ## 查看当前node版本\n    $ node -v\n\n    ## 查看node安装目录\n    $ which node\n\n    ## npm安装的全局目录\n    $ npm config get prefix\n    $ npm config set prefix /usr/local/\n```\n\n### Babel转码工具\n\n由于浏览器暂不支持 es6 的解析，所以需要使用Babel，第一步是添加配置\n有以下两种方式:\n\n1. 在项目根目录添加配置文件 `.babelrc`。\n```\n    {\n        // 设定转码规则\n        \"presets\": [\"es2015\"]\n    }\n```\n2. 在 `package.json` 添加如下配置\n```\n    \"babel\": {\n     　　\"presets\": [\"es2015\", \"stage-2\"]\n    }\n```\n\n[你可以在这里测试转码效果](http://babeljs.io/repl/)\n\n> [Babel官网](http://babeljs.io/docs/setup/#installation) 推荐将 babel-cli 安装在项目本地，原因有二：\n- Different projects on the same machine can depend on different versions of Babel allowing you to update one at a time.\n- It means you do not have an implicit dependency on the environment you are working in. Making your project far more portable and easier to setup.\n\n- 一台机器上的不同项目可能会基于不同版本的 Babel ，这样允许你一次升级一个项目，不会互相影响\n- 这意味着在你工作的环境下没有含义不明的依赖。使你的项目更轻便、更容易安装。\n\n[[这里还有其它的使用方式]](http://babeljs.io/docs/setup/#installation)\n\n## 2. 主要内容\n\n### 数据类型变化\n\nJS 中的数据类型有：undefined null String Number Boolean Object\n\n#### 新增 symbol 类型\n\n```\n// 创建一个新的symbol，它的值与其它任何值皆不相等：\nvar mySymbol = Symbol()\n\n// 创建一个独一无二的symbol：\nvar isMoving = Symbol(\"isMoving\")\n```\n\n- 三种获取 Symbol 的方式\n    1. Symbol()\n    2. Symbol.for(string)\n    3. 使用标准定义的 Symbol，如 `Symbol.iterator`\n\n- tips\n    - symbol 不能被自动转为字符串或数字，但可以转为 boolean；\n    - symbol 作为属性时不能被 for...in、 `Object.keys()`等遍历到，可以使用`Object.getOwnPropertySymbols(obj)` 或`Reflect.ownKeys(obj)`，前者返回对象的 symbol 键，后者返回所有字符串键和 symbol 键；\n    - Symbol.keyFor(s1) 返回 symbol s1的 key 值\n\n#### Object\n\n- Object.defineProperty()\n- Object.freeze()\n- Object.seal()\n\n### 语法变化\n\n#### 变量声明\n\n- let：声明变量，类似var。与var区别如下：\n    - **块级作用域**。只在let所在代码块内有效，for语句的计数器很适合用let声明；\n    - **先声明后使用**。不存在变量提升；暂时性死区，在一个作用域内所有变量都需要先声明后使用，否则会导致ReferenceError；\n    - **不允许重复声明**；\n\n- const：声明常量。\n    - 除 **只读** 外，其它特性与let类似。\n    - const定义引用类型时，表示的是地址可读，如对象或数组，其值仍然可修改，如果要冻结，可使用`Object.freeze()`;\n\n    ```\n    const foo = Object.freeze({});\n\n    // 常规模式时，下面一行不起作用；\n    // 严格模式时，该行会报错\n    foo.prop = 123;\n    ```\n\n- class\n\n通常我们这样实现一个类：\n```\nfunction Circle(radius) {\n    this.radius = radius;\n    Circle.circlesMade++;\n}\nCircle.draw = function draw(circle, canvas) { /* Canvas绘制代码 */ }\nObject.defineProperty(Circle, \"circlesMade\", {\n    get: function() {\n        return !this._count ? 0 : this._count;\n    },\n    set: function(val) {\n        this._count = val;\n    }\n});\nCircle.prototype = {\n    area() {\n        return Math.pow(this.radius, 2) * Math.PI;\n    },\n    get radius() {\n        return this._radius;\n    },\n    set radius(radius) {\n        if (!Number.isInteger(radius))\n            throw new Error(\"圆的半径必须为整数。\");\n        this._radius = radius;\n    }\n};\n```\n\n现在，新增了`class` 关键字用来声明一个类，像这样：\n\n```\nclass Circle {\n    constructor(radius) {\n        this.radius = radius;\n        Circle.circlesMade++;\n    };\n    static draw(circle, canvas) {\n        // Canvas绘制代码\n    };\n    static get circlesMade() {\n        return !this._count ? 0 : this._count;\n    };\n    static set circlesMade(val) {\n        this._count = val;\n    };\n    area() {\n        return Math.pow(this.radius, 2) * Math.PI;\n    };\n    get radius() {\n        return this._radius;\n    };\n    set radius(radius) {\n        if (!Number.isInteger(radius))\n            throw new Error(\"圆的半径必须为整数。\");\n        this._radius = radius;\n    };\n}\n```\n\n同时，还增加了`extends`来实现继承：\n\n```\nclass Shape {\n    get color() {\n        return this._color;\n    }\n    set color(c) {\n        this._color = parseColorAsRGB(c);\n        this.markChanged();  // 稍后重绘Canvas\n    }\n}\n\nclass Rectangle extends Shape {\n\n}\n```\n\n> ES5中，var或function定义的全局变量与顶层对象(window/global)的属性等价。\n> ES6中，let、const、class定义的全局变量不再跟顶层对象有关联。\n\n```\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n```\n\n#### 模板字符串\n\n- 基础使用方法\n```\nvar str = 'world'\nvar result = `hello ${str}` // 'hello world'\n```\n\n- 标签模板 tagged templates\n语法：模板字符串开始的反撇号前附加一个额外的标签，可以是标识符、属性值或方法调用等任何 ES6的成员表达式或调用表达式。\n\n```\nvar message = SaferHTML`<p>${bonk.sender} 向你示好。</p>`;\n\n// 等效于\nvar message = SaferHTML(templateData, bonk.sender);\n\n// SaferHTML是一个普通的函数，它可以是这样：\nfunction SaferHTML(templateData) {\n  var s = templateData[0];\n  for (var i = 1; i < arguments.length; i++) {\n    var arg = String(arguments[i]);\n\n    // 转义占位符中的特殊字符。\n    s += arg.replace(/&/g, \"&\")\n            .replace(/</g, \"<\")\n            .replace(/</g, \">\");\n\n    // 不转义模板中的特殊字符。\n    s += templateData[i];\n  }\n  return s;\n}\n```\n\n#### 不定参数、默认参数\n\n- 不定参数\n\n    1. 使用 `arguments`解决\n    2. 使用 `...` 展开运算符\n\n    ```\n    // needles 是\b haystack 后面所有参数组成的数组\n    function containsAll(haystack, ...needles) {\n        for (var needle of needles) {\n            if (haystack.indexOf(needle) === -1) {\n                return false\n            }\n        }\n        return true\n    }\n    ```\n\n- 默认参数\n形参部分通过赋值语句\b可以设置默认参数，从左至右依次赋值\n\n```\nfunction getItemById (id = 0) {\n    return {\n        id,\n        name: 'moly'\n    }\n}\n```\n\n\n#### 解构\n\n- 对象赋值模式\n    \n    被解构的值需要被强制转换为对象。因此 null 和 undefined 不能被解构。\n    ```\n    var {a, b} = {a: 1, b: 2} // a: 1, b: 2\n    var {a: name} = {a: 'moly'} // name: moly\n    ```\n\n- 数组赋值模式\n\n    被解构的值一定要包含一个迭代器。同样 null 和 undefined 不可迭代。\n    ```\n    var [a, b] = [1, 2, 3]\n    var [head, ...tail] = [1, 2, 3, 4]; // head: 1,  tail: [2, 3, 4]\n    ```\n\n- 用途总结\n    - 交换变量的值\n\n        ```\n        [x, y] = [y, x]\n        ```\n    - 函数参数定义\n\n        ```\n        // 参数是一组有次序的值\n        function f([x, y, z]) { ... }\n        f([1, 2, 3])\n\n        // 参数是一组无次序的值\n        function f({x, y, z}) { ... }\n        f({z: 3, y: 2, x: 1})\n        ```\n\n    - 函数参数的默认值\n\n        ```\n        jQuery.ajax = function (url, {\n            async = true,\n            beforeSend = function () {},\n            cache = true,\n            complete = function () {},\n            crossDomain = false,\n            global = true,\n            // ... more config\n        }) {\n          // ... do stuff\n        };\n        // 避免了 var foo = config.foo || 'default foo' 这样的语句\n        ```\n        \n    - 遍历Map\n\n        ```\n        var map = new Map()\n        map.set('first', 'hello')\n        map.set('second', 'world')\n        // [key] 或 [, value] 可以只获取key或只获取value\n        for (let [key, value] of map) {\n            console.log(key + \" is \" + value)\n        }\n        // first is hello\n        // second is world\n        ```\n\n    - 多重返回值\n    ```\n    // 数组形式\n    function returnMultipleValues() {\n        return [1, 2]\n    }\n    var [foo, bar] = returnMultipleValues()\n\n    // 对象形式\n    function returnMultipleValues() {\n        return {\n            foo: 1,\n            bar: 2\n        }\n    }\n    var {foo, bar} = returnMultipleValues()\n    ```\n\n    - 输入模块的指定方法\n\n        ```\n        const {SourceMapConsumer, SourceNode} = require(\"source-map\");\n        // 类似 `import` 的语法\n        ```\n\n#### 箭头函数\n\n```\nvar sum = (a, b) => a + b\nsum(2, 3) // 5\n```\n\n- 箭头函数没有自己的 this 值，它的 this 继承自外围作用域\n- 箭头函数没有自己的 arguments 值，可以使用不定参数和默认参数来实现\n\n详细的语法参考 [这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n#### 循环\n\n- 最初我们使用普通的 for 循环遍历数组\n```\nvar arr = [1, 2, 3]\nfor (var i = 0; i < arr.length; i++) {\n    console.log(i, arr[i])\n}\n```\n\n- ES5之后，使用 Array.prototype.forEach\n```\narr.forEach(function (val) {\n    console.log(val)\n})\n```\nforEach 的缺点： 不能使用 break 中断循环；不能使用 return 返回外层。\n\n- 或许也可以试一下 for-in 循环\n```\nfor (var index in arr) {\n    console.log(arr[index])\n}\n```\nfor-in 的缺点：循环变量 index 不是数字而是字符串；遍历的不仅包含数组元素还可能包含自定义属性，如 arr.name；更甚，遍历结果可能按随机顺序 orz！\n\n其实 for-in 是为遍历对象而设计的。\n\n- 请使用 for-of 循环吧\n```\nfor (var val of arr) {\n    console.log(val)\n}\n```\n简洁而正确，可正确响应 `break`、`continue`、`return`。\n它为遍历各种集合而设计，实际是调用集合的`[Symbol.iterator]()`方法。\n但它也有缺点，那就是无法获取索引值。\n```\n// 因为jQuery对象与数组相似，可以为其添加与数组一致的迭代器方法\njQuery.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator]\n// 这样就可以使用 for-of 遍历 jQuery 对象了\nfor (var $item of $('div')) {\n    console.log($item)\n}\n```\n\n#### 迭代器\n\nArray/Set/Map 都有一个迭代器方法，也就是`[Symbol.iterator]()`。可以为任何对象添加这个方法，拥有这个方法的对象被称为`可迭代的`。\n\n迭代器是一个拥有 `next` 方法的对象，遍历这个对象时，每个循环都调用 next 方法。\n\n```\nvar zeroesForeverIterator = {\n    [Symbol.iterator] () {\n        return this\n    },\n    next () {\n        return {done: false, value: 0};\n    }\n}\n```\n\n#### 生成器\n\n生成器是一种特殊的函数，它与函数有以下不同：\n1. 使用 `function*` 声明；\n2. 函数内部可以写无数个 `yield` 语句，类似`return`；\n3. 调用生成器函数，返回一个暂停的生成器对象；\n4. 每当调用生成器对象的 `.next()` 方法，函数将开启运行直到下一个`yield`语句，并返回对象 `{value: 'yield 后的值', done: false}`，执行到最后一个 yield 时，返回对象的 done 值为 true。\n\n```\nfunction* quips (name) {\n    yield 'this'\n    yield 'is'\n    yield name + '\\'s'\n    yield 'generator'\n}\n\nvar q = quips('celine')\nq.next()  // {value: 'this', done: false}\nq.next()  // {value: 'is', done: false}\nq.next()  // {value: 'celine's', done: false}\nq.next()  // {value: 'generator', done: true}\n```\n\n这个奇怪的东西是用来干嘛的呢？\n\n假如我想实现一个 range 迭代器，像这样：\n```\n// 应该弹出三次 \"ding\"\nfor (var value of range(0, 3)) {\n    alert(\"Ding! at floor #\" + value);\n}\n\n// 方法一：使用 ES6的 class 实现\nclass RangeIterator {\n  constructor(start, stop) {\n    this.value = start;\n    this.stop = stop;\n  }\n\n  [Symbol.iterator]() { return this; }\n\n  next() {\n    var value = this.value;\n    if (value < this.stop) {\n      this.value++;\n      return {done: false, value: value};\n    } else {\n      return {done: true, value: undefined};\n    }\n  }\n}\n\n// 返回一个新的迭代器，可以从start到stop计数。\nfunction range(start, stop) {\n  return new RangeIterator(start, stop);\n}\n\n// 方法二：用生成器\nfunction* range (start, stop) {\n    for (var i = start; i < stop; i++) {\n        yield i;\n    }\n}\n```\n就是这么简洁明了，我和我的小伙伴都惊呆了！\n\n> 生成器是迭代器。\n\n#### 模块\n\n- es6中，一个js 文件是一个模块，默认为严格模式；\n- 在模块中可以使用 import 来引入模块，用 export 来导出模块。\n\n#### 集合\n\n#### 代理 Proxy\n","slug":"es6-learning-notes","published":1,"updated":"2018-02-05T16:36:29.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s6500009ms6nzvosj4o","content":"<blockquote>\n<p>我只是一个简单的学习笔记。</p>\n</blockquote>\n<p>learn from this book:  <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ECMAScript 6 入门》</a> by 阮一峰</p>\n<a id=\"more\"></a>\n<!-- toc -->\n<h2 id=\"0-发展历史\"><a href=\"#0-发展历史\" class=\"headerlink\" title=\"0. 发展历史\"></a>0. 发展历史</h2><ul>\n<li>1996.11，ECMAScript 1.0发布</li>\n<li>1998.6，ECMAScript 2.0发布</li>\n<li>1999.12，ECMAScript 3.0发布</li>\n<li>2000~2007.10，ECMAScript 4.0草案发布，最终因分歧较大未发布正式版本</li>\n<li>2009.12，ECMAScript 5.0</li>\n<li>2011.6，ECMAScript 5.1发布</li>\n<li>2015.6，ES2015（《ECMAScript 2015标准》）发布</li>\n<li>2016.6，ES2016（《ECMAScript 2016标准》）发布</li>\n</ul>\n<blockquote>\n<p>ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准，涵盖了ES2015、ES2016、ES2017等等，而ES2015则是正式名称，特指该年发布的正式版本的语言标准。</p>\n<p>本书中提到“ES6”的地方，一般是指ES2015标准，但有时也是泛指“下一代JavaScript语言”。</p>\n</blockquote>\n<p>ECMAScript 与 Javascript 的区别是：前者是后者的规格，后者是前者的一种实现。</p>\n<h2 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1. 环境\"></a>1. 环境</h2><h3 id=\"node-推荐使用nvm管理node版本\"><a href=\"#node-推荐使用nvm管理node版本\" class=\"headerlink\" title=\"node (推荐使用nvm管理node版本)\"></a>node (推荐使用nvm管理node版本)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装nvm，&lt;version number&gt;需要用版本号替换，目前是v0.32.0</span><br><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/&lt;version number&gt;/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\">## 激活nvm</span><br><span class=\"line\">$ source ~/.nvm/nvm.sh</span><br><span class=\"line\"></span><br><span class=\"line\">## 列出远程node版本</span><br><span class=\"line\">$ nvm ls-remote</span><br><span class=\"line\"></span><br><span class=\"line\">## 安装指定版本的node</span><br><span class=\"line\">$ nvm install v4.1.2</span><br><span class=\"line\"></span><br><span class=\"line\">## 切换到指定版本</span><br><span class=\"line\">$ nvm use v4.1.2</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看当前已安装的node版本</span><br><span class=\"line\">$ nvm ls</span><br><span class=\"line\"></span><br><span class=\"line\">## 设置指定版本为默认的node版本</span><br><span class=\"line\">$ nvm alias default stable</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看当前node版本</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看node安装目录</span><br><span class=\"line\">$ which node</span><br><span class=\"line\"></span><br><span class=\"line\">## npm安装的全局目录</span><br><span class=\"line\">$ npm config get prefix</span><br><span class=\"line\">$ npm config set prefix /usr/local/</span><br></pre></td></tr></table></figure>\n<h3 id=\"Babel转码工具\"><a href=\"#Babel转码工具\" class=\"headerlink\" title=\"Babel转码工具\"></a>Babel转码工具</h3><p>由于浏览器暂不支持 es6 的解析，所以需要使用Babel，第一步是添加配置<br>有以下两种方式:</p>\n<ol>\n<li><p>在项目根目录添加配置文件 <code>.babelrc</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 设定转码规则</span><br><span class=\"line\">    &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>package.json</code> 添加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;babel&quot;: &#123;</span><br><span class=\"line\"> 　　&quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-2&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"http://babeljs.io/repl/\" target=\"_blank\" rel=\"noopener\">你可以在这里测试转码效果</a></p>\n<blockquote>\n<p><a href=\"http://babeljs.io/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">Babel官网</a> 推荐将 babel-cli 安装在项目本地，原因有二：</p>\n<ul>\n<li>Different projects on the same machine can depend on different versions of Babel allowing you to update one at a time.</li>\n<li>It means you do not have an implicit dependency on the environment you are working in. Making your project far more portable and easier to setup.</li>\n</ul>\n</blockquote>\n<ul>\n<li>一台机器上的不同项目可能会基于不同版本的 Babel ，这样允许你一次升级一个项目，不会互相影响</li>\n<li>这意味着在你工作的环境下没有含义不明的依赖。使你的项目更轻便、更容易安装。</li>\n</ul>\n<p><a href=\"http://babeljs.io/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">[这里还有其它的使用方式]</a></p>\n<h2 id=\"2-主要内容\"><a href=\"#2-主要内容\" class=\"headerlink\" title=\"2. 主要内容\"></a>2. 主要内容</h2><h3 id=\"数据类型变化\"><a href=\"#数据类型变化\" class=\"headerlink\" title=\"数据类型变化\"></a>数据类型变化</h3><p>JS 中的数据类型有：undefined null String Number Boolean Object</p>\n<h4 id=\"新增-symbol-类型\"><a href=\"#新增-symbol-类型\" class=\"headerlink\" title=\"新增 symbol 类型\"></a>新增 symbol 类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个新的symbol，它的值与其它任何值皆不相等：</span><br><span class=\"line\">var mySymbol = Symbol()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个独一无二的symbol：</span><br><span class=\"line\">var isMoving = Symbol(&quot;isMoving&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>三种获取 Symbol 的方式</p>\n<ol>\n<li>Symbol()</li>\n<li>Symbol.for(string)</li>\n<li>使用标准定义的 Symbol，如 <code>Symbol.iterator</code></li>\n</ol>\n</li>\n<li><p>tips</p>\n<ul>\n<li>symbol 不能被自动转为字符串或数字，但可以转为 boolean；</li>\n<li>symbol 作为属性时不能被 for…in、 <code>Object.keys()</code>等遍历到，可以使用<code>Object.getOwnPropertySymbols(obj)</code> 或<code>Reflect.ownKeys(obj)</code>，前者返回对象的 symbol 键，后者返回所有字符串键和 symbol 键；</li>\n<li>Symbol.keyFor(s1) 返回 symbol s1的 key 值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><ul>\n<li>Object.defineProperty()</li>\n<li>Object.freeze()</li>\n<li>Object.seal()</li>\n</ul>\n<h3 id=\"语法变化\"><a href=\"#语法变化\" class=\"headerlink\" title=\"语法变化\"></a>语法变化</h3><h4 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h4><ul>\n<li><p>let：声明变量，类似var。与var区别如下：</p>\n<ul>\n<li><strong>块级作用域</strong>。只在let所在代码块内有效，for语句的计数器很适合用let声明；</li>\n<li><strong>先声明后使用</strong>。不存在变量提升；暂时性死区，在一个作用域内所有变量都需要先声明后使用，否则会导致ReferenceError；</li>\n<li><strong>不允许重复声明</strong>；</li>\n</ul>\n</li>\n<li><p>const：声明常量。</p>\n<ul>\n<li>除 <strong>只读</strong> 外，其它特性与let类似。</li>\n<li><p>const定义引用类型时，表示的是地址可读，如对象或数组，其值仍然可修改，如果要冻结，可使用<code>Object.freeze()</code>;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = Object.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 常规模式时，下面一行不起作用；</span><br><span class=\"line\">// 严格模式时，该行会报错</span><br><span class=\"line\">foo.prop = 123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>class</p>\n</li>\n</ul>\n<p>通常我们这样实现一个类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Circle(radius) &#123;</span><br><span class=\"line\">    this.radius = radius;</span><br><span class=\"line\">    Circle.circlesMade++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Circle.draw = function draw(circle, canvas) &#123; /* Canvas绘制代码 */ &#125;</span><br><span class=\"line\">Object.defineProperty(Circle, &quot;circlesMade&quot;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">        return !this._count ? 0 : this._count;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(val) &#123;</span><br><span class=\"line\">        this._count = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Circle.prototype = &#123;</span><br><span class=\"line\">    area() &#123;</span><br><span class=\"line\">        return Math.pow(this.radius, 2) * Math.PI;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get radius() &#123;</span><br><span class=\"line\">        return this._radius;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set radius(radius) &#123;</span><br><span class=\"line\">        if (!Number.isInteger(radius))</span><br><span class=\"line\">            throw new Error(&quot;圆的半径必须为整数。&quot;);</span><br><span class=\"line\">        this._radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>现在，新增了<code>class</code> 关键字用来声明一个类，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Circle &#123;</span><br><span class=\"line\">    constructor(radius) &#123;</span><br><span class=\"line\">        this.radius = radius;</span><br><span class=\"line\">        Circle.circlesMade++;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    static draw(circle, canvas) &#123;</span><br><span class=\"line\">        // Canvas绘制代码</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    static get circlesMade() &#123;</span><br><span class=\"line\">        return !this._count ? 0 : this._count;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    static set circlesMade(val) &#123;</span><br><span class=\"line\">        this._count = val;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    area() &#123;</span><br><span class=\"line\">        return Math.pow(this.radius, 2) * Math.PI;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    get radius() &#123;</span><br><span class=\"line\">        return this._radius;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    set radius(radius) &#123;</span><br><span class=\"line\">        if (!Number.isInteger(radius))</span><br><span class=\"line\">            throw new Error(&quot;圆的半径必须为整数。&quot;);</span><br><span class=\"line\">        this._radius = radius;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时，还增加了<code>extends</code>来实现继承：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Shape &#123;</span><br><span class=\"line\">    get color() &#123;</span><br><span class=\"line\">        return this._color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set color(c) &#123;</span><br><span class=\"line\">        this._color = parseColorAsRGB(c);</span><br><span class=\"line\">        this.markChanged();  // 稍后重绘Canvas</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Rectangle extends Shape &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES5中，var或function定义的全局变量与顶层对象(window/global)的属性等价。<br>ES6中，let、const、class定义的全局变量不再跟顶层对象有关联。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">// 如果在Node的REPL环境，可以写成global.a</span><br><span class=\"line\">// 或者采用通用方法，写成this.a</span><br><span class=\"line\">window.a // 1</span><br><span class=\"line\"></span><br><span class=\"line\">let b = 1;</span><br><span class=\"line\">window.b // undefined</span><br></pre></td></tr></table></figure>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><ul>\n<li><p>基础使用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;world&apos;</span><br><span class=\"line\">var result = `hello $&#123;str&#125;` // &apos;hello world&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标签模板 tagged templates<br>语法：模板字符串开始的反撇号前附加一个额外的标签，可以是标识符、属性值或方法调用等任何 ES6的成员表达式或调用表达式。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message = SaferHTML`&lt;p&gt;$&#123;bonk.sender&#125; 向你示好。&lt;/p&gt;`;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等效于</span><br><span class=\"line\">var message = SaferHTML(templateData, bonk.sender);</span><br><span class=\"line\"></span><br><span class=\"line\">// SaferHTML是一个普通的函数，它可以是这样：</span><br><span class=\"line\">function SaferHTML(templateData) &#123;</span><br><span class=\"line\">  var s = templateData[0];</span><br><span class=\"line\">  for (var i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">    var arg = String(arguments[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 转义占位符中的特殊字符。</span><br><span class=\"line\">    s += arg.replace(/&amp;/g, &quot;&amp;&quot;)</span><br><span class=\"line\">            .replace(/&lt;/g, &quot;&lt;&quot;)</span><br><span class=\"line\">            .replace(/&lt;/g, &quot;&gt;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 不转义模板中的特殊字符。</span><br><span class=\"line\">    s += templateData[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不定参数、默认参数\"><a href=\"#不定参数、默认参数\" class=\"headerlink\" title=\"不定参数、默认参数\"></a>不定参数、默认参数</h4><ul>\n<li><p>不定参数</p>\n<ol>\n<li>使用 <code>arguments</code>解决</li>\n<li><p>使用 <code>...</code> 展开运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// needles 是\b haystack 后面所有参数组成的数组</span><br><span class=\"line\">function containsAll(haystack, ...needles) &#123;</span><br><span class=\"line\">    for (var needle of needles) &#123;</span><br><span class=\"line\">        if (haystack.indexOf(needle) === -1) &#123;</span><br><span class=\"line\">            return false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>默认参数<br>形参部分通过赋值语句\b可以设置默认参数，从左至右依次赋值</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getItemById (id = 0) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        id,</span><br><span class=\"line\">        name: &apos;moly&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h4><ul>\n<li><p>对象赋值模式</p>\n<p>  被解构的值需要被强制转换为对象。因此 null 和 undefined 不能被解构。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var &#123;a, b&#125; = &#123;a: 1, b: 2&#125; // a: 1, b: 2</span><br><span class=\"line\">var &#123;a: name&#125; = &#123;a: &apos;moly&apos;&#125; // name: moly</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组赋值模式</p>\n<p>  被解构的值一定要包含一个迭代器。同样 null 和 undefined 不可迭代。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var [a, b] = [1, 2, 3]</span><br><span class=\"line\">var [head, ...tail] = [1, 2, 3, 4]; // head: 1,  tail: [2, 3, 4]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用途总结</p>\n<ul>\n<li><p>交换变量的值</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数定义</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 参数是一组有次序的值</span><br><span class=\"line\">function f([x, y, z]) &#123; ... &#125;</span><br><span class=\"line\">f([1, 2, 3])</span><br><span class=\"line\"></span><br><span class=\"line\">// 参数是一组无次序的值</span><br><span class=\"line\">function f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class=\"line\">f(&#123;z: 3, y: 2, x: 1&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数的默认值</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = function (url, &#123;</span><br><span class=\"line\">    async = true,</span><br><span class=\"line\">    beforeSend = function () &#123;&#125;,</span><br><span class=\"line\">    cache = true,</span><br><span class=\"line\">    complete = function () &#123;&#125;,</span><br><span class=\"line\">    crossDomain = false,</span><br><span class=\"line\">    global = true,</span><br><span class=\"line\">    // ... more config</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  // ... do stuff</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 避免了 var foo = config.foo || &apos;default foo&apos; 这样的语句</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 遍历Map\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var map = new Map()</span><br><span class=\"line\">map.set(&apos;first&apos;, &apos;hello&apos;)</span><br><span class=\"line\">map.set(&apos;second&apos;, &apos;world&apos;)</span><br><span class=\"line\">// [key] 或 [, value] 可以只获取key或只获取value</span><br><span class=\"line\">for (let [key, value] of map) &#123;</span><br><span class=\"line\">    console.log(key + &quot; is &quot; + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// first is hello</span><br><span class=\"line\">// second is world</span><br></pre></td></tr></table></figure>\n\n- 多重返回值\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 数组形式</span><br><span class=\"line\">function returnMultipleValues() &#123;</span><br><span class=\"line\">    return [1, 2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var [foo, bar] = returnMultipleValues()</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">function returnMultipleValues() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        foo: 1,</span><br><span class=\"line\">        bar: 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var &#123;foo, bar&#125; = returnMultipleValues()</span><br></pre></td></tr></table></figure>\n\n- 输入模块的指定方法\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;SourceMapConsumer, SourceNode&#125; = require(&quot;source-map&quot;);</span><br><span class=\"line\">// 类似 `import` 的语法</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = (a, b) =&gt; a + b</span><br><span class=\"line\">sum(2, 3) // 5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>箭头函数没有自己的 this 值，它的 this 继承自外围作用域</li>\n<li>箭头函数没有自己的 arguments 值，可以使用不定参数和默认参数来实现</li>\n</ul>\n<p>详细的语法参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><ul>\n<li><p>最初我们使用普通的 for 循环遍历数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3]</span><br><span class=\"line\">for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    console.log(i, arr[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ES5之后，使用 Array.prototype.forEach</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(function (val) &#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>forEach 的缺点： 不能使用 break 中断循环；不能使用 return 返回外层。</p>\n<ul>\n<li>或许也可以试一下 for-in 循环<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var index in arr) &#123;</span><br><span class=\"line\">    console.log(arr[index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>for-in 的缺点：循环变量 index 不是数字而是字符串；遍历的不仅包含数组元素还可能包含自定义属性，如 arr.name；更甚，遍历结果可能按随机顺序 orz！</p>\n<p>其实 for-in 是为遍历对象而设计的。</p>\n<ul>\n<li>请使用 for-of 循环吧<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var val of arr) &#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>简洁而正确，可正确响应 <code>break</code>、<code>continue</code>、<code>return</code>。<br>它为遍历各种集合而设计，实际是调用集合的<code>[Symbol.iterator]()</code>方法。<br>但它也有缺点，那就是无法获取索引值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 因为jQuery对象与数组相似，可以为其添加与数组一致的迭代器方法</span><br><span class=\"line\">jQuery.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator]</span><br><span class=\"line\">// 这样就可以使用 for-of 遍历 jQuery 对象了</span><br><span class=\"line\">for (var $item of $(&apos;div&apos;)) &#123;</span><br><span class=\"line\">    console.log($item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>Array/Set/Map 都有一个迭代器方法，也就是<code>[Symbol.iterator]()</code>。可以为任何对象添加这个方法，拥有这个方法的对象被称为<code>可迭代的</code>。</p>\n<p>迭代器是一个拥有 <code>next</code> 方法的对象，遍历这个对象时，每个循环都调用 next 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var zeroesForeverIterator = &#123;</span><br><span class=\"line\">    [Symbol.iterator] () &#123;</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    next () &#123;</span><br><span class=\"line\">        return &#123;done: false, value: 0&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><p>生成器是一种特殊的函数，它与函数有以下不同：</p>\n<ol>\n<li>使用 <code>function*</code> 声明；</li>\n<li>函数内部可以写无数个 <code>yield</code> 语句，类似<code>return</code>；</li>\n<li>调用生成器函数，返回一个暂停的生成器对象；</li>\n<li>每当调用生成器对象的 <code>.next()</code> 方法，函数将开启运行直到下一个<code>yield</code>语句，并返回对象 <code>{value: &#39;yield 后的值&#39;, done: false}</code>，执行到最后一个 yield 时，返回对象的 done 值为 true。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* quips (name) &#123;</span><br><span class=\"line\">    yield &apos;this&apos;</span><br><span class=\"line\">    yield &apos;is&apos;</span><br><span class=\"line\">    yield name + &apos;\\&apos;s&apos;</span><br><span class=\"line\">    yield &apos;generator&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var q = quips(&apos;celine&apos;)</span><br><span class=\"line\">q.next()  // &#123;value: &apos;this&apos;, done: false&#125;</span><br><span class=\"line\">q.next()  // &#123;value: &apos;is&apos;, done: false&#125;</span><br><span class=\"line\">q.next()  // &#123;value: &apos;celine&apos;s&apos;, done: false&#125;</span><br><span class=\"line\">q.next()  // &#123;value: &apos;generator&apos;, done: true&#125;</span><br></pre></td></tr></table></figure>\n<p>这个奇怪的东西是用来干嘛的呢？</p>\n<p>假如我想实现一个 range 迭代器，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 应该弹出三次 &quot;ding&quot;</span><br><span class=\"line\">for (var value of range(0, 3)) &#123;</span><br><span class=\"line\">    alert(&quot;Ding! at floor #&quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法一：使用 ES6的 class 实现</span><br><span class=\"line\">class RangeIterator &#123;</span><br><span class=\"line\">  constructor(start, stop) &#123;</span><br><span class=\"line\">    this.value = start;</span><br><span class=\"line\">    this.stop = stop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [Symbol.iterator]() &#123; return this; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    var value = this.value;</span><br><span class=\"line\">    if (value &lt; this.stop) &#123;</span><br><span class=\"line\">      this.value++;</span><br><span class=\"line\">      return &#123;done: false, value: value&#125;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return &#123;done: true, value: undefined&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个新的迭代器，可以从start到stop计数。</span><br><span class=\"line\">function range(start, stop) &#123;</span><br><span class=\"line\">  return new RangeIterator(start, stop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法二：用生成器</span><br><span class=\"line\">function* range (start, stop) &#123;</span><br><span class=\"line\">    for (var i = start; i &lt; stop; i++) &#123;</span><br><span class=\"line\">        yield i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>就是这么简洁明了，我和我的小伙伴都惊呆了！</p>\n<blockquote>\n<p>生成器是迭代器。</p>\n</blockquote>\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><ul>\n<li>es6中，一个js 文件是一个模块，默认为严格模式；</li>\n<li>在模块中可以使用 import 来引入模块，用 export 来导出模块。</li>\n</ul>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><h4 id=\"代理-Proxy\"><a href=\"#代理-Proxy\" class=\"headerlink\" title=\"代理 Proxy\"></a>代理 Proxy</h4>","site":{"data":{}},"excerpt":"<blockquote>\n<p>我只是一个简单的学习笔记。</p>\n</blockquote>\n<p>learn from this book:  <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ECMAScript 6 入门》</a> by 阮一峰</p>","more":"<!-- toc -->\n<h2 id=\"0-发展历史\"><a href=\"#0-发展历史\" class=\"headerlink\" title=\"0. 发展历史\"></a>0. 发展历史</h2><ul>\n<li>1996.11，ECMAScript 1.0发布</li>\n<li>1998.6，ECMAScript 2.0发布</li>\n<li>1999.12，ECMAScript 3.0发布</li>\n<li>2000~2007.10，ECMAScript 4.0草案发布，最终因分歧较大未发布正式版本</li>\n<li>2009.12，ECMAScript 5.0</li>\n<li>2011.6，ECMAScript 5.1发布</li>\n<li>2015.6，ES2015（《ECMAScript 2015标准》）发布</li>\n<li>2016.6，ES2016（《ECMAScript 2016标准》）发布</li>\n</ul>\n<blockquote>\n<p>ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准，涵盖了ES2015、ES2016、ES2017等等，而ES2015则是正式名称，特指该年发布的正式版本的语言标准。</p>\n<p>本书中提到“ES6”的地方，一般是指ES2015标准，但有时也是泛指“下一代JavaScript语言”。</p>\n</blockquote>\n<p>ECMAScript 与 Javascript 的区别是：前者是后者的规格，后者是前者的一种实现。</p>\n<h2 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1. 环境\"></a>1. 环境</h2><h3 id=\"node-推荐使用nvm管理node版本\"><a href=\"#node-推荐使用nvm管理node版本\" class=\"headerlink\" title=\"node (推荐使用nvm管理node版本)\"></a>node (推荐使用nvm管理node版本)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装nvm，&lt;version number&gt;需要用版本号替换，目前是v0.32.0</span><br><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/&lt;version number&gt;/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\">## 激活nvm</span><br><span class=\"line\">$ source ~/.nvm/nvm.sh</span><br><span class=\"line\"></span><br><span class=\"line\">## 列出远程node版本</span><br><span class=\"line\">$ nvm ls-remote</span><br><span class=\"line\"></span><br><span class=\"line\">## 安装指定版本的node</span><br><span class=\"line\">$ nvm install v4.1.2</span><br><span class=\"line\"></span><br><span class=\"line\">## 切换到指定版本</span><br><span class=\"line\">$ nvm use v4.1.2</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看当前已安装的node版本</span><br><span class=\"line\">$ nvm ls</span><br><span class=\"line\"></span><br><span class=\"line\">## 设置指定版本为默认的node版本</span><br><span class=\"line\">$ nvm alias default stable</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看当前node版本</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看node安装目录</span><br><span class=\"line\">$ which node</span><br><span class=\"line\"></span><br><span class=\"line\">## npm安装的全局目录</span><br><span class=\"line\">$ npm config get prefix</span><br><span class=\"line\">$ npm config set prefix /usr/local/</span><br></pre></td></tr></table></figure>\n<h3 id=\"Babel转码工具\"><a href=\"#Babel转码工具\" class=\"headerlink\" title=\"Babel转码工具\"></a>Babel转码工具</h3><p>由于浏览器暂不支持 es6 的解析，所以需要使用Babel，第一步是添加配置<br>有以下两种方式:</p>\n<ol>\n<li><p>在项目根目录添加配置文件 <code>.babelrc</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 设定转码规则</span><br><span class=\"line\">    &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>package.json</code> 添加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;babel&quot;: &#123;</span><br><span class=\"line\"> 　　&quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-2&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"http://babeljs.io/repl/\" target=\"_blank\" rel=\"noopener\">你可以在这里测试转码效果</a></p>\n<blockquote>\n<p><a href=\"http://babeljs.io/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">Babel官网</a> 推荐将 babel-cli 安装在项目本地，原因有二：</p>\n<ul>\n<li>Different projects on the same machine can depend on different versions of Babel allowing you to update one at a time.</li>\n<li>It means you do not have an implicit dependency on the environment you are working in. Making your project far more portable and easier to setup.</li>\n</ul>\n</blockquote>\n<ul>\n<li>一台机器上的不同项目可能会基于不同版本的 Babel ，这样允许你一次升级一个项目，不会互相影响</li>\n<li>这意味着在你工作的环境下没有含义不明的依赖。使你的项目更轻便、更容易安装。</li>\n</ul>\n<p><a href=\"http://babeljs.io/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">[这里还有其它的使用方式]</a></p>\n<h2 id=\"2-主要内容\"><a href=\"#2-主要内容\" class=\"headerlink\" title=\"2. 主要内容\"></a>2. 主要内容</h2><h3 id=\"数据类型变化\"><a href=\"#数据类型变化\" class=\"headerlink\" title=\"数据类型变化\"></a>数据类型变化</h3><p>JS 中的数据类型有：undefined null String Number Boolean Object</p>\n<h4 id=\"新增-symbol-类型\"><a href=\"#新增-symbol-类型\" class=\"headerlink\" title=\"新增 symbol 类型\"></a>新增 symbol 类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个新的symbol，它的值与其它任何值皆不相等：</span><br><span class=\"line\">var mySymbol = Symbol()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个独一无二的symbol：</span><br><span class=\"line\">var isMoving = Symbol(&quot;isMoving&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>三种获取 Symbol 的方式</p>\n<ol>\n<li>Symbol()</li>\n<li>Symbol.for(string)</li>\n<li>使用标准定义的 Symbol，如 <code>Symbol.iterator</code></li>\n</ol>\n</li>\n<li><p>tips</p>\n<ul>\n<li>symbol 不能被自动转为字符串或数字，但可以转为 boolean；</li>\n<li>symbol 作为属性时不能被 for…in、 <code>Object.keys()</code>等遍历到，可以使用<code>Object.getOwnPropertySymbols(obj)</code> 或<code>Reflect.ownKeys(obj)</code>，前者返回对象的 symbol 键，后者返回所有字符串键和 symbol 键；</li>\n<li>Symbol.keyFor(s1) 返回 symbol s1的 key 值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><ul>\n<li>Object.defineProperty()</li>\n<li>Object.freeze()</li>\n<li>Object.seal()</li>\n</ul>\n<h3 id=\"语法变化\"><a href=\"#语法变化\" class=\"headerlink\" title=\"语法变化\"></a>语法变化</h3><h4 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h4><ul>\n<li><p>let：声明变量，类似var。与var区别如下：</p>\n<ul>\n<li><strong>块级作用域</strong>。只在let所在代码块内有效，for语句的计数器很适合用let声明；</li>\n<li><strong>先声明后使用</strong>。不存在变量提升；暂时性死区，在一个作用域内所有变量都需要先声明后使用，否则会导致ReferenceError；</li>\n<li><strong>不允许重复声明</strong>；</li>\n</ul>\n</li>\n<li><p>const：声明常量。</p>\n<ul>\n<li>除 <strong>只读</strong> 外，其它特性与let类似。</li>\n<li><p>const定义引用类型时，表示的是地址可读，如对象或数组，其值仍然可修改，如果要冻结，可使用<code>Object.freeze()</code>;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = Object.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 常规模式时，下面一行不起作用；</span><br><span class=\"line\">// 严格模式时，该行会报错</span><br><span class=\"line\">foo.prop = 123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>class</p>\n</li>\n</ul>\n<p>通常我们这样实现一个类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Circle(radius) &#123;</span><br><span class=\"line\">    this.radius = radius;</span><br><span class=\"line\">    Circle.circlesMade++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Circle.draw = function draw(circle, canvas) &#123; /* Canvas绘制代码 */ &#125;</span><br><span class=\"line\">Object.defineProperty(Circle, &quot;circlesMade&quot;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">        return !this._count ? 0 : this._count;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(val) &#123;</span><br><span class=\"line\">        this._count = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Circle.prototype = &#123;</span><br><span class=\"line\">    area() &#123;</span><br><span class=\"line\">        return Math.pow(this.radius, 2) * Math.PI;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get radius() &#123;</span><br><span class=\"line\">        return this._radius;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set radius(radius) &#123;</span><br><span class=\"line\">        if (!Number.isInteger(radius))</span><br><span class=\"line\">            throw new Error(&quot;圆的半径必须为整数。&quot;);</span><br><span class=\"line\">        this._radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>现在，新增了<code>class</code> 关键字用来声明一个类，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Circle &#123;</span><br><span class=\"line\">    constructor(radius) &#123;</span><br><span class=\"line\">        this.radius = radius;</span><br><span class=\"line\">        Circle.circlesMade++;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    static draw(circle, canvas) &#123;</span><br><span class=\"line\">        // Canvas绘制代码</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    static get circlesMade() &#123;</span><br><span class=\"line\">        return !this._count ? 0 : this._count;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    static set circlesMade(val) &#123;</span><br><span class=\"line\">        this._count = val;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    area() &#123;</span><br><span class=\"line\">        return Math.pow(this.radius, 2) * Math.PI;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    get radius() &#123;</span><br><span class=\"line\">        return this._radius;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    set radius(radius) &#123;</span><br><span class=\"line\">        if (!Number.isInteger(radius))</span><br><span class=\"line\">            throw new Error(&quot;圆的半径必须为整数。&quot;);</span><br><span class=\"line\">        this._radius = radius;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时，还增加了<code>extends</code>来实现继承：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Shape &#123;</span><br><span class=\"line\">    get color() &#123;</span><br><span class=\"line\">        return this._color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set color(c) &#123;</span><br><span class=\"line\">        this._color = parseColorAsRGB(c);</span><br><span class=\"line\">        this.markChanged();  // 稍后重绘Canvas</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Rectangle extends Shape &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES5中，var或function定义的全局变量与顶层对象(window/global)的属性等价。<br>ES6中，let、const、class定义的全局变量不再跟顶层对象有关联。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">// 如果在Node的REPL环境，可以写成global.a</span><br><span class=\"line\">// 或者采用通用方法，写成this.a</span><br><span class=\"line\">window.a // 1</span><br><span class=\"line\"></span><br><span class=\"line\">let b = 1;</span><br><span class=\"line\">window.b // undefined</span><br></pre></td></tr></table></figure>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><ul>\n<li><p>基础使用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;world&apos;</span><br><span class=\"line\">var result = `hello $&#123;str&#125;` // &apos;hello world&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标签模板 tagged templates<br>语法：模板字符串开始的反撇号前附加一个额外的标签，可以是标识符、属性值或方法调用等任何 ES6的成员表达式或调用表达式。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message = SaferHTML`&lt;p&gt;$&#123;bonk.sender&#125; 向你示好。&lt;/p&gt;`;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等效于</span><br><span class=\"line\">var message = SaferHTML(templateData, bonk.sender);</span><br><span class=\"line\"></span><br><span class=\"line\">// SaferHTML是一个普通的函数，它可以是这样：</span><br><span class=\"line\">function SaferHTML(templateData) &#123;</span><br><span class=\"line\">  var s = templateData[0];</span><br><span class=\"line\">  for (var i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">    var arg = String(arguments[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 转义占位符中的特殊字符。</span><br><span class=\"line\">    s += arg.replace(/&amp;/g, &quot;&amp;&quot;)</span><br><span class=\"line\">            .replace(/&lt;/g, &quot;&lt;&quot;)</span><br><span class=\"line\">            .replace(/&lt;/g, &quot;&gt;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 不转义模板中的特殊字符。</span><br><span class=\"line\">    s += templateData[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不定参数、默认参数\"><a href=\"#不定参数、默认参数\" class=\"headerlink\" title=\"不定参数、默认参数\"></a>不定参数、默认参数</h4><ul>\n<li><p>不定参数</p>\n<ol>\n<li>使用 <code>arguments</code>解决</li>\n<li><p>使用 <code>...</code> 展开运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// needles 是\b haystack 后面所有参数组成的数组</span><br><span class=\"line\">function containsAll(haystack, ...needles) &#123;</span><br><span class=\"line\">    for (var needle of needles) &#123;</span><br><span class=\"line\">        if (haystack.indexOf(needle) === -1) &#123;</span><br><span class=\"line\">            return false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>默认参数<br>形参部分通过赋值语句\b可以设置默认参数，从左至右依次赋值</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getItemById (id = 0) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        id,</span><br><span class=\"line\">        name: &apos;moly&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h4><ul>\n<li><p>对象赋值模式</p>\n<p>  被解构的值需要被强制转换为对象。因此 null 和 undefined 不能被解构。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var &#123;a, b&#125; = &#123;a: 1, b: 2&#125; // a: 1, b: 2</span><br><span class=\"line\">var &#123;a: name&#125; = &#123;a: &apos;moly&apos;&#125; // name: moly</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组赋值模式</p>\n<p>  被解构的值一定要包含一个迭代器。同样 null 和 undefined 不可迭代。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var [a, b] = [1, 2, 3]</span><br><span class=\"line\">var [head, ...tail] = [1, 2, 3, 4]; // head: 1,  tail: [2, 3, 4]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用途总结</p>\n<ul>\n<li><p>交换变量的值</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数定义</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 参数是一组有次序的值</span><br><span class=\"line\">function f([x, y, z]) &#123; ... &#125;</span><br><span class=\"line\">f([1, 2, 3])</span><br><span class=\"line\"></span><br><span class=\"line\">// 参数是一组无次序的值</span><br><span class=\"line\">function f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class=\"line\">f(&#123;z: 3, y: 2, x: 1&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数的默认值</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = function (url, &#123;</span><br><span class=\"line\">    async = true,</span><br><span class=\"line\">    beforeSend = function () &#123;&#125;,</span><br><span class=\"line\">    cache = true,</span><br><span class=\"line\">    complete = function () &#123;&#125;,</span><br><span class=\"line\">    crossDomain = false,</span><br><span class=\"line\">    global = true,</span><br><span class=\"line\">    // ... more config</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  // ... do stuff</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 避免了 var foo = config.foo || &apos;default foo&apos; 这样的语句</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 遍历Map\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var map = new Map()</span><br><span class=\"line\">map.set(&apos;first&apos;, &apos;hello&apos;)</span><br><span class=\"line\">map.set(&apos;second&apos;, &apos;world&apos;)</span><br><span class=\"line\">// [key] 或 [, value] 可以只获取key或只获取value</span><br><span class=\"line\">for (let [key, value] of map) &#123;</span><br><span class=\"line\">    console.log(key + &quot; is &quot; + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// first is hello</span><br><span class=\"line\">// second is world</span><br></pre></td></tr></table></figure>\n\n- 多重返回值\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 数组形式</span><br><span class=\"line\">function returnMultipleValues() &#123;</span><br><span class=\"line\">    return [1, 2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var [foo, bar] = returnMultipleValues()</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象形式</span><br><span class=\"line\">function returnMultipleValues() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        foo: 1,</span><br><span class=\"line\">        bar: 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var &#123;foo, bar&#125; = returnMultipleValues()</span><br></pre></td></tr></table></figure>\n\n- 输入模块的指定方法\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;SourceMapConsumer, SourceNode&#125; = require(&quot;source-map&quot;);</span><br><span class=\"line\">// 类似 `import` 的语法</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = (a, b) =&gt; a + b</span><br><span class=\"line\">sum(2, 3) // 5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>箭头函数没有自己的 this 值，它的 this 继承自外围作用域</li>\n<li>箭头函数没有自己的 arguments 值，可以使用不定参数和默认参数来实现</li>\n</ul>\n<p>详细的语法参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><ul>\n<li><p>最初我们使用普通的 for 循环遍历数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3]</span><br><span class=\"line\">for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    console.log(i, arr[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ES5之后，使用 Array.prototype.forEach</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(function (val) &#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>forEach 的缺点： 不能使用 break 中断循环；不能使用 return 返回外层。</p>\n<ul>\n<li>或许也可以试一下 for-in 循环<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var index in arr) &#123;</span><br><span class=\"line\">    console.log(arr[index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>for-in 的缺点：循环变量 index 不是数字而是字符串；遍历的不仅包含数组元素还可能包含自定义属性，如 arr.name；更甚，遍历结果可能按随机顺序 orz！</p>\n<p>其实 for-in 是为遍历对象而设计的。</p>\n<ul>\n<li>请使用 for-of 循环吧<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var val of arr) &#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>简洁而正确，可正确响应 <code>break</code>、<code>continue</code>、<code>return</code>。<br>它为遍历各种集合而设计，实际是调用集合的<code>[Symbol.iterator]()</code>方法。<br>但它也有缺点，那就是无法获取索引值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 因为jQuery对象与数组相似，可以为其添加与数组一致的迭代器方法</span><br><span class=\"line\">jQuery.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator]</span><br><span class=\"line\">// 这样就可以使用 for-of 遍历 jQuery 对象了</span><br><span class=\"line\">for (var $item of $(&apos;div&apos;)) &#123;</span><br><span class=\"line\">    console.log($item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>Array/Set/Map 都有一个迭代器方法，也就是<code>[Symbol.iterator]()</code>。可以为任何对象添加这个方法，拥有这个方法的对象被称为<code>可迭代的</code>。</p>\n<p>迭代器是一个拥有 <code>next</code> 方法的对象，遍历这个对象时，每个循环都调用 next 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var zeroesForeverIterator = &#123;</span><br><span class=\"line\">    [Symbol.iterator] () &#123;</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    next () &#123;</span><br><span class=\"line\">        return &#123;done: false, value: 0&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><p>生成器是一种特殊的函数，它与函数有以下不同：</p>\n<ol>\n<li>使用 <code>function*</code> 声明；</li>\n<li>函数内部可以写无数个 <code>yield</code> 语句，类似<code>return</code>；</li>\n<li>调用生成器函数，返回一个暂停的生成器对象；</li>\n<li>每当调用生成器对象的 <code>.next()</code> 方法，函数将开启运行直到下一个<code>yield</code>语句，并返回对象 <code>{value: &#39;yield 后的值&#39;, done: false}</code>，执行到最后一个 yield 时，返回对象的 done 值为 true。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* quips (name) &#123;</span><br><span class=\"line\">    yield &apos;this&apos;</span><br><span class=\"line\">    yield &apos;is&apos;</span><br><span class=\"line\">    yield name + &apos;\\&apos;s&apos;</span><br><span class=\"line\">    yield &apos;generator&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var q = quips(&apos;celine&apos;)</span><br><span class=\"line\">q.next()  // &#123;value: &apos;this&apos;, done: false&#125;</span><br><span class=\"line\">q.next()  // &#123;value: &apos;is&apos;, done: false&#125;</span><br><span class=\"line\">q.next()  // &#123;value: &apos;celine&apos;s&apos;, done: false&#125;</span><br><span class=\"line\">q.next()  // &#123;value: &apos;generator&apos;, done: true&#125;</span><br></pre></td></tr></table></figure>\n<p>这个奇怪的东西是用来干嘛的呢？</p>\n<p>假如我想实现一个 range 迭代器，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 应该弹出三次 &quot;ding&quot;</span><br><span class=\"line\">for (var value of range(0, 3)) &#123;</span><br><span class=\"line\">    alert(&quot;Ding! at floor #&quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法一：使用 ES6的 class 实现</span><br><span class=\"line\">class RangeIterator &#123;</span><br><span class=\"line\">  constructor(start, stop) &#123;</span><br><span class=\"line\">    this.value = start;</span><br><span class=\"line\">    this.stop = stop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [Symbol.iterator]() &#123; return this; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    var value = this.value;</span><br><span class=\"line\">    if (value &lt; this.stop) &#123;</span><br><span class=\"line\">      this.value++;</span><br><span class=\"line\">      return &#123;done: false, value: value&#125;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return &#123;done: true, value: undefined&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个新的迭代器，可以从start到stop计数。</span><br><span class=\"line\">function range(start, stop) &#123;</span><br><span class=\"line\">  return new RangeIterator(start, stop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法二：用生成器</span><br><span class=\"line\">function* range (start, stop) &#123;</span><br><span class=\"line\">    for (var i = start; i &lt; stop; i++) &#123;</span><br><span class=\"line\">        yield i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>就是这么简洁明了，我和我的小伙伴都惊呆了！</p>\n<blockquote>\n<p>生成器是迭代器。</p>\n</blockquote>\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><ul>\n<li>es6中，一个js 文件是一个模块，默认为严格模式；</li>\n<li>在模块中可以使用 import 来引入模块，用 export 来导出模块。</li>\n</ul>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><h4 id=\"代理-Proxy\"><a href=\"#代理-Proxy\" class=\"headerlink\" title=\"代理 Proxy\"></a>代理 Proxy</h4>"},{"title":"如何使用Hexo在github上搭建blog","date":"2016-08-11T05:36:40.000Z","_content":"\n原文：[How to setup a blog on github with Hexo](http://zirho.github.io/2016/06/04/hexo/)\n\n你可以通过复制和粘贴下面的代码来创建一个blog。\n\n相关链接：\n\n- [Hexo docs](https://hexo.io/docs/)\n- [Hexo themes](https://hexo.io/themes/)\n- [github pages](https://pages.github.com/)\n\n\n<!-- more -->\n\n\n-----\n\n\n## 准备工作\n\n### 安装Git\n\n- Windows: 下载&安装[git](https://git-scm.com/download/win).\n- Mac: [Homebrew](http://brew.sh/), [MacPorts](http://www.macports.org/) or [installer](http://sourceforge.net/projects/git-osx-installer/).\n- Linux (Ubuntu, Debian): `sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS): `sudo yum install git-core`\n\n\n### 安装Node.js\n\n推荐使用 nvm (亲测特别特别好用，如有需要可以通过nvm安装不同版本的node，随意切换)\n\ncURL:\n\n```\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\nWget:\n\n```\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\n安装好nvm之后，重启终端，执行下面的命令安装Node.js\n\n```\n$ nvm install 4\n```\n\n或者，你也可以直接下载安装[Node.js](http://nodejs.cn/)\n\n\n### 安装Hexo\n\n```shell\n$ npm install -g hexo-cli\n```\n\n\n### 在github上新建repo\n\nrepo的名字必须是 <span style=\"color: #999;\">{github用户名}.github.io</span> ，这同时也是你的blogname（原文没这么说，记得在别的文章看到过，你也可以试试用其它的可不可以）\n\n\n\n## 搭建Hexo blog\n\n### 创建blog项目\n\n首先在你的workspace目录下执行下面的命令，会生成一个以blog名称命名的目录并安装好依赖\n\n```shell\n$ hexo init {blogname}\n$ cd {blogname}\n$ npm i\n$ git init\n```\n\n### 安装Hexo主题\n\n在[这里](https://hexo.io/themes/)找到你喜欢的主题，以及它的github地址\n\n```\n$ git submodule add {theme-github-url} themes/{theme-name}\n```\n\n将 _config.yml.example 拷贝至 _config.yml (这一步我没有做，因为下载好的主题目录下已经是这样，不需要修改)\n\n```\n$ cp themes/{theme-name}/_config.yml.example themes/{theme-name}/_config.yml\n```\n\n更新项目根目录下的 _config.yml，将theme的值替换成你下载的主题名称\n\n```\ntheme: {theme-name}\n```\n\n\n### 修改blog配置\n\n修改根目录的 _config.yml （不要将这个跟主题目录下的 _config.yml 搞混），主要修改Site配置和deploy配置\n\n```\n# Site\ntitle: letica's blog                      #设置header里的title\nsubtitle: love and peace                  #副标题\ndescription:\nauthor: letica                            #作者名,会显示在左下角\nemail: letica@126.com                       #邮箱呗\nlanguage: zh-CN                               #设置中文\ntimezone:\n\n...\n\ndeploy:\n  type: git\n  repo: https://github.com/letica/letica.github.io.git\n  branch: master\n  message: \"Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\"\n\n```\n\n\n### 本地预览blog\n\n```\n$ npm i -S hexo-server\n$ hexo server\n```\n执行命令后点击下面的链接即可预览，一般是 http://localhost:4000\n\n\n### 部署blog\n\n```\n$ npm i -S hexo-deployer-git\n$ hexo deploy\n```\n\n当当当，此时此刻，你应该可以在这个地址看到你的blog了 http://{blogname}.github.io.\n\n\n### 将源文件上传至github （可选）\n\n为了维护代码，你可以创建另外的分支并提交。\n\n```\n$ git remote add origin {your-git-repo-url}\n$ git checkout -b source\n$ git push origin source\n```\n\n\n### 发布新文章\n\n创建新的post，编辑，清理，生成静态文件，部署。就是介么简单：）\n\n```\n$ hexo new '{post name}'\n$ vi source/_posts/{postname}.md\n$ hexo clean\n$ hexo generate -d\n$ hexo deploy\n```\n\n\n*Happy posting!*\n","source":"_posts/How-to-setup-a-blog-on-github-with-Hexo.md","raw":"---\ntitle: 如何使用Hexo在github上搭建blog\ndate: 2016-08-11 13:36:40\ncategories: tool\ntags: hexo\n---\n\n原文：[How to setup a blog on github with Hexo](http://zirho.github.io/2016/06/04/hexo/)\n\n你可以通过复制和粘贴下面的代码来创建一个blog。\n\n相关链接：\n\n- [Hexo docs](https://hexo.io/docs/)\n- [Hexo themes](https://hexo.io/themes/)\n- [github pages](https://pages.github.com/)\n\n\n<!-- more -->\n\n\n-----\n\n\n## 准备工作\n\n### 安装Git\n\n- Windows: 下载&安装[git](https://git-scm.com/download/win).\n- Mac: [Homebrew](http://brew.sh/), [MacPorts](http://www.macports.org/) or [installer](http://sourceforge.net/projects/git-osx-installer/).\n- Linux (Ubuntu, Debian): `sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS): `sudo yum install git-core`\n\n\n### 安装Node.js\n\n推荐使用 nvm (亲测特别特别好用，如有需要可以通过nvm安装不同版本的node，随意切换)\n\ncURL:\n\n```\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\nWget:\n\n```\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\n安装好nvm之后，重启终端，执行下面的命令安装Node.js\n\n```\n$ nvm install 4\n```\n\n或者，你也可以直接下载安装[Node.js](http://nodejs.cn/)\n\n\n### 安装Hexo\n\n```shell\n$ npm install -g hexo-cli\n```\n\n\n### 在github上新建repo\n\nrepo的名字必须是 <span style=\"color: #999;\">{github用户名}.github.io</span> ，这同时也是你的blogname（原文没这么说，记得在别的文章看到过，你也可以试试用其它的可不可以）\n\n\n\n## 搭建Hexo blog\n\n### 创建blog项目\n\n首先在你的workspace目录下执行下面的命令，会生成一个以blog名称命名的目录并安装好依赖\n\n```shell\n$ hexo init {blogname}\n$ cd {blogname}\n$ npm i\n$ git init\n```\n\n### 安装Hexo主题\n\n在[这里](https://hexo.io/themes/)找到你喜欢的主题，以及它的github地址\n\n```\n$ git submodule add {theme-github-url} themes/{theme-name}\n```\n\n将 _config.yml.example 拷贝至 _config.yml (这一步我没有做，因为下载好的主题目录下已经是这样，不需要修改)\n\n```\n$ cp themes/{theme-name}/_config.yml.example themes/{theme-name}/_config.yml\n```\n\n更新项目根目录下的 _config.yml，将theme的值替换成你下载的主题名称\n\n```\ntheme: {theme-name}\n```\n\n\n### 修改blog配置\n\n修改根目录的 _config.yml （不要将这个跟主题目录下的 _config.yml 搞混），主要修改Site配置和deploy配置\n\n```\n# Site\ntitle: letica's blog                      #设置header里的title\nsubtitle: love and peace                  #副标题\ndescription:\nauthor: letica                            #作者名,会显示在左下角\nemail: letica@126.com                       #邮箱呗\nlanguage: zh-CN                               #设置中文\ntimezone:\n\n...\n\ndeploy:\n  type: git\n  repo: https://github.com/letica/letica.github.io.git\n  branch: master\n  message: \"Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\"\n\n```\n\n\n### 本地预览blog\n\n```\n$ npm i -S hexo-server\n$ hexo server\n```\n执行命令后点击下面的链接即可预览，一般是 http://localhost:4000\n\n\n### 部署blog\n\n```\n$ npm i -S hexo-deployer-git\n$ hexo deploy\n```\n\n当当当，此时此刻，你应该可以在这个地址看到你的blog了 http://{blogname}.github.io.\n\n\n### 将源文件上传至github （可选）\n\n为了维护代码，你可以创建另外的分支并提交。\n\n```\n$ git remote add origin {your-git-repo-url}\n$ git checkout -b source\n$ git push origin source\n```\n\n\n### 发布新文章\n\n创建新的post，编辑，清理，生成静态文件，部署。就是介么简单：）\n\n```\n$ hexo new '{post name}'\n$ vi source/_posts/{postname}.md\n$ hexo clean\n$ hexo generate -d\n$ hexo deploy\n```\n\n\n*Happy posting!*\n","slug":"How-to-setup-a-blog-on-github-with-Hexo","published":1,"updated":"2018-02-05T16:36:29.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s6e00019ms6a7b574ld","content":"<p>原文：<a href=\"http://zirho.github.io/2016/06/04/hexo/\" target=\"_blank\" rel=\"noopener\">How to setup a blog on github with Hexo</a></p>\n<p>你可以通过复制和粘贴下面的代码来创建一个blog。</p>\n<p>相关链接：</p>\n<ul>\n<li><a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">Hexo docs</a></li>\n<li><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo themes</a></li>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github pages</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><ul>\n<li>Windows: 下载&amp;安装<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac: <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> or <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">installer</a>.</li>\n<li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li>\n</ul>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>推荐使用 nvm (亲测特别特别好用，如有需要可以通过nvm安装不同版本的node，随意切换)</p>\n<p>cURL:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装好nvm之后，重启终端，执行下面的命令安装Node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install 4</span><br></pre></td></tr></table></figure>\n<p>或者，你也可以直接下载安装<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a></p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"在github上新建repo\"><a href=\"#在github上新建repo\" class=\"headerlink\" title=\"在github上新建repo\"></a>在github上新建repo</h3><p>repo的名字必须是 <span style=\"color: #999;\">{github用户名}.github.io</span> ，这同时也是你的blogname（原文没这么说，记得在别的文章看到过，你也可以试试用其它的可不可以）</p>\n<h2 id=\"搭建Hexo-blog\"><a href=\"#搭建Hexo-blog\" class=\"headerlink\" title=\"搭建Hexo blog\"></a>搭建Hexo blog</h2><h3 id=\"创建blog项目\"><a href=\"#创建blog项目\" class=\"headerlink\" title=\"创建blog项目\"></a>创建blog项目</h3><p>首先在你的workspace目录下执行下面的命令，会生成一个以blog名称命名的目录并安装好依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo init &#123;blogname&#125;</span><br><span class=\"line\"><span class=\"meta\">$</span> cd &#123;blogname&#125;</span><br><span class=\"line\"><span class=\"meta\">$</span> npm i</span><br><span class=\"line\"><span class=\"meta\">$</span> git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo主题\"><a href=\"#安装Hexo主题\" class=\"headerlink\" title=\"安装Hexo主题\"></a>安装Hexo主题</h3><p>在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">这里</a>找到你喜欢的主题，以及它的github地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule add &#123;theme-github-url&#125; themes/&#123;theme-name&#125;</span><br></pre></td></tr></table></figure>\n<p>将 _config.yml.example 拷贝至 _config.yml (这一步我没有做，因为下载好的主题目录下已经是这样，不需要修改)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp themes/&#123;theme-name&#125;/_config.yml.example themes/&#123;theme-name&#125;/_config.yml</span><br></pre></td></tr></table></figure>\n<p>更新项目根目录下的 _config.yml，将theme的值替换成你下载的主题名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: &#123;theme-name&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改blog配置\"><a href=\"#修改blog配置\" class=\"headerlink\" title=\"修改blog配置\"></a>修改blog配置</h3><p>修改根目录的 _config.yml （不要将这个跟主题目录下的 _config.yml 搞混），主要修改Site配置和deploy配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: letica&apos;s blog                      #设置header里的title</span><br><span class=\"line\">subtitle: love and peace                  #副标题</span><br><span class=\"line\">description:</span><br><span class=\"line\">author: letica                            #作者名,会显示在左下角</span><br><span class=\"line\">email: letica@126.com                       #邮箱呗</span><br><span class=\"line\">language: zh-CN                               #设置中文</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/letica/letica.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: &quot;Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地预览blog\"><a href=\"#本地预览blog\" class=\"headerlink\" title=\"本地预览blog\"></a>本地预览blog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -S hexo-server</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>执行命令后点击下面的链接即可预览，一般是 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<h3 id=\"部署blog\"><a href=\"#部署blog\" class=\"headerlink\" title=\"部署blog\"></a>部署blog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -S hexo-deployer-git</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>当当当，此时此刻，你应该可以在这个地址看到你的blog了 <a href=\"http://{blogname}.github.io\" target=\"_blank\" rel=\"noopener\">http://{blogname}.github.io</a>.</p>\n<h3 id=\"将源文件上传至github-（可选）\"><a href=\"#将源文件上传至github-（可选）\" class=\"headerlink\" title=\"将源文件上传至github （可选）\"></a>将源文件上传至github （可选）</h3><p>为了维护代码，你可以创建另外的分支并提交。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &#123;your-git-repo-url&#125;</span><br><span class=\"line\">$ git checkout -b source</span><br><span class=\"line\">$ git push origin source</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布新文章\"><a href=\"#发布新文章\" class=\"headerlink\" title=\"发布新文章\"></a>发布新文章</h3><p>创建新的post，编辑，清理，生成静态文件，部署。就是介么简单：）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &apos;&#123;post name&#125;&apos;</span><br><span class=\"line\">$ vi source/_posts/&#123;postname&#125;.md</span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate -d</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p><em>Happy posting!</em></p>\n","site":{"data":{}},"excerpt":"<p>原文：<a href=\"http://zirho.github.io/2016/06/04/hexo/\" target=\"_blank\" rel=\"noopener\">How to setup a blog on github with Hexo</a></p>\n<p>你可以通过复制和粘贴下面的代码来创建一个blog。</p>\n<p>相关链接：</p>\n<ul>\n<li><a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">Hexo docs</a></li>\n<li><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo themes</a></li>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github pages</a></li>\n</ul>","more":"<hr>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><ul>\n<li>Windows: 下载&amp;安装<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac: <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> or <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">installer</a>.</li>\n<li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li>\n</ul>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>推荐使用 nvm (亲测特别特别好用，如有需要可以通过nvm安装不同版本的node，随意切换)</p>\n<p>cURL:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装好nvm之后，重启终端，执行下面的命令安装Node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install 4</span><br></pre></td></tr></table></figure>\n<p>或者，你也可以直接下载安装<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a></p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"在github上新建repo\"><a href=\"#在github上新建repo\" class=\"headerlink\" title=\"在github上新建repo\"></a>在github上新建repo</h3><p>repo的名字必须是 <span style=\"color: #999;\">{github用户名}.github.io</span> ，这同时也是你的blogname（原文没这么说，记得在别的文章看到过，你也可以试试用其它的可不可以）</p>\n<h2 id=\"搭建Hexo-blog\"><a href=\"#搭建Hexo-blog\" class=\"headerlink\" title=\"搭建Hexo blog\"></a>搭建Hexo blog</h2><h3 id=\"创建blog项目\"><a href=\"#创建blog项目\" class=\"headerlink\" title=\"创建blog项目\"></a>创建blog项目</h3><p>首先在你的workspace目录下执行下面的命令，会生成一个以blog名称命名的目录并安装好依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo init &#123;blogname&#125;</span><br><span class=\"line\"><span class=\"meta\">$</span> cd &#123;blogname&#125;</span><br><span class=\"line\"><span class=\"meta\">$</span> npm i</span><br><span class=\"line\"><span class=\"meta\">$</span> git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo主题\"><a href=\"#安装Hexo主题\" class=\"headerlink\" title=\"安装Hexo主题\"></a>安装Hexo主题</h3><p>在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">这里</a>找到你喜欢的主题，以及它的github地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule add &#123;theme-github-url&#125; themes/&#123;theme-name&#125;</span><br></pre></td></tr></table></figure>\n<p>将 _config.yml.example 拷贝至 _config.yml (这一步我没有做，因为下载好的主题目录下已经是这样，不需要修改)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp themes/&#123;theme-name&#125;/_config.yml.example themes/&#123;theme-name&#125;/_config.yml</span><br></pre></td></tr></table></figure>\n<p>更新项目根目录下的 _config.yml，将theme的值替换成你下载的主题名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: &#123;theme-name&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改blog配置\"><a href=\"#修改blog配置\" class=\"headerlink\" title=\"修改blog配置\"></a>修改blog配置</h3><p>修改根目录的 _config.yml （不要将这个跟主题目录下的 _config.yml 搞混），主要修改Site配置和deploy配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: letica&apos;s blog                      #设置header里的title</span><br><span class=\"line\">subtitle: love and peace                  #副标题</span><br><span class=\"line\">description:</span><br><span class=\"line\">author: letica                            #作者名,会显示在左下角</span><br><span class=\"line\">email: letica@126.com                       #邮箱呗</span><br><span class=\"line\">language: zh-CN                               #设置中文</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/letica/letica.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: &quot;Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地预览blog\"><a href=\"#本地预览blog\" class=\"headerlink\" title=\"本地预览blog\"></a>本地预览blog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -S hexo-server</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>执行命令后点击下面的链接即可预览，一般是 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<h3 id=\"部署blog\"><a href=\"#部署blog\" class=\"headerlink\" title=\"部署blog\"></a>部署blog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -S hexo-deployer-git</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>当当当，此时此刻，你应该可以在这个地址看到你的blog了 <a href=\"http://{blogname}.github.io\" target=\"_blank\" rel=\"noopener\">http://{blogname}.github.io</a>.</p>\n<h3 id=\"将源文件上传至github-（可选）\"><a href=\"#将源文件上传至github-（可选）\" class=\"headerlink\" title=\"将源文件上传至github （可选）\"></a>将源文件上传至github （可选）</h3><p>为了维护代码，你可以创建另外的分支并提交。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &#123;your-git-repo-url&#125;</span><br><span class=\"line\">$ git checkout -b source</span><br><span class=\"line\">$ git push origin source</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布新文章\"><a href=\"#发布新文章\" class=\"headerlink\" title=\"发布新文章\"></a>发布新文章</h3><p>创建新的post，编辑，清理，生成静态文件，部署。就是介么简单：）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &apos;&#123;post name&#125;&apos;</span><br><span class=\"line\">$ vi source/_posts/&#123;postname&#125;.md</span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate -d</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p><em>Happy posting!</em></p>"},{"title":"前端规范","date":"2016-08-30T14:00:31.000Z","_content":"\n前端项目的各种规范对于一个本着对项目负责对自己的代码负责的前端er来说，是必不可少的。\n以下整理一些基础的规范，供参考。\n*当别人接手到你的项目，觉得一切都特别清晰的时候，你可以自豪的说这是哥写的~！*\n\n> - [项目目录结构](#dir)\n> - [开发和部署目录结构](#src_asset_dir)\n> - [命名规范](#naming_spec)\n>   - 目录命名规范\n>   - 文件命名规范\n>   - className 命名规范\n\n<!-- more -->\n\n------\n\n## <h3 id=\"dir\">项目目录结构</h3>\n\n包括但不限于以下内容：\n```\n${root}/\n    web/\n        src/\n            ...\n        asset/\n            ...\n        dep/\n        build/\n        test/\n        doc/\n        package.json\n        README.md\n```\n\n* \\${root}/\n${root} 为项目名称。\n\n* web/\nweb 目录为该项目下的前端模块，如果仅包括前端模块，该层可省略。\n\n* src/\n前端开发目录。\n\n* asset/\n前端部署目录。\n\n* dep/\n用于存放依赖的第三方包，不允许做任何改动。\n> 第三方依赖通过 `npm` 安装时，默认安装在 `node_modules` 目录下，无须做改动，部署时配置好部署规则即可。\n\n* build/\n用于存放工具类脚本。\n\n* test/\n用于存放测试用例以及开发阶段的模拟数据。\n\n* doc/\n用于存放项目文档。\n\n* package.json\n项目描述文件。\n> `npm init` 可生成该文件\n> `npm install jquery --save-dev` 安装依赖时可自动生成依赖声明\n\n* README.md\n项目描述文件，概要描述此项目的功能等信息。\n\n\n## <h3 id=\"src_asset_dir\">开发和部署目录结构</h3>\n\n### 开发目录 src/\n\n开发目录按功能划分。\n`src/` 下首先按功能划分目录，包括 `通用子模块common` 和 `业务子模块`。子模块目录下的静态资源js、css、html可不划分目录，如文件过多可考虑继续拆分子模块。\n如果项目为 SPA ，可将页面入口文件直接放在 `web/` 目录下，如果有多个入口文件，可在src/ 目录同级添加 `entry` 目录。\n\n```\nsrc/\n    common/\n        img/\n            sprites.png\n            logo.png\n        conf.js\n        layout.tpl.html\n        layout.less\n    biz1/\n        img/\n            add_button.png\n        add.js\n        add.tpl.html\n        add.less\n    biz2/\n        subbiz1/\n            list.js\n            list.tpl.html\n            list.css\n        subbiz2/\nentry/\n    index.html\n    main.html\n```\n\n\n### 部署目录 asset/\n\n通常构建工具会对 `src/`、 `dep/` 等目录下的资源进行分析、合并与压缩等，生成到asset目录下。\n\n`asset/` 目录下一般有两个目录：\n\n* static/: 静态资源如js、css、img等，按照 src/ 下的结构\n* tpl/: 模板文件，按照 src/ 下的结构\n\n```\n${root}/\n    web/\n        asset/\n            static/\n                ...\n            tpl/\n                ...\n```\n\n## <h3 id=\"naming_spec\">命名规范</h3>\n\n### 目录命名规范\n\n目录按功能命名，一般用一个单词，小写，不宜过长；如需用多个单词，用下划线作为连接符。\n模块内的图片统一放在 `img/` 目录。\n\n\n### 文件命名规范\n\n文件命名以字母开头，且一律小写，以下划线作为多个单词的连接符，且只包含字母、下划线、数字。\n\n> 同一个模块的 js、css、html 可使用相同的命名，fis3 可配置开启同名依赖(useSameNameRequire)。\n\n#### 1. js 文件命名\n\n根据使用框架的不同，js文件可能存在多种用途，因此可按照命名后缀区分其用途，不在此列的按普通文件命名。\n\n- {module_name}_ctrl.js\nmv* 框架中的 controller，未使用 mv* 框架时不做区分。\n\n- {module_name}_service.js\n对于与后端交互的接口操作可抽象为服务层。\n\n\n#### 2. img 文件命名\n\n图片命名建议按以下顺序命名：\n业务模块名称（可选） + （mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）\n\n- 图片功能类别\nmod_：是否公共，可选\nicon：图标\nlogo：LOGO类\nspr：单页面各种元素合并集合\nbtn：按钮\nbg：可平铺或者大背景\n\n- 图片精度\n普清：@1x\nRetina：@2x | @3x\n\n### className 命名规范\n\nClassName的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用中划线 “-” 连接\n\n#### 命名原则\n基于姓氏命名法（继承 + 外来）。\n祖先模块不能出现下划线，除了是全站公用模块，如 mod_ 系列的命名：\n\n**推荐：**\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_info\">\n        <div class=\"modulename_son\"></div>\n        <div class=\"modulename_son\"></div>\n        ...\n    </div>\n</div>\n    \n<!-- 这个是全站公用模块，祖先模块允许直接出现下划线 -->\n<div class=\"mod_info\">\n    <div class=\"mod_info_son\"></div>\n    <div class=\"mod_info_son\"></div>\n    ...     \n</div>\n```\n\n**不推荐：**\n\n```\n<div class=\"modulename_info\">\n    <div class=\"modulename_info_son\"></div>\n    <div class=\"modulename_info_son\"></div>\n    ...     \n</div>\n```\n\n在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_cover\"></div>\n    <div class=\"modulename_info\"></div>\n</div>\n```\n\n当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块\n\n**推荐：**\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_cover\"></div>\n    <div class=\"modulename_info\">\n        <div class=\"modulename_info_user\">\n            <div class=\"modulename_info_user_img\">\n                <!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写-->\n                <div class=\"miui_tit\"></div>\n                <div class=\"miui_txt\"></div>\n                ...\n            </div>\n        </div>\n        <div class=\"modulename_info_list\"></div>\n    </div>\n</div>\n```\n\n**不推荐：**\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_cover\"></div>\n    <div class=\"modulename_info\">\n        <div class=\"modulename_info_user\">\n            <div class=\"modulename_info_user_img\">\n                <div class=\"modulename_info_user_img_tit\"></div>\n                <div class=\"modulename_info_user_img_txt\"></div>\n                ...\n            </div>\n        </div>\n        <div class=\"modulename_info_list\"></div>\n    </div>\n</div>\n```\n\n#### 模块命名\n\n全站公共模块：以 mod_ 开头\n\n```<div class=\"mod_yours\"></div>```\n\n业务公共模块：以 业务名_mod_ 开头\n\n```<div class=\"wx_mod_yours\"></div>```\n\n#### 常用命名推荐\n\n注意：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此\n\n```<div class=\"ad\"></div>```\n\n这种广告的英文或拼音类名不应该出现。\n另外，敏感不和谐字眼也不应该出现，如 fuck、ass 等。\n\n| ClassName | 含义 |\n| ---- | ---- |\n| about | 关于 |\n| account | 账户 |\n| arrow | 箭头图标 |\n| article | 文章 |\n| aside | 边栏 |\n| audio | 音频 |\n| avatar | 头像 |\n| bg,background | 背景 |\n| bar | 栏（工具类） |\n| branding | 品牌化 |\n| crumb,breadcrumbs | 面包屑 |\n| btn,button | 按钮 |\n| caption | 标题，说明 |\n| category | 分类 |\n| chart | 图表 |\n| clearfix | 清除浮动 |\n| close | 关闭 |\n| col,column | 列 |\n| comment | 评论 |\n| community | 社区 |\n| container | 容器 |\n| content | 内容 |\n| copyright | 版权 |\n| current | 当前态，选中态 |\n| default | 默认 |\n| description | 描述 |\n| details | 细节 |\n| disabled | 不可用 |\n| entry | 文章，博文 |\n| error | 错误 |\n| even | 偶数，常用于多行列表或表格中 |\n| fail | 失败（提示） |\n| feature | 专题 |\n| fewer | 收起 |\n| field | 用于表单的输入区域 |\n| figure | 图 |\n| filter | 筛选 |\n| first | 第一个，常用于列表中 |\n| footer | 页脚 |\n| forum | 论坛 |\n| gallery | 画廊 |\n| group | 模块，清除浮动 |\n| header | 页头 |\n| help | 帮助 |\n| hide | 隐藏 |\n| hightlight | 高亮 |\n| home | 主页 |\n| icon | 图标 |\n| info,information | 信息 |\n| last | 最后一个，常用于列表中 |\n| links | 链接 |\n| login | 登录 |\n| logout | 退出 |\n| logo | 标志 |\n| main | 主体 |\n| menu | 菜单 |\n| meta | 作者、更新时间等信息栏，一般位于标题之下 |\n| module | 模块 |\n| more | 更多（展开） |\n| msg,message | 消息 |\n| nav,navigation | 导航 |\n| next | 下一页 |\n| nub | 小块 |\n| odd | 奇数，常用于多行列表或表格中 |\n| off | 鼠标离开 |\n| on | 鼠标移过 |\n| output | 输出 |\n| pagination | 分页 |\n| pop,popup | 弹窗 |\n| preview | 预览 |\n| previous | 上一页 |\n| primary | 主要 |\n| progress | 进度条 |\n| promotion | 促销 |\n| rcommd,recommendations | 推荐 |\n| reg,register | 注册 |\n| save | 保存 |\n| search | 搜索 |\n| secondary | 次要 |\n| section | 区块 |\n| selected | 已选 |\n| share | 分享 |\n| show | 显示 |\n| sidebar | 边栏，侧栏 |\n| slide | 幻灯片，图片切换 |\n| sort | 排序 |\n| sub | 次级的，子级的 |\n| submit | 提交 |\n| subscribe | 订阅 |\n| subtitle | 副标题 |\n| success | 成功（提示） |\n| summary | 摘要 |\n| tab | 标签页 |\n| table | 表格 |\n| txt,text | 文本 |\n| thumbnail | 缩略图 |\n| time | 时间 |\n| tips | 提示 |\n| title | 标题 |\n| video | 视频 |\n| wrap,wrapper | 容器，包，一般用于最外层 |\n\n\n---\n\n部分参考[【凹凸实验室】](https://guide.aotu.io/docs/name/classname.html)\n","source":"_posts/front-end-spec.md","raw":"---\ntitle: 前端规范\ndate: 2016-08-30 22:00:31\ncategories: front-end\ntags: 规范\n---\n\n前端项目的各种规范对于一个本着对项目负责对自己的代码负责的前端er来说，是必不可少的。\n以下整理一些基础的规范，供参考。\n*当别人接手到你的项目，觉得一切都特别清晰的时候，你可以自豪的说这是哥写的~！*\n\n> - [项目目录结构](#dir)\n> - [开发和部署目录结构](#src_asset_dir)\n> - [命名规范](#naming_spec)\n>   - 目录命名规范\n>   - 文件命名规范\n>   - className 命名规范\n\n<!-- more -->\n\n------\n\n## <h3 id=\"dir\">项目目录结构</h3>\n\n包括但不限于以下内容：\n```\n${root}/\n    web/\n        src/\n            ...\n        asset/\n            ...\n        dep/\n        build/\n        test/\n        doc/\n        package.json\n        README.md\n```\n\n* \\${root}/\n${root} 为项目名称。\n\n* web/\nweb 目录为该项目下的前端模块，如果仅包括前端模块，该层可省略。\n\n* src/\n前端开发目录。\n\n* asset/\n前端部署目录。\n\n* dep/\n用于存放依赖的第三方包，不允许做任何改动。\n> 第三方依赖通过 `npm` 安装时，默认安装在 `node_modules` 目录下，无须做改动，部署时配置好部署规则即可。\n\n* build/\n用于存放工具类脚本。\n\n* test/\n用于存放测试用例以及开发阶段的模拟数据。\n\n* doc/\n用于存放项目文档。\n\n* package.json\n项目描述文件。\n> `npm init` 可生成该文件\n> `npm install jquery --save-dev` 安装依赖时可自动生成依赖声明\n\n* README.md\n项目描述文件，概要描述此项目的功能等信息。\n\n\n## <h3 id=\"src_asset_dir\">开发和部署目录结构</h3>\n\n### 开发目录 src/\n\n开发目录按功能划分。\n`src/` 下首先按功能划分目录，包括 `通用子模块common` 和 `业务子模块`。子模块目录下的静态资源js、css、html可不划分目录，如文件过多可考虑继续拆分子模块。\n如果项目为 SPA ，可将页面入口文件直接放在 `web/` 目录下，如果有多个入口文件，可在src/ 目录同级添加 `entry` 目录。\n\n```\nsrc/\n    common/\n        img/\n            sprites.png\n            logo.png\n        conf.js\n        layout.tpl.html\n        layout.less\n    biz1/\n        img/\n            add_button.png\n        add.js\n        add.tpl.html\n        add.less\n    biz2/\n        subbiz1/\n            list.js\n            list.tpl.html\n            list.css\n        subbiz2/\nentry/\n    index.html\n    main.html\n```\n\n\n### 部署目录 asset/\n\n通常构建工具会对 `src/`、 `dep/` 等目录下的资源进行分析、合并与压缩等，生成到asset目录下。\n\n`asset/` 目录下一般有两个目录：\n\n* static/: 静态资源如js、css、img等，按照 src/ 下的结构\n* tpl/: 模板文件，按照 src/ 下的结构\n\n```\n${root}/\n    web/\n        asset/\n            static/\n                ...\n            tpl/\n                ...\n```\n\n## <h3 id=\"naming_spec\">命名规范</h3>\n\n### 目录命名规范\n\n目录按功能命名，一般用一个单词，小写，不宜过长；如需用多个单词，用下划线作为连接符。\n模块内的图片统一放在 `img/` 目录。\n\n\n### 文件命名规范\n\n文件命名以字母开头，且一律小写，以下划线作为多个单词的连接符，且只包含字母、下划线、数字。\n\n> 同一个模块的 js、css、html 可使用相同的命名，fis3 可配置开启同名依赖(useSameNameRequire)。\n\n#### 1. js 文件命名\n\n根据使用框架的不同，js文件可能存在多种用途，因此可按照命名后缀区分其用途，不在此列的按普通文件命名。\n\n- {module_name}_ctrl.js\nmv* 框架中的 controller，未使用 mv* 框架时不做区分。\n\n- {module_name}_service.js\n对于与后端交互的接口操作可抽象为服务层。\n\n\n#### 2. img 文件命名\n\n图片命名建议按以下顺序命名：\n业务模块名称（可选） + （mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）\n\n- 图片功能类别\nmod_：是否公共，可选\nicon：图标\nlogo：LOGO类\nspr：单页面各种元素合并集合\nbtn：按钮\nbg：可平铺或者大背景\n\n- 图片精度\n普清：@1x\nRetina：@2x | @3x\n\n### className 命名规范\n\nClassName的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用中划线 “-” 连接\n\n#### 命名原则\n基于姓氏命名法（继承 + 外来）。\n祖先模块不能出现下划线，除了是全站公用模块，如 mod_ 系列的命名：\n\n**推荐：**\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_info\">\n        <div class=\"modulename_son\"></div>\n        <div class=\"modulename_son\"></div>\n        ...\n    </div>\n</div>\n    \n<!-- 这个是全站公用模块，祖先模块允许直接出现下划线 -->\n<div class=\"mod_info\">\n    <div class=\"mod_info_son\"></div>\n    <div class=\"mod_info_son\"></div>\n    ...     \n</div>\n```\n\n**不推荐：**\n\n```\n<div class=\"modulename_info\">\n    <div class=\"modulename_info_son\"></div>\n    <div class=\"modulename_info_son\"></div>\n    ...     \n</div>\n```\n\n在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_cover\"></div>\n    <div class=\"modulename_info\"></div>\n</div>\n```\n\n当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块\n\n**推荐：**\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_cover\"></div>\n    <div class=\"modulename_info\">\n        <div class=\"modulename_info_user\">\n            <div class=\"modulename_info_user_img\">\n                <!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写-->\n                <div class=\"miui_tit\"></div>\n                <div class=\"miui_txt\"></div>\n                ...\n            </div>\n        </div>\n        <div class=\"modulename_info_list\"></div>\n    </div>\n</div>\n```\n\n**不推荐：**\n\n```\n<div class=\"modulename\">\n    <div class=\"modulename_cover\"></div>\n    <div class=\"modulename_info\">\n        <div class=\"modulename_info_user\">\n            <div class=\"modulename_info_user_img\">\n                <div class=\"modulename_info_user_img_tit\"></div>\n                <div class=\"modulename_info_user_img_txt\"></div>\n                ...\n            </div>\n        </div>\n        <div class=\"modulename_info_list\"></div>\n    </div>\n</div>\n```\n\n#### 模块命名\n\n全站公共模块：以 mod_ 开头\n\n```<div class=\"mod_yours\"></div>```\n\n业务公共模块：以 业务名_mod_ 开头\n\n```<div class=\"wx_mod_yours\"></div>```\n\n#### 常用命名推荐\n\n注意：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此\n\n```<div class=\"ad\"></div>```\n\n这种广告的英文或拼音类名不应该出现。\n另外，敏感不和谐字眼也不应该出现，如 fuck、ass 等。\n\n| ClassName | 含义 |\n| ---- | ---- |\n| about | 关于 |\n| account | 账户 |\n| arrow | 箭头图标 |\n| article | 文章 |\n| aside | 边栏 |\n| audio | 音频 |\n| avatar | 头像 |\n| bg,background | 背景 |\n| bar | 栏（工具类） |\n| branding | 品牌化 |\n| crumb,breadcrumbs | 面包屑 |\n| btn,button | 按钮 |\n| caption | 标题，说明 |\n| category | 分类 |\n| chart | 图表 |\n| clearfix | 清除浮动 |\n| close | 关闭 |\n| col,column | 列 |\n| comment | 评论 |\n| community | 社区 |\n| container | 容器 |\n| content | 内容 |\n| copyright | 版权 |\n| current | 当前态，选中态 |\n| default | 默认 |\n| description | 描述 |\n| details | 细节 |\n| disabled | 不可用 |\n| entry | 文章，博文 |\n| error | 错误 |\n| even | 偶数，常用于多行列表或表格中 |\n| fail | 失败（提示） |\n| feature | 专题 |\n| fewer | 收起 |\n| field | 用于表单的输入区域 |\n| figure | 图 |\n| filter | 筛选 |\n| first | 第一个，常用于列表中 |\n| footer | 页脚 |\n| forum | 论坛 |\n| gallery | 画廊 |\n| group | 模块，清除浮动 |\n| header | 页头 |\n| help | 帮助 |\n| hide | 隐藏 |\n| hightlight | 高亮 |\n| home | 主页 |\n| icon | 图标 |\n| info,information | 信息 |\n| last | 最后一个，常用于列表中 |\n| links | 链接 |\n| login | 登录 |\n| logout | 退出 |\n| logo | 标志 |\n| main | 主体 |\n| menu | 菜单 |\n| meta | 作者、更新时间等信息栏，一般位于标题之下 |\n| module | 模块 |\n| more | 更多（展开） |\n| msg,message | 消息 |\n| nav,navigation | 导航 |\n| next | 下一页 |\n| nub | 小块 |\n| odd | 奇数，常用于多行列表或表格中 |\n| off | 鼠标离开 |\n| on | 鼠标移过 |\n| output | 输出 |\n| pagination | 分页 |\n| pop,popup | 弹窗 |\n| preview | 预览 |\n| previous | 上一页 |\n| primary | 主要 |\n| progress | 进度条 |\n| promotion | 促销 |\n| rcommd,recommendations | 推荐 |\n| reg,register | 注册 |\n| save | 保存 |\n| search | 搜索 |\n| secondary | 次要 |\n| section | 区块 |\n| selected | 已选 |\n| share | 分享 |\n| show | 显示 |\n| sidebar | 边栏，侧栏 |\n| slide | 幻灯片，图片切换 |\n| sort | 排序 |\n| sub | 次级的，子级的 |\n| submit | 提交 |\n| subscribe | 订阅 |\n| subtitle | 副标题 |\n| success | 成功（提示） |\n| summary | 摘要 |\n| tab | 标签页 |\n| table | 表格 |\n| txt,text | 文本 |\n| thumbnail | 缩略图 |\n| time | 时间 |\n| tips | 提示 |\n| title | 标题 |\n| video | 视频 |\n| wrap,wrapper | 容器，包，一般用于最外层 |\n\n\n---\n\n部分参考[【凹凸实验室】](https://guide.aotu.io/docs/name/classname.html)\n","slug":"front-end-spec","published":1,"updated":"2018-02-05T16:36:29.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s6n00049ms6fjhrdk1i","content":"<p>前端项目的各种规范对于一个本着对项目负责对自己的代码负责的前端er来说，是必不可少的。<br>以下整理一些基础的规范，供参考。<br><em>当别人接手到你的项目，觉得一切都特别清晰的时候，你可以自豪的说这是哥写的~！</em></p>\n<blockquote>\n<ul>\n<li><a href=\"#dir\">项目目录结构</a></li>\n<li><a href=\"#src_asset_dir\">开发和部署目录结构</a></li>\n<li><a href=\"#naming_spec\">命名规范</a><ul>\n<li>目录命名规范</li>\n<li>文件命名规范</li>\n<li>className 命名规范</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a><h3 id=\"dir\">项目目录结构</h3></h2><p>包括但不限于以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;root&#125;/</span><br><span class=\"line\">    web/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        asset/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        dep/</span><br><span class=\"line\">        build/</span><br><span class=\"line\">        test/</span><br><span class=\"line\">        doc/</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        README.md</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>\\${root}/<br>${root} 为项目名称。</p>\n</li>\n<li><p>web/<br>web 目录为该项目下的前端模块，如果仅包括前端模块，该层可省略。</p>\n</li>\n<li><p>src/<br>前端开发目录。</p>\n</li>\n<li><p>asset/<br>前端部署目录。</p>\n</li>\n<li><p>dep/<br>用于存放依赖的第三方包，不允许做任何改动。</p>\n<blockquote>\n<p>第三方依赖通过 <code>npm</code> 安装时，默认安装在 <code>node_modules</code> 目录下，无须做改动，部署时配置好部署规则即可。</p>\n</blockquote>\n</li>\n<li><p>build/<br>用于存放工具类脚本。</p>\n</li>\n<li><p>test/<br>用于存放测试用例以及开发阶段的模拟数据。</p>\n</li>\n<li><p>doc/<br>用于存放项目文档。</p>\n</li>\n<li><p>package.json<br>项目描述文件。</p>\n<blockquote>\n<p><code>npm init</code> 可生成该文件<br><code>npm install jquery --save-dev</code> 安装依赖时可自动生成依赖声明</p>\n</blockquote>\n</li>\n<li><p>README.md<br>项目描述文件，概要描述此项目的功能等信息。</p>\n</li>\n</ul>\n<h2 id=\"开发和部署目录结构\"><a href=\"#开发和部署目录结构\" class=\"headerlink\" title=\"开发和部署目录结构\"></a><h3 id=\"src_asset_dir\">开发和部署目录结构</h3></h2><h3 id=\"开发目录-src\"><a href=\"#开发目录-src\" class=\"headerlink\" title=\"开发目录 src/\"></a>开发目录 src/</h3><p>开发目录按功能划分。<br><code>src/</code> 下首先按功能划分目录，包括 <code>通用子模块common</code> 和 <code>业务子模块</code>。子模块目录下的静态资源js、css、html可不划分目录，如文件过多可考虑继续拆分子模块。<br>如果项目为 SPA ，可将页面入口文件直接放在 <code>web/</code> 目录下，如果有多个入口文件，可在src/ 目录同级添加 <code>entry</code> 目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/</span><br><span class=\"line\">    common/</span><br><span class=\"line\">        img/</span><br><span class=\"line\">            sprites.png</span><br><span class=\"line\">            logo.png</span><br><span class=\"line\">        conf.js</span><br><span class=\"line\">        layout.tpl.html</span><br><span class=\"line\">        layout.less</span><br><span class=\"line\">    biz1/</span><br><span class=\"line\">        img/</span><br><span class=\"line\">            add_button.png</span><br><span class=\"line\">        add.js</span><br><span class=\"line\">        add.tpl.html</span><br><span class=\"line\">        add.less</span><br><span class=\"line\">    biz2/</span><br><span class=\"line\">        subbiz1/</span><br><span class=\"line\">            list.js</span><br><span class=\"line\">            list.tpl.html</span><br><span class=\"line\">            list.css</span><br><span class=\"line\">        subbiz2/</span><br><span class=\"line\">entry/</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">    main.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署目录-asset\"><a href=\"#部署目录-asset\" class=\"headerlink\" title=\"部署目录 asset/\"></a>部署目录 asset/</h3><p>通常构建工具会对 <code>src/</code>、 <code>dep/</code> 等目录下的资源进行分析、合并与压缩等，生成到asset目录下。</p>\n<p><code>asset/</code> 目录下一般有两个目录：</p>\n<ul>\n<li>static/: 静态资源如js、css、img等，按照 src/ 下的结构</li>\n<li>tpl/: 模板文件，按照 src/ 下的结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;root&#125;/</span><br><span class=\"line\">    web/</span><br><span class=\"line\">        asset/</span><br><span class=\"line\">            static/</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            tpl/</span><br><span class=\"line\">                ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a><h3 id=\"naming_spec\">命名规范</h3></h2><h3 id=\"目录命名规范\"><a href=\"#目录命名规范\" class=\"headerlink\" title=\"目录命名规范\"></a>目录命名规范</h3><p>目录按功能命名，一般用一个单词，小写，不宜过长；如需用多个单词，用下划线作为连接符。<br>模块内的图片统一放在 <code>img/</code> 目录。</p>\n<h3 id=\"文件命名规范\"><a href=\"#文件命名规范\" class=\"headerlink\" title=\"文件命名规范\"></a>文件命名规范</h3><p>文件命名以字母开头，且一律小写，以下划线作为多个单词的连接符，且只包含字母、下划线、数字。</p>\n<blockquote>\n<p>同一个模块的 js、css、html 可使用相同的命名，fis3 可配置开启同名依赖(useSameNameRequire)。</p>\n</blockquote>\n<h4 id=\"1-js-文件命名\"><a href=\"#1-js-文件命名\" class=\"headerlink\" title=\"1. js 文件命名\"></a>1. js 文件命名</h4><p>根据使用框架的不同，js文件可能存在多种用途，因此可按照命名后缀区分其用途，不在此列的按普通文件命名。</p>\n<ul>\n<li><p>{module_name}_ctrl.js<br>mv<em> 框架中的 controller，未使用 mv</em> 框架时不做区分。</p>\n</li>\n<li><p>{module_name}_service.js<br>对于与后端交互的接口操作可抽象为服务层。</p>\n</li>\n</ul>\n<h4 id=\"2-img-文件命名\"><a href=\"#2-img-文件命名\" class=\"headerlink\" title=\"2. img 文件命名\"></a>2. img 文件命名</h4><p>图片命名建议按以下顺序命名：<br>业务模块名称（可选） + （mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）</p>\n<ul>\n<li><p>图片功能类别<br>mod_：是否公共，可选<br>icon：图标<br>logo：LOGO类<br>spr：单页面各种元素合并集合<br>btn：按钮<br>bg：可平铺或者大背景</p>\n</li>\n<li><p>图片精度<br>普清：@1x<br>Retina：@2x | @3x</p>\n</li>\n</ul>\n<h3 id=\"className-命名规范\"><a href=\"#className-命名规范\" class=\"headerlink\" title=\"className 命名规范\"></a>className 命名规范</h3><p>ClassName的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用中划线 “-” 连接</p>\n<h4 id=\"命名原则\"><a href=\"#命名原则\" class=\"headerlink\" title=\"命名原则\"></a>命名原则</h4><p>基于姓氏命名法（继承 + 外来）。<br>祖先模块不能出现下划线，除了是全站公用模块，如 mod_ 系列的命名：</p>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!-- 这个是全站公用模块，祖先模块允许直接出现下划线 --&gt;</span><br><span class=\"line\">&lt;div class=&quot;mod_info&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    ...     </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    ...     </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块</p>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_user&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;modulename_info_user_img&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写--&gt;</span><br><span class=\"line\">                &lt;div class=&quot;miui_tit&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;miui_txt&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_user&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;modulename_info_user_img&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;modulename_info_user_img_tit&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;modulename_info_user_img_txt&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模块命名\"><a href=\"#模块命名\" class=\"headerlink\" title=\"模块命名\"></a>模块命名</h4><p>全站公共模块：以 mod_ 开头</p>\n<figure class=\"highlight plain\"><figcaption><span>class</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">业务公共模块：以 业务名_mod_ 开头</span><br><span class=\"line\"></span><br><span class=\"line\">```&lt;div class=&quot;wx_mod_yours&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用命名推荐\"><a href=\"#常用命名推荐\" class=\"headerlink\" title=\"常用命名推荐\"></a>常用命名推荐</h4><p>注意：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>\n<p><code>&lt;div class=&quot;ad&quot;&gt;&lt;/div&gt;</code></p>\n<p>这种广告的英文或拼音类名不应该出现。<br>另外，敏感不和谐字眼也不应该出现，如 fuck、ass 等。</p>\n<table>\n<thead>\n<tr>\n<th>ClassName</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>about</td>\n<td>关于</td>\n</tr>\n<tr>\n<td>account</td>\n<td>账户</td>\n</tr>\n<tr>\n<td>arrow</td>\n<td>箭头图标</td>\n</tr>\n<tr>\n<td>article</td>\n<td>文章</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>边栏</td>\n</tr>\n<tr>\n<td>audio</td>\n<td>音频</td>\n</tr>\n<tr>\n<td>avatar</td>\n<td>头像</td>\n</tr>\n<tr>\n<td>bg,background</td>\n<td>背景</td>\n</tr>\n<tr>\n<td>bar</td>\n<td>栏（工具类）</td>\n</tr>\n<tr>\n<td>branding</td>\n<td>品牌化</td>\n</tr>\n<tr>\n<td>crumb,breadcrumbs</td>\n<td>面包屑</td>\n</tr>\n<tr>\n<td>btn,button</td>\n<td>按钮</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>标题，说明</td>\n</tr>\n<tr>\n<td>category</td>\n<td>分类</td>\n</tr>\n<tr>\n<td>chart</td>\n<td>图表</td>\n</tr>\n<tr>\n<td>clearfix</td>\n<td>清除浮动</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>col,column</td>\n<td>列</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>评论</td>\n</tr>\n<tr>\n<td>community</td>\n<td>社区</td>\n</tr>\n<tr>\n<td>container</td>\n<td>容器</td>\n</tr>\n<tr>\n<td>content</td>\n<td>内容</td>\n</tr>\n<tr>\n<td>copyright</td>\n<td>版权</td>\n</tr>\n<tr>\n<td>current</td>\n<td>当前态，选中态</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>description</td>\n<td>描述</td>\n</tr>\n<tr>\n<td>details</td>\n<td>细节</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>不可用</td>\n</tr>\n<tr>\n<td>entry</td>\n<td>文章，博文</td>\n</tr>\n<tr>\n<td>error</td>\n<td>错误</td>\n</tr>\n<tr>\n<td>even</td>\n<td>偶数，常用于多行列表或表格中</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>失败（提示）</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>专题</td>\n</tr>\n<tr>\n<td>fewer</td>\n<td>收起</td>\n</tr>\n<tr>\n<td>field</td>\n<td>用于表单的输入区域</td>\n</tr>\n<tr>\n<td>figure</td>\n<td>图</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>筛选</td>\n</tr>\n<tr>\n<td>first</td>\n<td>第一个，常用于列表中</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>页脚</td>\n</tr>\n<tr>\n<td>forum</td>\n<td>论坛</td>\n</tr>\n<tr>\n<td>gallery</td>\n<td>画廊</td>\n</tr>\n<tr>\n<td>group</td>\n<td>模块，清除浮动</td>\n</tr>\n<tr>\n<td>header</td>\n<td>页头</td>\n</tr>\n<tr>\n<td>help</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>hide</td>\n<td>隐藏</td>\n</tr>\n<tr>\n<td>hightlight</td>\n<td>高亮</td>\n</tr>\n<tr>\n<td>home</td>\n<td>主页</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>图标</td>\n</tr>\n<tr>\n<td>info,information</td>\n<td>信息</td>\n</tr>\n<tr>\n<td>last</td>\n<td>最后一个，常用于列表中</td>\n</tr>\n<tr>\n<td>links</td>\n<td>链接</td>\n</tr>\n<tr>\n<td>login</td>\n<td>登录</td>\n</tr>\n<tr>\n<td>logout</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>logo</td>\n<td>标志</td>\n</tr>\n<tr>\n<td>main</td>\n<td>主体</td>\n</tr>\n<tr>\n<td>menu</td>\n<td>菜单</td>\n</tr>\n<tr>\n<td>meta</td>\n<td>作者、更新时间等信息栏，一般位于标题之下</td>\n</tr>\n<tr>\n<td>module</td>\n<td>模块</td>\n</tr>\n<tr>\n<td>more</td>\n<td>更多（展开）</td>\n</tr>\n<tr>\n<td>msg,message</td>\n<td>消息</td>\n</tr>\n<tr>\n<td>nav,navigation</td>\n<td>导航</td>\n</tr>\n<tr>\n<td>next</td>\n<td>下一页</td>\n</tr>\n<tr>\n<td>nub</td>\n<td>小块</td>\n</tr>\n<tr>\n<td>odd</td>\n<td>奇数，常用于多行列表或表格中</td>\n</tr>\n<tr>\n<td>off</td>\n<td>鼠标离开</td>\n</tr>\n<tr>\n<td>on</td>\n<td>鼠标移过</td>\n</tr>\n<tr>\n<td>output</td>\n<td>输出</td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>分页</td>\n</tr>\n<tr>\n<td>pop,popup</td>\n<td>弹窗</td>\n</tr>\n<tr>\n<td>preview</td>\n<td>预览</td>\n</tr>\n<tr>\n<td>previous</td>\n<td>上一页</td>\n</tr>\n<tr>\n<td>primary</td>\n<td>主要</td>\n</tr>\n<tr>\n<td>progress</td>\n<td>进度条</td>\n</tr>\n<tr>\n<td>promotion</td>\n<td>促销</td>\n</tr>\n<tr>\n<td>rcommd,recommendations</td>\n<td>推荐</td>\n</tr>\n<tr>\n<td>reg,register</td>\n<td>注册</td>\n</tr>\n<tr>\n<td>save</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>search</td>\n<td>搜索</td>\n</tr>\n<tr>\n<td>secondary</td>\n<td>次要</td>\n</tr>\n<tr>\n<td>section</td>\n<td>区块</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>已选</td>\n</tr>\n<tr>\n<td>share</td>\n<td>分享</td>\n</tr>\n<tr>\n<td>show</td>\n<td>显示</td>\n</tr>\n<tr>\n<td>sidebar</td>\n<td>边栏，侧栏</td>\n</tr>\n<tr>\n<td>slide</td>\n<td>幻灯片，图片切换</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>排序</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>次级的，子级的</td>\n</tr>\n<tr>\n<td>submit</td>\n<td>提交</td>\n</tr>\n<tr>\n<td>subscribe</td>\n<td>订阅</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>副标题</td>\n</tr>\n<tr>\n<td>success</td>\n<td>成功（提示）</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>摘要</td>\n</tr>\n<tr>\n<td>tab</td>\n<td>标签页</td>\n</tr>\n<tr>\n<td>table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>txt,text</td>\n<td>文本</td>\n</tr>\n<tr>\n<td>thumbnail</td>\n<td>缩略图</td>\n</tr>\n<tr>\n<td>time</td>\n<td>时间</td>\n</tr>\n<tr>\n<td>tips</td>\n<td>提示</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>video</td>\n<td>视频</td>\n</tr>\n<tr>\n<td>wrap,wrapper</td>\n<td>容器，包，一般用于最外层</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>部分参考<a href=\"https://guide.aotu.io/docs/name/classname.html\" target=\"_blank\" rel=\"noopener\">【凹凸实验室】</a></p>\n","site":{"data":{}},"excerpt":"<p>前端项目的各种规范对于一个本着对项目负责对自己的代码负责的前端er来说，是必不可少的。<br>以下整理一些基础的规范，供参考。<br><em>当别人接手到你的项目，觉得一切都特别清晰的时候，你可以自豪的说这是哥写的~！</em></p>\n<blockquote>\n<ul>\n<li><a href=\"#dir\">项目目录结构</a></li>\n<li><a href=\"#src_asset_dir\">开发和部署目录结构</a></li>\n<li><a href=\"#naming_spec\">命名规范</a><ul>\n<li>目录命名规范</li>\n<li>文件命名规范</li>\n<li>className 命名规范</li>\n</ul>\n</li>\n</ul>\n</blockquote>","more":"<hr>\n<h2 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a><h3 id=\"dir\">项目目录结构</h3></h2><p>包括但不限于以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;root&#125;/</span><br><span class=\"line\">    web/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        asset/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        dep/</span><br><span class=\"line\">        build/</span><br><span class=\"line\">        test/</span><br><span class=\"line\">        doc/</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        README.md</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>\\${root}/<br>${root} 为项目名称。</p>\n</li>\n<li><p>web/<br>web 目录为该项目下的前端模块，如果仅包括前端模块，该层可省略。</p>\n</li>\n<li><p>src/<br>前端开发目录。</p>\n</li>\n<li><p>asset/<br>前端部署目录。</p>\n</li>\n<li><p>dep/<br>用于存放依赖的第三方包，不允许做任何改动。</p>\n<blockquote>\n<p>第三方依赖通过 <code>npm</code> 安装时，默认安装在 <code>node_modules</code> 目录下，无须做改动，部署时配置好部署规则即可。</p>\n</blockquote>\n</li>\n<li><p>build/<br>用于存放工具类脚本。</p>\n</li>\n<li><p>test/<br>用于存放测试用例以及开发阶段的模拟数据。</p>\n</li>\n<li><p>doc/<br>用于存放项目文档。</p>\n</li>\n<li><p>package.json<br>项目描述文件。</p>\n<blockquote>\n<p><code>npm init</code> 可生成该文件<br><code>npm install jquery --save-dev</code> 安装依赖时可自动生成依赖声明</p>\n</blockquote>\n</li>\n<li><p>README.md<br>项目描述文件，概要描述此项目的功能等信息。</p>\n</li>\n</ul>\n<h2 id=\"开发和部署目录结构\"><a href=\"#开发和部署目录结构\" class=\"headerlink\" title=\"开发和部署目录结构\"></a><h3 id=\"src_asset_dir\">开发和部署目录结构</h3></h2><h3 id=\"开发目录-src\"><a href=\"#开发目录-src\" class=\"headerlink\" title=\"开发目录 src/\"></a>开发目录 src/</h3><p>开发目录按功能划分。<br><code>src/</code> 下首先按功能划分目录，包括 <code>通用子模块common</code> 和 <code>业务子模块</code>。子模块目录下的静态资源js、css、html可不划分目录，如文件过多可考虑继续拆分子模块。<br>如果项目为 SPA ，可将页面入口文件直接放在 <code>web/</code> 目录下，如果有多个入口文件，可在src/ 目录同级添加 <code>entry</code> 目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/</span><br><span class=\"line\">    common/</span><br><span class=\"line\">        img/</span><br><span class=\"line\">            sprites.png</span><br><span class=\"line\">            logo.png</span><br><span class=\"line\">        conf.js</span><br><span class=\"line\">        layout.tpl.html</span><br><span class=\"line\">        layout.less</span><br><span class=\"line\">    biz1/</span><br><span class=\"line\">        img/</span><br><span class=\"line\">            add_button.png</span><br><span class=\"line\">        add.js</span><br><span class=\"line\">        add.tpl.html</span><br><span class=\"line\">        add.less</span><br><span class=\"line\">    biz2/</span><br><span class=\"line\">        subbiz1/</span><br><span class=\"line\">            list.js</span><br><span class=\"line\">            list.tpl.html</span><br><span class=\"line\">            list.css</span><br><span class=\"line\">        subbiz2/</span><br><span class=\"line\">entry/</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">    main.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署目录-asset\"><a href=\"#部署目录-asset\" class=\"headerlink\" title=\"部署目录 asset/\"></a>部署目录 asset/</h3><p>通常构建工具会对 <code>src/</code>、 <code>dep/</code> 等目录下的资源进行分析、合并与压缩等，生成到asset目录下。</p>\n<p><code>asset/</code> 目录下一般有两个目录：</p>\n<ul>\n<li>static/: 静态资源如js、css、img等，按照 src/ 下的结构</li>\n<li>tpl/: 模板文件，按照 src/ 下的结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;root&#125;/</span><br><span class=\"line\">    web/</span><br><span class=\"line\">        asset/</span><br><span class=\"line\">            static/</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            tpl/</span><br><span class=\"line\">                ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a><h3 id=\"naming_spec\">命名规范</h3></h2><h3 id=\"目录命名规范\"><a href=\"#目录命名规范\" class=\"headerlink\" title=\"目录命名规范\"></a>目录命名规范</h3><p>目录按功能命名，一般用一个单词，小写，不宜过长；如需用多个单词，用下划线作为连接符。<br>模块内的图片统一放在 <code>img/</code> 目录。</p>\n<h3 id=\"文件命名规范\"><a href=\"#文件命名规范\" class=\"headerlink\" title=\"文件命名规范\"></a>文件命名规范</h3><p>文件命名以字母开头，且一律小写，以下划线作为多个单词的连接符，且只包含字母、下划线、数字。</p>\n<blockquote>\n<p>同一个模块的 js、css、html 可使用相同的命名，fis3 可配置开启同名依赖(useSameNameRequire)。</p>\n</blockquote>\n<h4 id=\"1-js-文件命名\"><a href=\"#1-js-文件命名\" class=\"headerlink\" title=\"1. js 文件命名\"></a>1. js 文件命名</h4><p>根据使用框架的不同，js文件可能存在多种用途，因此可按照命名后缀区分其用途，不在此列的按普通文件命名。</p>\n<ul>\n<li><p>{module_name}_ctrl.js<br>mv<em> 框架中的 controller，未使用 mv</em> 框架时不做区分。</p>\n</li>\n<li><p>{module_name}_service.js<br>对于与后端交互的接口操作可抽象为服务层。</p>\n</li>\n</ul>\n<h4 id=\"2-img-文件命名\"><a href=\"#2-img-文件命名\" class=\"headerlink\" title=\"2. img 文件命名\"></a>2. img 文件命名</h4><p>图片命名建议按以下顺序命名：<br>业务模块名称（可选） + （mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）</p>\n<ul>\n<li><p>图片功能类别<br>mod_：是否公共，可选<br>icon：图标<br>logo：LOGO类<br>spr：单页面各种元素合并集合<br>btn：按钮<br>bg：可平铺或者大背景</p>\n</li>\n<li><p>图片精度<br>普清：@1x<br>Retina：@2x | @3x</p>\n</li>\n</ul>\n<h3 id=\"className-命名规范\"><a href=\"#className-命名规范\" class=\"headerlink\" title=\"className 命名规范\"></a>className 命名规范</h3><p>ClassName的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用中划线 “-” 连接</p>\n<h4 id=\"命名原则\"><a href=\"#命名原则\" class=\"headerlink\" title=\"命名原则\"></a>命名原则</h4><p>基于姓氏命名法（继承 + 外来）。<br>祖先模块不能出现下划线，除了是全站公用模块，如 mod_ 系列的命名：</p>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!-- 这个是全站公用模块，祖先模块允许直接出现下划线 --&gt;</span><br><span class=\"line\">&lt;div class=&quot;mod_info&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    ...     </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    ...     </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块</p>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_user&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;modulename_info_user_img&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写--&gt;</span><br><span class=\"line\">                &lt;div class=&quot;miui_tit&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;miui_txt&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_user&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;modulename_info_user_img&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;modulename_info_user_img_tit&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;modulename_info_user_img_txt&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模块命名\"><a href=\"#模块命名\" class=\"headerlink\" title=\"模块命名\"></a>模块命名</h4><p>全站公共模块：以 mod_ 开头</p>\n<figure class=\"highlight plain\"><figcaption><span>class</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">业务公共模块：以 业务名_mod_ 开头</span><br><span class=\"line\"></span><br><span class=\"line\">```&lt;div class=&quot;wx_mod_yours&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用命名推荐\"><a href=\"#常用命名推荐\" class=\"headerlink\" title=\"常用命名推荐\"></a>常用命名推荐</h4><p>注意：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>\n<p><code>&lt;div class=&quot;ad&quot;&gt;&lt;/div&gt;</code></p>\n<p>这种广告的英文或拼音类名不应该出现。<br>另外，敏感不和谐字眼也不应该出现，如 fuck、ass 等。</p>\n<table>\n<thead>\n<tr>\n<th>ClassName</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>about</td>\n<td>关于</td>\n</tr>\n<tr>\n<td>account</td>\n<td>账户</td>\n</tr>\n<tr>\n<td>arrow</td>\n<td>箭头图标</td>\n</tr>\n<tr>\n<td>article</td>\n<td>文章</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>边栏</td>\n</tr>\n<tr>\n<td>audio</td>\n<td>音频</td>\n</tr>\n<tr>\n<td>avatar</td>\n<td>头像</td>\n</tr>\n<tr>\n<td>bg,background</td>\n<td>背景</td>\n</tr>\n<tr>\n<td>bar</td>\n<td>栏（工具类）</td>\n</tr>\n<tr>\n<td>branding</td>\n<td>品牌化</td>\n</tr>\n<tr>\n<td>crumb,breadcrumbs</td>\n<td>面包屑</td>\n</tr>\n<tr>\n<td>btn,button</td>\n<td>按钮</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>标题，说明</td>\n</tr>\n<tr>\n<td>category</td>\n<td>分类</td>\n</tr>\n<tr>\n<td>chart</td>\n<td>图表</td>\n</tr>\n<tr>\n<td>clearfix</td>\n<td>清除浮动</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>col,column</td>\n<td>列</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>评论</td>\n</tr>\n<tr>\n<td>community</td>\n<td>社区</td>\n</tr>\n<tr>\n<td>container</td>\n<td>容器</td>\n</tr>\n<tr>\n<td>content</td>\n<td>内容</td>\n</tr>\n<tr>\n<td>copyright</td>\n<td>版权</td>\n</tr>\n<tr>\n<td>current</td>\n<td>当前态，选中态</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>description</td>\n<td>描述</td>\n</tr>\n<tr>\n<td>details</td>\n<td>细节</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>不可用</td>\n</tr>\n<tr>\n<td>entry</td>\n<td>文章，博文</td>\n</tr>\n<tr>\n<td>error</td>\n<td>错误</td>\n</tr>\n<tr>\n<td>even</td>\n<td>偶数，常用于多行列表或表格中</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>失败（提示）</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>专题</td>\n</tr>\n<tr>\n<td>fewer</td>\n<td>收起</td>\n</tr>\n<tr>\n<td>field</td>\n<td>用于表单的输入区域</td>\n</tr>\n<tr>\n<td>figure</td>\n<td>图</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>筛选</td>\n</tr>\n<tr>\n<td>first</td>\n<td>第一个，常用于列表中</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>页脚</td>\n</tr>\n<tr>\n<td>forum</td>\n<td>论坛</td>\n</tr>\n<tr>\n<td>gallery</td>\n<td>画廊</td>\n</tr>\n<tr>\n<td>group</td>\n<td>模块，清除浮动</td>\n</tr>\n<tr>\n<td>header</td>\n<td>页头</td>\n</tr>\n<tr>\n<td>help</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>hide</td>\n<td>隐藏</td>\n</tr>\n<tr>\n<td>hightlight</td>\n<td>高亮</td>\n</tr>\n<tr>\n<td>home</td>\n<td>主页</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>图标</td>\n</tr>\n<tr>\n<td>info,information</td>\n<td>信息</td>\n</tr>\n<tr>\n<td>last</td>\n<td>最后一个，常用于列表中</td>\n</tr>\n<tr>\n<td>links</td>\n<td>链接</td>\n</tr>\n<tr>\n<td>login</td>\n<td>登录</td>\n</tr>\n<tr>\n<td>logout</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>logo</td>\n<td>标志</td>\n</tr>\n<tr>\n<td>main</td>\n<td>主体</td>\n</tr>\n<tr>\n<td>menu</td>\n<td>菜单</td>\n</tr>\n<tr>\n<td>meta</td>\n<td>作者、更新时间等信息栏，一般位于标题之下</td>\n</tr>\n<tr>\n<td>module</td>\n<td>模块</td>\n</tr>\n<tr>\n<td>more</td>\n<td>更多（展开）</td>\n</tr>\n<tr>\n<td>msg,message</td>\n<td>消息</td>\n</tr>\n<tr>\n<td>nav,navigation</td>\n<td>导航</td>\n</tr>\n<tr>\n<td>next</td>\n<td>下一页</td>\n</tr>\n<tr>\n<td>nub</td>\n<td>小块</td>\n</tr>\n<tr>\n<td>odd</td>\n<td>奇数，常用于多行列表或表格中</td>\n</tr>\n<tr>\n<td>off</td>\n<td>鼠标离开</td>\n</tr>\n<tr>\n<td>on</td>\n<td>鼠标移过</td>\n</tr>\n<tr>\n<td>output</td>\n<td>输出</td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>分页</td>\n</tr>\n<tr>\n<td>pop,popup</td>\n<td>弹窗</td>\n</tr>\n<tr>\n<td>preview</td>\n<td>预览</td>\n</tr>\n<tr>\n<td>previous</td>\n<td>上一页</td>\n</tr>\n<tr>\n<td>primary</td>\n<td>主要</td>\n</tr>\n<tr>\n<td>progress</td>\n<td>进度条</td>\n</tr>\n<tr>\n<td>promotion</td>\n<td>促销</td>\n</tr>\n<tr>\n<td>rcommd,recommendations</td>\n<td>推荐</td>\n</tr>\n<tr>\n<td>reg,register</td>\n<td>注册</td>\n</tr>\n<tr>\n<td>save</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>search</td>\n<td>搜索</td>\n</tr>\n<tr>\n<td>secondary</td>\n<td>次要</td>\n</tr>\n<tr>\n<td>section</td>\n<td>区块</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>已选</td>\n</tr>\n<tr>\n<td>share</td>\n<td>分享</td>\n</tr>\n<tr>\n<td>show</td>\n<td>显示</td>\n</tr>\n<tr>\n<td>sidebar</td>\n<td>边栏，侧栏</td>\n</tr>\n<tr>\n<td>slide</td>\n<td>幻灯片，图片切换</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>排序</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>次级的，子级的</td>\n</tr>\n<tr>\n<td>submit</td>\n<td>提交</td>\n</tr>\n<tr>\n<td>subscribe</td>\n<td>订阅</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>副标题</td>\n</tr>\n<tr>\n<td>success</td>\n<td>成功（提示）</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>摘要</td>\n</tr>\n<tr>\n<td>tab</td>\n<td>标签页</td>\n</tr>\n<tr>\n<td>table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>txt,text</td>\n<td>文本</td>\n</tr>\n<tr>\n<td>thumbnail</td>\n<td>缩略图</td>\n</tr>\n<tr>\n<td>time</td>\n<td>时间</td>\n</tr>\n<tr>\n<td>tips</td>\n<td>提示</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>video</td>\n<td>视频</td>\n</tr>\n<tr>\n<td>wrap,wrapper</td>\n<td>容器，包，一般用于最外层</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>部分参考<a href=\"https://guide.aotu.io/docs/name/classname.html\" target=\"_blank\" rel=\"noopener\">【凹凸实验室】</a></p>"},{"title":"诞生于狗善党的春天","date":"2017-08-16T02:50:58.000Z","_content":"\n# 阿一古 金社长~！！\n\n### 看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\n### 因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\n<!--more-->\n   \n   ![cmd-markdown-logo](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1502979972172&di=9f27f10470bd58853d7abe36c09c80ca&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif)\n   \n### 你开心啦！幸福的像花儿一样！\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif)\n \n### 德善呐~你可长点心吧！\n\n\n ![cmd-markdown-logo](http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif)\n \n\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif)\n \n### 哈哈哈 ~~~~\n\n\n ![cmd-markdown-logo]( http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif)\n \n###  公交车上狗焕表现不错！\n\n\n ![cmd-markdown-logo](http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg)\n\n  \n### 每天早上醒来 阳光和你都在\n\n \n ![cmd-markdown-logo]( http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif)\n\n \n### happy ending ！！老夫的少女心呐！！\n\n\n\n##### and 今天**(2017.8.16)**也是本blog诞生的日子 科科~\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 诞生于狗善党的春天\ndate: 2017-08-16 10:50:58\ntag: 随笔\ncategory: 杂记\n---\n\n# 阿一古 金社长~！！\n\n### 看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\n### 因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\n<!--more-->\n   \n   ![cmd-markdown-logo](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1502979972172&di=9f27f10470bd58853d7abe36c09c80ca&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif)\n   \n### 你开心啦！幸福的像花儿一样！\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif)\n \n### 德善呐~你可长点心吧！\n\n\n ![cmd-markdown-logo](http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif)\n \n\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif)\n \n### 哈哈哈 ~~~~\n\n\n ![cmd-markdown-logo]( http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif)\n \n###  公交车上狗焕表现不错！\n\n\n ![cmd-markdown-logo](http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg)\n\n  \n### 每天早上醒来 阳光和你都在\n\n \n ![cmd-markdown-logo]( http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif)\n\n \n### happy ending ！！老夫的少女心呐！！\n\n\n\n##### and 今天**(2017.8.16)**也是本blog诞生的日子 科科~\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n","slug":"hello-world","published":1,"updated":"2018-02-05T17:28:17.597Z","_id":"cjdag5s6q00059ms6oekieuzr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"阿一古-金社长-！！\"><a href=\"#阿一古-金社长-！！\" class=\"headerlink\" title=\"阿一古 金社长~！！\"></a>阿一古 金社长~！！</h1><h3 id=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"><a href=\"#看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\" class=\"headerlink\" title=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"></a>看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！</h3><h3 id=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\"><a href=\"#因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\" class=\"headerlink\" title=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\"></a>因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~</h3><a id=\"more\"></a>\n<p>   <img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502979972172&amp;di=9f27f10470bd58853d7abe36c09c80ca&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"你开心啦！幸福的像花儿一样！\"><a href=\"#你开心啦！幸福的像花儿一样！\" class=\"headerlink\" title=\"你开心啦！幸福的像花儿一样！\"></a>你开心啦！幸福的像花儿一样！</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"德善呐-你可长点心吧！\"><a href=\"#德善呐-你可长点心吧！\" class=\"headerlink\" title=\"德善呐~你可长点心吧！\"></a>德善呐~你可长点心吧！</h3><p> <img src=\"http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif\" alt=\"cmd-markdown-logo\"></p>\n<p> <img src=\"http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈 ~~~~\"></a>哈哈哈 ~~~~</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"公交车上狗焕表现不错！\"><a href=\"#公交车上狗焕表现不错！\" class=\"headerlink\" title=\"公交车上狗焕表现不错！\"></a>公交车上狗焕表现不错！</h3><p> <img src=\"http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"每天早上醒来-阳光和你都在\"><a href=\"#每天早上醒来-阳光和你都在\" class=\"headerlink\" title=\"每天早上醒来 阳光和你都在\"></a>每天早上醒来 阳光和你都在</h3><p> <img src=\"http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"happy-ending-！！老夫的少女心呐！！\"><a href=\"#happy-ending-！！老夫的少女心呐！！\" class=\"headerlink\" title=\"happy ending ！！老夫的少女心呐！！\"></a>happy ending ！！老夫的少女心呐！！</h3><h5 id=\"and-今天-2017-8-16-也是本blog诞生的日子-科科\"><a href=\"#and-今天-2017-8-16-也是本blog诞生的日子-科科\" class=\"headerlink\" title=\"and 今天(2017.8.16)也是本blog诞生的日子 科科~\"></a>and 今天<strong>(2017.8.16)</strong>也是本blog诞生的日子 科科~</h5>","site":{"data":{}},"excerpt":"<h1 id=\"阿一古-金社长-！！\"><a href=\"#阿一古-金社长-！！\" class=\"headerlink\" title=\"阿一古 金社长~！！\"></a>阿一古 金社长~！！</h1><h3 id=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"><a href=\"#看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\" class=\"headerlink\" title=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"></a>看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！</h3><h3 id=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\"><a href=\"#因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\" class=\"headerlink\" title=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\"></a>因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~</h3>","more":"<p>   <img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502979972172&amp;di=9f27f10470bd58853d7abe36c09c80ca&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"你开心啦！幸福的像花儿一样！\"><a href=\"#你开心啦！幸福的像花儿一样！\" class=\"headerlink\" title=\"你开心啦！幸福的像花儿一样！\"></a>你开心啦！幸福的像花儿一样！</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"德善呐-你可长点心吧！\"><a href=\"#德善呐-你可长点心吧！\" class=\"headerlink\" title=\"德善呐~你可长点心吧！\"></a>德善呐~你可长点心吧！</h3><p> <img src=\"http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif\" alt=\"cmd-markdown-logo\"></p>\n<p> <img src=\"http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈 ~~~~\"></a>哈哈哈 ~~~~</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"公交车上狗焕表现不错！\"><a href=\"#公交车上狗焕表现不错！\" class=\"headerlink\" title=\"公交车上狗焕表现不错！\"></a>公交车上狗焕表现不错！</h3><p> <img src=\"http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"每天早上醒来-阳光和你都在\"><a href=\"#每天早上醒来-阳光和你都在\" class=\"headerlink\" title=\"每天早上醒来 阳光和你都在\"></a>每天早上醒来 阳光和你都在</h3><p> <img src=\"http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"happy-ending-！！老夫的少女心呐！！\"><a href=\"#happy-ending-！！老夫的少女心呐！！\" class=\"headerlink\" title=\"happy ending ！！老夫的少女心呐！！\"></a>happy ending ！！老夫的少女心呐！！</h3><h5 id=\"and-今天-2017-8-16-也是本blog诞生的日子-科科\"><a href=\"#and-今天-2017-8-16-也是本blog诞生的日子-科科\" class=\"headerlink\" title=\"and 今天(2017.8.16)也是本blog诞生的日子 科科~\"></a>and 今天<strong>(2017.8.16)</strong>也是本blog诞生的日子 科科~</h5>"},{"title":"html5 - meta/link 标签详解","date":"2018-01-02T11:07:06.000Z","toc":true,"_content":"\nhtml5 meta/link 标签详解。\n\n<!-- more -->\n \n<!-- toc -->\n\n## meta\n\nmeta标签有三个属性： char-set / name / http-equiv \n\n### char-set\n设置字符集\n\n```\n<meta char-set=\"utf-8\">\n```\n\n### name\n用于描述网页，与属性 `content` 搭配使用，`content` 中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。\n\n- keywords 关键字\n- description 网站内容描述\n- robots 机器人向导\n\t\n    content 可选值：all, none, index, noindex, follow, nofollow，默认 all。\n- author 作者\n    ```\n    <meta name=\"author\" contect=\"name, xxx@163.com\" />\n    ```\n- generator 信息参数，代表网站用什么软件做的\n- COPYRIGHT 版权信息\n- revisit-after  网站重访，如’7days’代表7天。\n\n- viewport\n\t\n    - width \n        \n        viewport的宽度[device-width | pixel_value]， width如果直接设置pixel_value 数值，大部分的安卓手机不支持，但是ios支持；\n\t\n    - height\n        \n        viewport 的高度 （范围从 223 到 10,000 ）\n\n    - user-scalable  [yes | no]是否允许缩放\n    - initial-scale -  [数值] 初始化比例（范围从 > 0 到 10）\n    - minimum-scale -  [数值] 允许缩放的最小比例\n    - maximum-scale -  [数值] 允许缩放的最大比例\n    - target-densitydpi - 值有以下（一般推荐设置中等响度密度或者低像素密度，后者设置具体的值\n    - dpi_value，另外webkit内核已不准备再支持此属性）\n    - dpi_value 一般是70-400//没英寸像素点的个数\n    - device-dpi设备默认像素密度\n    - high-dpi 高像素密度\n    - medium-dpi 中等像素密度\n    - low-dpi 低像素密度\n\n- format-detection 忽略电话号码和邮箱\n\t```\n    <meta name=\"format-detection\" content=\"telephone=no; email=no”>\n    ```\n\n- renderer\n\t启用360浏览器的极速模式。\n    ```\n\t<meta name=\"renderer\" content=\"webkit\">\n    ```\n\n- HandheldFriendly\n\n    针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓\n\t```\n    <meta name=\"HandheldFriendly\" content=\"true”>\n    ```\n\n- MobileOptimized\n\t\n    微软的老式浏览器。\n\t```\n    <meta name=\"MobileOptimized\" content=\"320\">\n    ```\n\n    ```\n    <!-- 其它 -->\n    <!-- UC强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- sns 社交标签 begin -->\n    <!— 参考微博API -->\n    <meta property=\"og:type\" content=\"类型\" />\n    <meta property=\"og:url\" content=\"URL地址\" />\n    <meta property=\"og:title\" content=\"标题\" />\n    <meta property=\"og:image\" content=\"图片\" />\n    <meta property=\"og:description\" content=\"描述\" />\n    <!-- sns 社交标签 end -->\n\n    <!-- Windows 8 磁贴颜色 -->\n    <meta name=\"msapplication-TileColor\" content=\"#000\"/>\n    <!-- Windows 8 磁贴图标 -->\n    <meta name=\"msapplication-TileImage\" content=\"icon.png\"/>\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    ```\n\n- apple-mobile-web-app-capable\n\t\n    网站开启对web app程序的支持，其实意思就是删除默认的苹果工具栏和菜单栏，开启全屏显示\n\t```\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    ```\n\n- apple-mobile-web-app-status-bar-style\n\t\n    在 web app 应用下状态条（屏幕顶部条）的颜色；默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）。\n\t```\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n    ```\n\n- apple-mobile-web-app-title  设置桌面图标标题\n\t```\n    <meta name=\"apple-mobile-web-app-title\" content=“六个字内最佳”>\n    ```\n\n- apple-itunes-app  只能 App 广告条\n\t```\n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"> \n    ``` \n\n### http-equiv\n\t\n    表示 http 的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确的显示网页内容。与属性 content 搭配使用，表示各种参数的变量值。\n\n- expires 过期时间\n\t\n    content 值为 GMT 格式\n    ```\n\t<meta http-equiv=“expires” content=“Fri,12Jan200118:18:18GMT”>\n    ```\n\n- pragma  \n\t\n    cache 模式，禁止浏览器从本地缓存中访问页面内容\n\t```\n    <meta http-equiv=“pragma” content=“no-cache”>\n    ```\n\n- refresh 自动刷新\n\t\n    自动刷新并跳转到新页面，content 格式为秒数 + url，意为多少秒后跳转到 url。\n\t```\n    <meta http-equiv=“refresh” content=“2;http://www.baidu.com”>\n    ```\n\n- set-cookie  cookie的设定\n\t\n    如果网页过期，则cookie 将被删除。\n\t```\n    <meta http-equiv=\"Set-Cookie\"content=\"cookie value=xxx; expires=Friday,12-Jan-200118:18:18GMT；path=/\"> \n    ```\n\n- Window-target 显示窗口的设定\n\t\n    强制页面在当前窗口以独立页面显示，如 _top 用来防止别人在框架里调用自己的页面。\n    ```\n\t<meta http-equiv=\"Window-target\"content=\"_top\">\n    ``` \n\n- content-type 显示字符集的设定\n\n    ```\n\t<meta http-equiv=\"content-Type\"content=\"text/html;charset=gb2312\"> \n    ```\n\n- content-language 显示语言的设定\n\t```\n    <meta http-equiv=\"Content-Language\"content=\"zh-cn\"/> \n    ````\n\n- cache-control \n\n    指定响应和请求遵循的缓存机制\n\t请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age\n\t各个消息中的指令含义如下：\n\t- Public - 指示响应可被任何缓存区缓存\n\t- Private - 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效\n\t- no-cache - 指示请求或响应消息不能缓存\n\t- no-store - 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。\n\t- max-age - 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应\n\t- min-fresh - 指示客户机可以接收响应时间小于当前时间加上指定时间的响应\n\t- max-stale - 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。\n\n\n- Imagetoolbar\n\t\n    是否显示图片工具栏，content 值为 true 或 false。\n\n- Content-script-type 指明页面中脚本类型\n\t```\n    <meta http-equiv=\"Content-Language\"content=\"zh-cn\"/> \n    ```\n\n\n- X-UA-Compatible\n\t优先使用 IE 最新版本和 chrome\n    ```\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n    ```\n\n\n\n## Link\n\n- 设置“添加到主屏幕图标  apple-touch-icon-precomposed\n    ```\n\t<!-- iOS 图标 begin -->  \n\t<link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>  \n\n\t <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->  \n\t<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/> \n     \n\t<!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->  \n\t<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>  \n\n\t<!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->  \n\t<!-- iOS 图标 end -->\n    ```\n\n- 添加 RSS 订阅\n    \n    ```\n    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"/>\n    ```\n\n- 添加 favicon icon\n    ```\n    <link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\" />\n    ```\n\n- 设置启动画面\n    ```\n\t<link rel=\"apple-touch-startup-image\" href=\"Startup.png\" /> \n    ```\n\n\n参考:\n\n[HTML5 meta 全解]( http://blog.csdn.net/kongjiea/article/details/17092413)","source":"_posts/html5-meta.md","raw":"---\ntitle: html5 - meta/link 标签详解\ndate: 2018-1-2 19:07:06\ncategories: front-end\ntags: meta\ntoc: true\n---\n\nhtml5 meta/link 标签详解。\n\n<!-- more -->\n \n<!-- toc -->\n\n## meta\n\nmeta标签有三个属性： char-set / name / http-equiv \n\n### char-set\n设置字符集\n\n```\n<meta char-set=\"utf-8\">\n```\n\n### name\n用于描述网页，与属性 `content` 搭配使用，`content` 中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。\n\n- keywords 关键字\n- description 网站内容描述\n- robots 机器人向导\n\t\n    content 可选值：all, none, index, noindex, follow, nofollow，默认 all。\n- author 作者\n    ```\n    <meta name=\"author\" contect=\"name, xxx@163.com\" />\n    ```\n- generator 信息参数，代表网站用什么软件做的\n- COPYRIGHT 版权信息\n- revisit-after  网站重访，如’7days’代表7天。\n\n- viewport\n\t\n    - width \n        \n        viewport的宽度[device-width | pixel_value]， width如果直接设置pixel_value 数值，大部分的安卓手机不支持，但是ios支持；\n\t\n    - height\n        \n        viewport 的高度 （范围从 223 到 10,000 ）\n\n    - user-scalable  [yes | no]是否允许缩放\n    - initial-scale -  [数值] 初始化比例（范围从 > 0 到 10）\n    - minimum-scale -  [数值] 允许缩放的最小比例\n    - maximum-scale -  [数值] 允许缩放的最大比例\n    - target-densitydpi - 值有以下（一般推荐设置中等响度密度或者低像素密度，后者设置具体的值\n    - dpi_value，另外webkit内核已不准备再支持此属性）\n    - dpi_value 一般是70-400//没英寸像素点的个数\n    - device-dpi设备默认像素密度\n    - high-dpi 高像素密度\n    - medium-dpi 中等像素密度\n    - low-dpi 低像素密度\n\n- format-detection 忽略电话号码和邮箱\n\t```\n    <meta name=\"format-detection\" content=\"telephone=no; email=no”>\n    ```\n\n- renderer\n\t启用360浏览器的极速模式。\n    ```\n\t<meta name=\"renderer\" content=\"webkit\">\n    ```\n\n- HandheldFriendly\n\n    针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓\n\t```\n    <meta name=\"HandheldFriendly\" content=\"true”>\n    ```\n\n- MobileOptimized\n\t\n    微软的老式浏览器。\n\t```\n    <meta name=\"MobileOptimized\" content=\"320\">\n    ```\n\n    ```\n    <!-- 其它 -->\n    <!-- UC强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- sns 社交标签 begin -->\n    <!— 参考微博API -->\n    <meta property=\"og:type\" content=\"类型\" />\n    <meta property=\"og:url\" content=\"URL地址\" />\n    <meta property=\"og:title\" content=\"标题\" />\n    <meta property=\"og:image\" content=\"图片\" />\n    <meta property=\"og:description\" content=\"描述\" />\n    <!-- sns 社交标签 end -->\n\n    <!-- Windows 8 磁贴颜色 -->\n    <meta name=\"msapplication-TileColor\" content=\"#000\"/>\n    <!-- Windows 8 磁贴图标 -->\n    <meta name=\"msapplication-TileImage\" content=\"icon.png\"/>\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    ```\n\n- apple-mobile-web-app-capable\n\t\n    网站开启对web app程序的支持，其实意思就是删除默认的苹果工具栏和菜单栏，开启全屏显示\n\t```\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    ```\n\n- apple-mobile-web-app-status-bar-style\n\t\n    在 web app 应用下状态条（屏幕顶部条）的颜色；默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）。\n\t```\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n    ```\n\n- apple-mobile-web-app-title  设置桌面图标标题\n\t```\n    <meta name=\"apple-mobile-web-app-title\" content=“六个字内最佳”>\n    ```\n\n- apple-itunes-app  只能 App 广告条\n\t```\n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"> \n    ``` \n\n### http-equiv\n\t\n    表示 http 的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确的显示网页内容。与属性 content 搭配使用，表示各种参数的变量值。\n\n- expires 过期时间\n\t\n    content 值为 GMT 格式\n    ```\n\t<meta http-equiv=“expires” content=“Fri,12Jan200118:18:18GMT”>\n    ```\n\n- pragma  \n\t\n    cache 模式，禁止浏览器从本地缓存中访问页面内容\n\t```\n    <meta http-equiv=“pragma” content=“no-cache”>\n    ```\n\n- refresh 自动刷新\n\t\n    自动刷新并跳转到新页面，content 格式为秒数 + url，意为多少秒后跳转到 url。\n\t```\n    <meta http-equiv=“refresh” content=“2;http://www.baidu.com”>\n    ```\n\n- set-cookie  cookie的设定\n\t\n    如果网页过期，则cookie 将被删除。\n\t```\n    <meta http-equiv=\"Set-Cookie\"content=\"cookie value=xxx; expires=Friday,12-Jan-200118:18:18GMT；path=/\"> \n    ```\n\n- Window-target 显示窗口的设定\n\t\n    强制页面在当前窗口以独立页面显示，如 _top 用来防止别人在框架里调用自己的页面。\n    ```\n\t<meta http-equiv=\"Window-target\"content=\"_top\">\n    ``` \n\n- content-type 显示字符集的设定\n\n    ```\n\t<meta http-equiv=\"content-Type\"content=\"text/html;charset=gb2312\"> \n    ```\n\n- content-language 显示语言的设定\n\t```\n    <meta http-equiv=\"Content-Language\"content=\"zh-cn\"/> \n    ````\n\n- cache-control \n\n    指定响应和请求遵循的缓存机制\n\t请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age\n\t各个消息中的指令含义如下：\n\t- Public - 指示响应可被任何缓存区缓存\n\t- Private - 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效\n\t- no-cache - 指示请求或响应消息不能缓存\n\t- no-store - 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。\n\t- max-age - 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应\n\t- min-fresh - 指示客户机可以接收响应时间小于当前时间加上指定时间的响应\n\t- max-stale - 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。\n\n\n- Imagetoolbar\n\t\n    是否显示图片工具栏，content 值为 true 或 false。\n\n- Content-script-type 指明页面中脚本类型\n\t```\n    <meta http-equiv=\"Content-Language\"content=\"zh-cn\"/> \n    ```\n\n\n- X-UA-Compatible\n\t优先使用 IE 最新版本和 chrome\n    ```\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n    ```\n\n\n\n## Link\n\n- 设置“添加到主屏幕图标  apple-touch-icon-precomposed\n    ```\n\t<!-- iOS 图标 begin -->  \n\t<link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>  \n\n\t <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->  \n\t<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/> \n     \n\t<!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->  \n\t<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>  \n\n\t<!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->  \n\t<!-- iOS 图标 end -->\n    ```\n\n- 添加 RSS 订阅\n    \n    ```\n    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"/>\n    ```\n\n- 添加 favicon icon\n    ```\n    <link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\" />\n    ```\n\n- 设置启动画面\n    ```\n\t<link rel=\"apple-touch-startup-image\" href=\"Startup.png\" /> \n    ```\n\n\n参考:\n\n[HTML5 meta 全解]( http://blog.csdn.net/kongjiea/article/details/17092413)","slug":"html5-meta","published":1,"updated":"2018-02-05T16:36:29.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s6v00069ms6jp2swv51","content":"<p>html5 meta/link 标签详解。</p>\n<a id=\"more\"></a>\n<!-- toc -->\n<h2 id=\"meta\"><a href=\"#meta\" class=\"headerlink\" title=\"meta\"></a>meta</h2><p>meta标签有三个属性： char-set / name / http-equiv </p>\n<h3 id=\"char-set\"><a href=\"#char-set\" class=\"headerlink\" title=\"char-set\"></a>char-set</h3><p>设置字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta char-set=&quot;utf-8&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><p>用于描述网页，与属性 <code>content</code> 搭配使用，<code>content</code> 中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p>\n<ul>\n<li>keywords 关键字</li>\n<li>description 网站内容描述</li>\n<li><p>robots 机器人向导</p>\n<p>  content 可选值：all, none, index, noindex, follow, nofollow，默认 all。</p>\n</li>\n<li><p>author 作者</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;author&quot; contect=&quot;name, xxx@163.com&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>generator 信息参数，代表网站用什么软件做的</p>\n</li>\n<li>COPYRIGHT 版权信息</li>\n<li><p>revisit-after  网站重访，如’7days’代表7天。</p>\n</li>\n<li><p>viewport</p>\n<ul>\n<li><p>width </p>\n<p>  viewport的宽度[device-width | pixel_value]， width如果直接设置pixel_value 数值，大部分的安卓手机不支持，但是ios支持；</p>\n</li>\n<li><p>height</p>\n<p>  viewport 的高度 （范围从 223 到 10,000 ）</p>\n</li>\n<li><p>user-scalable  [yes | no]是否允许缩放</p>\n</li>\n<li>initial-scale -  [数值] 初始化比例（范围从 &gt; 0 到 10）</li>\n<li>minimum-scale -  [数值] 允许缩放的最小比例</li>\n<li>maximum-scale -  [数值] 允许缩放的最大比例</li>\n<li>target-densitydpi - 值有以下（一般推荐设置中等响度密度或者低像素密度，后者设置具体的值</li>\n<li>dpi_value，另外webkit内核已不准备再支持此属性）</li>\n<li>dpi_value 一般是70-400//没英寸像素点的个数</li>\n<li>device-dpi设备默认像素密度</li>\n<li>high-dpi 高像素密度</li>\n<li>medium-dpi 中等像素密度</li>\n<li>low-dpi 低像素密度</li>\n</ul>\n</li>\n<li><p>format-detection 忽略电话号码和邮箱</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no; email=no”&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>renderer<br>  启用360浏览器的极速模式。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HandheldFriendly</p>\n<p>  针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true”&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MobileOptimized</p>\n<p>  微软的老式浏览器。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 其它 --&gt;</span><br><span class=\"line\">&lt;!-- UC强制竖屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">&lt;!-- UC强制全屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class=\"line\">&lt;!-- UC应用模式 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class=\"line\">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">&lt;!-- QQ强制全屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">&lt;!-- QQ应用模式 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class=\"line\">&lt;!-- sns 社交标签 begin --&gt;</span><br><span class=\"line\">&lt;!— 参考微博API --&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:type&quot; content=&quot;类型&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:url&quot; content=&quot;URL地址&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:title&quot; content=&quot;标题&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:image&quot; content=&quot;图片&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:description&quot; content=&quot;描述&quot; /&gt;</span><br><span class=\"line\">&lt;!-- sns 社交标签 end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Windows 8 磁贴颜色 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;</span><br><span class=\"line\">&lt;!-- Windows 8 磁贴图标 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;</span><br><span class=\"line\">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-mobile-web-app-capable</p>\n<p>  网站开启对web app程序的支持，其实意思就是删除默认的苹果工具栏和菜单栏，开启全屏显示</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-mobile-web-app-status-bar-style</p>\n<p>  在 web app 应用下状态条（屏幕顶部条）的颜色；默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-mobile-web-app-title  设置桌面图标标题</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=“六个字内最佳”&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-itunes-app  只能 App 广告条</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt; </span><br><span class=\"line\">    ``` </span><br><span class=\"line\"></span><br><span class=\"line\">### http-equiv</span><br><span class=\"line\">\t</span><br><span class=\"line\">    表示 http 的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确的显示网页内容。与属性 content 搭配使用，表示各种参数的变量值。</span><br><span class=\"line\"></span><br><span class=\"line\">- expires 过期时间</span><br><span class=\"line\">\t</span><br><span class=\"line\">    content 值为 GMT 格式</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"“expires”\" content=\"“Fri,12Jan200118:18:18GMT”\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- pragma  </span><br><span class=\"line\">\t</span><br><span class=\"line\">    cache 模式，禁止浏览器从本地缓存中访问页面内容</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"“pragma”\" content=\"“no-cache”\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- refresh 自动刷新</span><br><span class=\"line\">\t</span><br><span class=\"line\">    自动刷新并跳转到新页面，content 格式为秒数 + url，意为多少秒后跳转到 url。</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"“refresh”\" content=\"“2;http://www.baidu.com”\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- set-cookie  cookie的设定</span><br><span class=\"line\">\t</span><br><span class=\"line\">    如果网页过期，则cookie 将被删除。</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Set-Cookie\" content=\"cookie value=xxx; expires=Friday,12-Jan-200118:18:18GMT；path=/\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- Window-target 显示窗口的设定</span><br><span class=\"line\">\t</span><br><span class=\"line\">    强制页面在当前窗口以独立页面显示，如 _top 用来防止别人在框架里调用自己的页面。</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Window-target\" content=\"_top\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- content-type 显示字符集的设定</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"content-Type\" content=\"text/html;charset=gb2312\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- content-language 显示语言的设定</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Content-Language\" content=\"zh-cn\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- cache-control </span><br><span class=\"line\"></span><br><span class=\"line\">    指定响应和请求遵循的缓存机制</span><br><span class=\"line\">\t请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age</span><br><span class=\"line\">\t各个消息中的指令含义如下：</span><br><span class=\"line\">\t- Public - 指示响应可被任何缓存区缓存</span><br><span class=\"line\">\t- Private - 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效</span><br><span class=\"line\">\t- no-cache - 指示请求或响应消息不能缓存</span><br><span class=\"line\">\t- no-store - 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</span><br><span class=\"line\">\t- max-age - 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应</span><br><span class=\"line\">\t- min-fresh - 指示客户机可以接收响应时间小于当前时间加上指定时间的响应</span><br><span class=\"line\">\t- max-stale - 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- Imagetoolbar</span><br><span class=\"line\">\t</span><br><span class=\"line\">    是否显示图片工具栏，content 值为 true 或 false。</span><br><span class=\"line\"></span><br><span class=\"line\">- Content-script-type 指明页面中脚本类型</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Content-Language\" content=\"zh-cn\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- X-UA-Compatible</span><br><span class=\"line\">\t优先使用 IE 最新版本和 chrome</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## Link</span><br><span class=\"line\"></span><br><span class=\"line\">- 设置“添加到主屏幕图标  apple-touch-icon-precomposed</span><br></pre></td></tr></table></figure>\n  <!-- iOS 图标 begin -->  \n  <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\">  \n\n   <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->  \n  <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"> \n\n  <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->  \n  <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\">  \n\n  <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->  \n  <!-- iOS 图标 end -->\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 添加 RSS 订阅</span><br></pre></td></tr></table></figure>\n<p>  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 添加 favicon icon</span><br></pre></td></tr></table></figure>\n<p>  <link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 设置启动画面</span><br></pre></td></tr></table></figure>\n<p>  <link rel=\"apple-touch-startup-image\" href=\"Startup.png\"><br>  ```</p>\n</li>\n</ul>\n<p>参考:</p>\n<p><a href=\"http://blog.csdn.net/kongjiea/article/details/17092413\" target=\"_blank\" rel=\"noopener\">HTML5 meta 全解</a></p>\n","site":{"data":{}},"excerpt":"<p>html5 meta/link 标签详解。</p>","more":"<!-- toc -->\n<h2 id=\"meta\"><a href=\"#meta\" class=\"headerlink\" title=\"meta\"></a>meta</h2><p>meta标签有三个属性： char-set / name / http-equiv </p>\n<h3 id=\"char-set\"><a href=\"#char-set\" class=\"headerlink\" title=\"char-set\"></a>char-set</h3><p>设置字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta char-set=&quot;utf-8&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><p>用于描述网页，与属性 <code>content</code> 搭配使用，<code>content</code> 中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p>\n<ul>\n<li>keywords 关键字</li>\n<li>description 网站内容描述</li>\n<li><p>robots 机器人向导</p>\n<p>  content 可选值：all, none, index, noindex, follow, nofollow，默认 all。</p>\n</li>\n<li><p>author 作者</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;author&quot; contect=&quot;name, xxx@163.com&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>generator 信息参数，代表网站用什么软件做的</p>\n</li>\n<li>COPYRIGHT 版权信息</li>\n<li><p>revisit-after  网站重访，如’7days’代表7天。</p>\n</li>\n<li><p>viewport</p>\n<ul>\n<li><p>width </p>\n<p>  viewport的宽度[device-width | pixel_value]， width如果直接设置pixel_value 数值，大部分的安卓手机不支持，但是ios支持；</p>\n</li>\n<li><p>height</p>\n<p>  viewport 的高度 （范围从 223 到 10,000 ）</p>\n</li>\n<li><p>user-scalable  [yes | no]是否允许缩放</p>\n</li>\n<li>initial-scale -  [数值] 初始化比例（范围从 &gt; 0 到 10）</li>\n<li>minimum-scale -  [数值] 允许缩放的最小比例</li>\n<li>maximum-scale -  [数值] 允许缩放的最大比例</li>\n<li>target-densitydpi - 值有以下（一般推荐设置中等响度密度或者低像素密度，后者设置具体的值</li>\n<li>dpi_value，另外webkit内核已不准备再支持此属性）</li>\n<li>dpi_value 一般是70-400//没英寸像素点的个数</li>\n<li>device-dpi设备默认像素密度</li>\n<li>high-dpi 高像素密度</li>\n<li>medium-dpi 中等像素密度</li>\n<li>low-dpi 低像素密度</li>\n</ul>\n</li>\n<li><p>format-detection 忽略电话号码和邮箱</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no; email=no”&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>renderer<br>  启用360浏览器的极速模式。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HandheldFriendly</p>\n<p>  针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true”&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MobileOptimized</p>\n<p>  微软的老式浏览器。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 其它 --&gt;</span><br><span class=\"line\">&lt;!-- UC强制竖屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">&lt;!-- UC强制全屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class=\"line\">&lt;!-- UC应用模式 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class=\"line\">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">&lt;!-- QQ强制全屏 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">&lt;!-- QQ应用模式 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class=\"line\">&lt;!-- sns 社交标签 begin --&gt;</span><br><span class=\"line\">&lt;!— 参考微博API --&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:type&quot; content=&quot;类型&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:url&quot; content=&quot;URL地址&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:title&quot; content=&quot;标题&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:image&quot; content=&quot;图片&quot; /&gt;</span><br><span class=\"line\">&lt;meta property=&quot;og:description&quot; content=&quot;描述&quot; /&gt;</span><br><span class=\"line\">&lt;!-- sns 社交标签 end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Windows 8 磁贴颜色 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;</span><br><span class=\"line\">&lt;!-- Windows 8 磁贴图标 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;</span><br><span class=\"line\">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class=\"line\">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-mobile-web-app-capable</p>\n<p>  网站开启对web app程序的支持，其实意思就是删除默认的苹果工具栏和菜单栏，开启全屏显示</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-mobile-web-app-status-bar-style</p>\n<p>  在 web app 应用下状态条（屏幕顶部条）的颜色；默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-mobile-web-app-title  设置桌面图标标题</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=“六个字内最佳”&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apple-itunes-app  只能 App 广告条</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt; </span><br><span class=\"line\">    ``` </span><br><span class=\"line\"></span><br><span class=\"line\">### http-equiv</span><br><span class=\"line\">\t</span><br><span class=\"line\">    表示 http 的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确的显示网页内容。与属性 content 搭配使用，表示各种参数的变量值。</span><br><span class=\"line\"></span><br><span class=\"line\">- expires 过期时间</span><br><span class=\"line\">\t</span><br><span class=\"line\">    content 值为 GMT 格式</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"“expires”\" content=\"“Fri,12Jan200118:18:18GMT”\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- pragma  </span><br><span class=\"line\">\t</span><br><span class=\"line\">    cache 模式，禁止浏览器从本地缓存中访问页面内容</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"“pragma”\" content=\"“no-cache”\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- refresh 自动刷新</span><br><span class=\"line\">\t</span><br><span class=\"line\">    自动刷新并跳转到新页面，content 格式为秒数 + url，意为多少秒后跳转到 url。</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"“refresh”\" content=\"“2;http://www.baidu.com”\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- set-cookie  cookie的设定</span><br><span class=\"line\">\t</span><br><span class=\"line\">    如果网页过期，则cookie 将被删除。</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Set-Cookie\" content=\"cookie value=xxx; expires=Friday,12-Jan-200118:18:18GMT；path=/\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- Window-target 显示窗口的设定</span><br><span class=\"line\">\t</span><br><span class=\"line\">    强制页面在当前窗口以独立页面显示，如 _top 用来防止别人在框架里调用自己的页面。</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Window-target\" content=\"_top\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- content-type 显示字符集的设定</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"content-Type\" content=\"text/html;charset=gb2312\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- content-language 显示语言的设定</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Content-Language\" content=\"zh-cn\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- cache-control </span><br><span class=\"line\"></span><br><span class=\"line\">    指定响应和请求遵循的缓存机制</span><br><span class=\"line\">\t请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age</span><br><span class=\"line\">\t各个消息中的指令含义如下：</span><br><span class=\"line\">\t- Public - 指示响应可被任何缓存区缓存</span><br><span class=\"line\">\t- Private - 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效</span><br><span class=\"line\">\t- no-cache - 指示请求或响应消息不能缓存</span><br><span class=\"line\">\t- no-store - 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</span><br><span class=\"line\">\t- max-age - 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应</span><br><span class=\"line\">\t- min-fresh - 指示客户机可以接收响应时间小于当前时间加上指定时间的响应</span><br><span class=\"line\">\t- max-stale - 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- Imagetoolbar</span><br><span class=\"line\">\t</span><br><span class=\"line\">    是否显示图片工具栏，content 值为 true 或 false。</span><br><span class=\"line\"></span><br><span class=\"line\">- Content-script-type 指明页面中脚本类型</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"Content-Language\" content=\"zh-cn\"> </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- X-UA-Compatible</span><br><span class=\"line\">\t优先使用 IE 最新版本和 chrome</span><br></pre></td></tr></table></figure>\n<p>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## Link</span><br><span class=\"line\"></span><br><span class=\"line\">- 设置“添加到主屏幕图标  apple-touch-icon-precomposed</span><br></pre></td></tr></table></figure>\n  <!-- iOS 图标 begin -->  \n  <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\">  \n\n   <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->  \n  <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"> \n\n  <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->  \n  <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\">  \n\n  <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->  \n  <!-- iOS 图标 end -->\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 添加 RSS 订阅</span><br></pre></td></tr></table></figure>\n<p>  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 添加 favicon icon</span><br></pre></td></tr></table></figure>\n<p>  <link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\"></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 设置启动画面</span><br></pre></td></tr></table></figure>\n<p>  <link rel=\"apple-touch-startup-image\" href=\"Startup.png\"><br>  ```</p>\n</li>\n</ul>\n<p>参考:</p>\n<p><a href=\"http://blog.csdn.net/kongjiea/article/details/17092413\" target=\"_blank\" rel=\"noopener\">HTML5 meta 全解</a></p>"},{"title":"JS 基础 (下)","date":"2017-09-13T15:52:07.000Z","toc":true,"_content":"\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->\n\n<!-- more -->\n\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let's start ·-·-·-·-·-·-·-·-·-</div>\n\n\n\n## 事件\n\n### 事件流\n\n事件流描述的是从页面中接收事件的顺序。\n\n- 事件冒泡：IE8及以下\n- 事件捕获：IE9及以上、其它主流浏览器\n\nDOM事件流：事件捕获阶段、处于目标阶段、事件冒泡阶段  （IE8及以下不支持\n\n### 事件处理程序\n\n处理事件的函数叫做事件处理程序。\n\n- HTML 事件处理程序\n```\n<input type=\"button\" id=\"myBtn\" value=\"Click Me\" onclick=\"alert('hello world')\">\n```\n\n- DOM0级 事件处理程序\n```\nvar btn = document.getElementById('myBtn')\nbtn.onclick = function () {\n    alert('Clicked')\n}\n```\n\n- DOM2级 事件处理程序\n\n    可以添加多个，按添加的顺序执行。\n    ```\n    var btn = document.getElementById('myBtn') btn.addEventListener('click', function () {\n        alert(this.id)\n    }, false)\n    ```\n\n- IE 事件处理程序\n\n    可以添加多个，按相反的顺序执行。\n    ```\n    btn.attachEvent('onclick', function () {\n        alert('Clicked')\n    })\n    ```\n\n- 跨浏览器的事件处理程序\n\n    使用能力检测来判断。\n\n### 事件对象\n\n事件处理程序默认的参数叫做事件对象 event。\n\n#### 事件对象的属性、方法\n\n- DOM 中（通过事件处理程序的参数获得）：\n    - `bubbles`  事件是否冒泡\n    - `cancleable`    是否可以取消事件的默认行为\n    - `defaultPrevented`  为 true 表示已经调用了`preventDefault()` DOM3级事件中新增\n    - `trusted`  为 true 表示浏览器生成的，为 false 表示 js 触发的\n    - `type`    事件类型\n\n    - `currentTarget`     当前正在处理事件的那个元素，this 始终等于它\n    - `target`   事件的目标\n    - `preventDefault()`    取消事件的默认行为，cancleable 为 true 时可使用\n    - `stopPropagation()`   取消事件的进一步捕获或冒泡。bubbles 为 true时可使用\n- IE 中 （通过`window.event 获得`）：\n    - `cancleBubble`    默认 false。与`stopPropagation()`作用相同\n    - `returnValue`     默认 false。与`preventDefault()`作用相同\n    - `type`    与`target`作用相同\n    - `srcElement`\n\n### 事件类型\n1. UI 事件\n    - `load` document window img上可触发\n    - `unload`\n    - `resize` window 上触发\n    - `scroll` window 上触发\n    - `select` `<select>`上触发\n2. 焦点事件\n    - `blur`\n    - `focus`\n    - `focusin`  <==> focus\n    - `focusout`  <==> blur\n3. 鼠标与滚轮事件\n    - `click`\n    - `dblclick`  触发两次 click 事件\n    - `mouseenter`  不冒泡\n    - `mousemove`\n    - `mouseover`\n    - `mousedown`\n    - `mouseup`   与 mousedown 相继触发后才会触发 click\n    - `mouseleave`  不冒泡\n4. 键盘与文本事件\n    - `keydown`  按下任意键触发\n    - `keypress`  按下字符键时触发\n    - `keyup`\n5. 复合事件\n\n    （基本用不到……\n    - `compositionstart`\n    - `compositionupdate`\n    - `compositionend`\n6. 变动事件\n7. HTML5事件\n    - `contextmenu` 右击显示上下文菜单\n    - `beforeunload`\n    - `DOMContentLoaded`  页面的 DOM 树形成后触发，一般早于 `load` 事件\n    - `readystatechange`\n    - `pageshow`/`pagehide`  ff和 opera 支持前进/后退时使用往返缓存`bfcache`。pageshow 在load 事件后触发，pagehide 在 unload 事件前触发。\n    - `hashchange`\n8. 设备事件\n    - `orientationchange`  通过`window.orientation`获取相关信息\n    - `deviceorientation`  设备方向改变时触发\n    - `devicemotion`\n9. 触摸与手势事件\n    - 触摸事件\n        - `touchstart`\n        - `touchmove`\n        - `touchend`\n        - `touchcancle`\n    - 手势事件：只有两个手指都触摸到事件的接收容器时才会触发这些事件\n        - `gesturestart`\n        - `gesturechange`\n        - `gestureend`\n\n## DOM\n\n- Node\n\n    节点类型，js 中所有的节点类型都继承自 Node 类型。\n    - nodeType  节点类型，为常量\n        - Node.ELEMENT_NODE(1)\n        - Node.ATTRIBUTE_NODE(2)\n        - Node.TEXT_NODE(3)\n        - Node.CDATA_SECTION_NODE(4)\n        - Node.ENTITY_REFERENCE_NODE(5)\n        - Node.ENTITY_NODE(6)\n        - Node.PROCESSING_INSTRUCTION_NODE(7)\n        - Node.COMMENT_NODE(8)\n        - Node.DOCUMENT_NODE(9)\n        - Node.DOCUMENT_TYPE_NODE(10)\n        - Node.DOCUMENT_FRAGMENT_NODE(11)\n        - Node.NOTATION_NODE(12)\n    - nodeName  \n    - nodeValue\n    - childNodes  子节点，为 NodeList 对象（类 Array 对象）\n    - parentNode\n    - previousSibling / nextSibling\n    - firstChild / lastChild\n    - hasChildNodes()\n    - ownerDocument 指向表示整个文档的文档节点\n\n    - appendChild(node) 返回新增的节点，如果参数 node 已是文档的一部分，则从旧位置移动到新位置。\n    - insertBefore(toAppendNode, referNode)  referNode为参照节点，如为 null，结果同 appendChild。\n    - replaceChild(newNode, toReplacedNode)\n    - cloneNode(isDeep)\n    - normalize()  处理文本节点，空则删除，多个合并为一个\n\n- Document\n\n    文档类型。document 对象是 HTMLDocument (继承自Document) 的实例，它是 window 对象的一个属性。\n\n    - 访问子节点:\n        - document.documentElement  \n        - document.childNodes  (一般有两个值，一个 doctype，一个 html)\n\n    - 文档信息\n        - title\n        - URL\n        - domain\n        - referrer\n\n- Element\n\n    - getAttribute('attrName')\n    - setAttribute('attrName', 'value')\n    - removeAttribute('attrName')\n\n    - createElement()\n\n- Text\n\n    - 操作节点中的文本\n        - appendData('text')\n        - deleteData(offset, count)  从 offset 位置开始删除 count 个字符\n        - insertData(offset, text)\n        - replaceData(offset, count, text)\n        - splitText(offset) 从 offset 位置将当前文本节点分隔为两个文本节点\n\n    - createTextNode('text')\n\n## DOM 扩展\n\n- selectors API\n    - querySelector()\n    - querySelectorAll()\n    - matchesSelector()\n- html5\n    - getElementsByClassName()\n    - classList 返回元素的 class list（类 Array 对象）\n        - add('className')\n        - contains('className')\n        - remove('className')\n        - toggle('className')\n    - document.activeElement  返回当前获得焦点的元素\n    - HTMLDocument\n        - document.readyState  返回 `loading` or  `complete`\n        - document.compatMode  返回 `CSS1Compat`（标准模式） or `BackCompat`（混杂模式）\n        - document.head  类似 document.body\n    - document.charset / document.defaultCharset\n    - data-x 自定义数据\n        - dataset 访问自定义属性\n    - 插入标记\n        - innerHTML\n        - outerHTML\n        - insertAdjacentHTML('beforebegin', 'elementHTML')\n            - 第一个参数必须是： beforebegin  beforeend  afterbegin  afterend\n\n    >  在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性\n\n## BOM\n\n- window\n\n    js中的全局对象。\n    - 窗口位置\n\n        浏览器窗口相对于屏幕左/上边的距离：\n\n        window.screenLeft / screenX\n\n        window.screenTop / screenY\n    - 窗口大小\n\n        页面视图区的大小：\n        window.innerHeight / innerWidth\n\n        浏览器窗口本身的大小：\n        window.outerHeight / outerWidth\n\n        页面视口的大小：\n        document.body.clientHeight / clientWidth\n\n        布局视口的大小：\n        document.documentElement.clientHeight / clientWidth\n\n        屏幕的像素宽 / 高度：\n        screen.width / height\n\n- location\n\n    与当前 url 相关的一些信息。window.location 与 document.location指向同一个对象。\n    - hash\n    - host  服务器名称+端口号\n    - hostname  服务器名称\n    - port  端口号\n    - href\n    - pathname\n    - protocol\n    - search\n\n    - location.replace()\n    - location.assign()\n\n- navigator\n\n    - userAgent\n- screen\n\n    保存于客户端显示器相关的一些信息。\n\n- history\n    - history.go()\n\n        参数：`正负数`表示前进 or 后退，`字符串`表示跳转的 url\n    - history.back()    后退一页\n    - history.forward()     前进一页\n\n \n","source":"_posts/js-basic-2.md","raw":"---\ntitle: JS 基础 (下)\ndate: 2017-09-13 23:52:07\ncategories: front-end\ntags: javascript\ntoc: true\n---\n\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->\n\n<!-- more -->\n\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let's start ·-·-·-·-·-·-·-·-·-</div>\n\n\n\n## 事件\n\n### 事件流\n\n事件流描述的是从页面中接收事件的顺序。\n\n- 事件冒泡：IE8及以下\n- 事件捕获：IE9及以上、其它主流浏览器\n\nDOM事件流：事件捕获阶段、处于目标阶段、事件冒泡阶段  （IE8及以下不支持\n\n### 事件处理程序\n\n处理事件的函数叫做事件处理程序。\n\n- HTML 事件处理程序\n```\n<input type=\"button\" id=\"myBtn\" value=\"Click Me\" onclick=\"alert('hello world')\">\n```\n\n- DOM0级 事件处理程序\n```\nvar btn = document.getElementById('myBtn')\nbtn.onclick = function () {\n    alert('Clicked')\n}\n```\n\n- DOM2级 事件处理程序\n\n    可以添加多个，按添加的顺序执行。\n    ```\n    var btn = document.getElementById('myBtn') btn.addEventListener('click', function () {\n        alert(this.id)\n    }, false)\n    ```\n\n- IE 事件处理程序\n\n    可以添加多个，按相反的顺序执行。\n    ```\n    btn.attachEvent('onclick', function () {\n        alert('Clicked')\n    })\n    ```\n\n- 跨浏览器的事件处理程序\n\n    使用能力检测来判断。\n\n### 事件对象\n\n事件处理程序默认的参数叫做事件对象 event。\n\n#### 事件对象的属性、方法\n\n- DOM 中（通过事件处理程序的参数获得）：\n    - `bubbles`  事件是否冒泡\n    - `cancleable`    是否可以取消事件的默认行为\n    - `defaultPrevented`  为 true 表示已经调用了`preventDefault()` DOM3级事件中新增\n    - `trusted`  为 true 表示浏览器生成的，为 false 表示 js 触发的\n    - `type`    事件类型\n\n    - `currentTarget`     当前正在处理事件的那个元素，this 始终等于它\n    - `target`   事件的目标\n    - `preventDefault()`    取消事件的默认行为，cancleable 为 true 时可使用\n    - `stopPropagation()`   取消事件的进一步捕获或冒泡。bubbles 为 true时可使用\n- IE 中 （通过`window.event 获得`）：\n    - `cancleBubble`    默认 false。与`stopPropagation()`作用相同\n    - `returnValue`     默认 false。与`preventDefault()`作用相同\n    - `type`    与`target`作用相同\n    - `srcElement`\n\n### 事件类型\n1. UI 事件\n    - `load` document window img上可触发\n    - `unload`\n    - `resize` window 上触发\n    - `scroll` window 上触发\n    - `select` `<select>`上触发\n2. 焦点事件\n    - `blur`\n    - `focus`\n    - `focusin`  <==> focus\n    - `focusout`  <==> blur\n3. 鼠标与滚轮事件\n    - `click`\n    - `dblclick`  触发两次 click 事件\n    - `mouseenter`  不冒泡\n    - `mousemove`\n    - `mouseover`\n    - `mousedown`\n    - `mouseup`   与 mousedown 相继触发后才会触发 click\n    - `mouseleave`  不冒泡\n4. 键盘与文本事件\n    - `keydown`  按下任意键触发\n    - `keypress`  按下字符键时触发\n    - `keyup`\n5. 复合事件\n\n    （基本用不到……\n    - `compositionstart`\n    - `compositionupdate`\n    - `compositionend`\n6. 变动事件\n7. HTML5事件\n    - `contextmenu` 右击显示上下文菜单\n    - `beforeunload`\n    - `DOMContentLoaded`  页面的 DOM 树形成后触发，一般早于 `load` 事件\n    - `readystatechange`\n    - `pageshow`/`pagehide`  ff和 opera 支持前进/后退时使用往返缓存`bfcache`。pageshow 在load 事件后触发，pagehide 在 unload 事件前触发。\n    - `hashchange`\n8. 设备事件\n    - `orientationchange`  通过`window.orientation`获取相关信息\n    - `deviceorientation`  设备方向改变时触发\n    - `devicemotion`\n9. 触摸与手势事件\n    - 触摸事件\n        - `touchstart`\n        - `touchmove`\n        - `touchend`\n        - `touchcancle`\n    - 手势事件：只有两个手指都触摸到事件的接收容器时才会触发这些事件\n        - `gesturestart`\n        - `gesturechange`\n        - `gestureend`\n\n## DOM\n\n- Node\n\n    节点类型，js 中所有的节点类型都继承自 Node 类型。\n    - nodeType  节点类型，为常量\n        - Node.ELEMENT_NODE(1)\n        - Node.ATTRIBUTE_NODE(2)\n        - Node.TEXT_NODE(3)\n        - Node.CDATA_SECTION_NODE(4)\n        - Node.ENTITY_REFERENCE_NODE(5)\n        - Node.ENTITY_NODE(6)\n        - Node.PROCESSING_INSTRUCTION_NODE(7)\n        - Node.COMMENT_NODE(8)\n        - Node.DOCUMENT_NODE(9)\n        - Node.DOCUMENT_TYPE_NODE(10)\n        - Node.DOCUMENT_FRAGMENT_NODE(11)\n        - Node.NOTATION_NODE(12)\n    - nodeName  \n    - nodeValue\n    - childNodes  子节点，为 NodeList 对象（类 Array 对象）\n    - parentNode\n    - previousSibling / nextSibling\n    - firstChild / lastChild\n    - hasChildNodes()\n    - ownerDocument 指向表示整个文档的文档节点\n\n    - appendChild(node) 返回新增的节点，如果参数 node 已是文档的一部分，则从旧位置移动到新位置。\n    - insertBefore(toAppendNode, referNode)  referNode为参照节点，如为 null，结果同 appendChild。\n    - replaceChild(newNode, toReplacedNode)\n    - cloneNode(isDeep)\n    - normalize()  处理文本节点，空则删除，多个合并为一个\n\n- Document\n\n    文档类型。document 对象是 HTMLDocument (继承自Document) 的实例，它是 window 对象的一个属性。\n\n    - 访问子节点:\n        - document.documentElement  \n        - document.childNodes  (一般有两个值，一个 doctype，一个 html)\n\n    - 文档信息\n        - title\n        - URL\n        - domain\n        - referrer\n\n- Element\n\n    - getAttribute('attrName')\n    - setAttribute('attrName', 'value')\n    - removeAttribute('attrName')\n\n    - createElement()\n\n- Text\n\n    - 操作节点中的文本\n        - appendData('text')\n        - deleteData(offset, count)  从 offset 位置开始删除 count 个字符\n        - insertData(offset, text)\n        - replaceData(offset, count, text)\n        - splitText(offset) 从 offset 位置将当前文本节点分隔为两个文本节点\n\n    - createTextNode('text')\n\n## DOM 扩展\n\n- selectors API\n    - querySelector()\n    - querySelectorAll()\n    - matchesSelector()\n- html5\n    - getElementsByClassName()\n    - classList 返回元素的 class list（类 Array 对象）\n        - add('className')\n        - contains('className')\n        - remove('className')\n        - toggle('className')\n    - document.activeElement  返回当前获得焦点的元素\n    - HTMLDocument\n        - document.readyState  返回 `loading` or  `complete`\n        - document.compatMode  返回 `CSS1Compat`（标准模式） or `BackCompat`（混杂模式）\n        - document.head  类似 document.body\n    - document.charset / document.defaultCharset\n    - data-x 自定义数据\n        - dataset 访问自定义属性\n    - 插入标记\n        - innerHTML\n        - outerHTML\n        - insertAdjacentHTML('beforebegin', 'elementHTML')\n            - 第一个参数必须是： beforebegin  beforeend  afterbegin  afterend\n\n    >  在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性\n\n## BOM\n\n- window\n\n    js中的全局对象。\n    - 窗口位置\n\n        浏览器窗口相对于屏幕左/上边的距离：\n\n        window.screenLeft / screenX\n\n        window.screenTop / screenY\n    - 窗口大小\n\n        页面视图区的大小：\n        window.innerHeight / innerWidth\n\n        浏览器窗口本身的大小：\n        window.outerHeight / outerWidth\n\n        页面视口的大小：\n        document.body.clientHeight / clientWidth\n\n        布局视口的大小：\n        document.documentElement.clientHeight / clientWidth\n\n        屏幕的像素宽 / 高度：\n        screen.width / height\n\n- location\n\n    与当前 url 相关的一些信息。window.location 与 document.location指向同一个对象。\n    - hash\n    - host  服务器名称+端口号\n    - hostname  服务器名称\n    - port  端口号\n    - href\n    - pathname\n    - protocol\n    - search\n\n    - location.replace()\n    - location.assign()\n\n- navigator\n\n    - userAgent\n- screen\n\n    保存于客户端显示器相关的一些信息。\n\n- history\n    - history.go()\n\n        参数：`正负数`表示前进 or 后退，`字符串`表示跳转的 url\n    - history.back()    后退一页\n    - history.forward()     前进一页\n\n \n","slug":"js-basic-2","published":1,"updated":"2018-02-05T16:36:29.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s70000a9ms6r8iao1xv","content":"<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->\n<a id=\"more\"></a>\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let’s start ·-·-·-·-·-·-·-·-·-</div>\n\n\n\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><p>事件流描述的是从页面中接收事件的顺序。</p>\n<ul>\n<li>事件冒泡：IE8及以下</li>\n<li>事件捕获：IE9及以上、其它主流浏览器</li>\n</ul>\n<p>DOM事件流：事件捕获阶段、处于目标阶段、事件冒泡阶段  （IE8及以下不支持</p>\n<h3 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h3><p>处理事件的函数叫做事件处理程序。</p>\n<ul>\n<li><p>HTML 事件处理程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;myBtn&quot; value=&quot;Click Me&quot; onclick=&quot;alert(&apos;hello world&apos;)&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0级 事件处理程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;myBtn&apos;)</span><br><span class=\"line\">btn.onclick = function () &#123;</span><br><span class=\"line\">    alert(&apos;Clicked&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2级 事件处理程序</p>\n<p>  可以添加多个，按添加的顺序执行。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;myBtn&apos;) btn.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">    alert(this.id)</span><br><span class=\"line\">&#125;, false)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IE 事件处理程序</p>\n<p>  可以添加多个，按相反的顺序执行。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(&apos;onclick&apos;, function () &#123;</span><br><span class=\"line\">    alert(&apos;Clicked&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跨浏览器的事件处理程序</p>\n<p>  使用能力检测来判断。</p>\n</li>\n</ul>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>事件处理程序默认的参数叫做事件对象 event。</p>\n<h4 id=\"事件对象的属性、方法\"><a href=\"#事件对象的属性、方法\" class=\"headerlink\" title=\"事件对象的属性、方法\"></a>事件对象的属性、方法</h4><ul>\n<li><p>DOM 中（通过事件处理程序的参数获得）：</p>\n<ul>\n<li><code>bubbles</code>  事件是否冒泡</li>\n<li><code>cancleable</code>    是否可以取消事件的默认行为</li>\n<li><code>defaultPrevented</code>  为 true 表示已经调用了<code>preventDefault()</code> DOM3级事件中新增</li>\n<li><code>trusted</code>  为 true 表示浏览器生成的，为 false 表示 js 触发的</li>\n<li><p><code>type</code>    事件类型</p>\n</li>\n<li><p><code>currentTarget</code>     当前正在处理事件的那个元素，this 始终等于它</p>\n</li>\n<li><code>target</code>   事件的目标</li>\n<li><code>preventDefault()</code>    取消事件的默认行为，cancleable 为 true 时可使用</li>\n<li><code>stopPropagation()</code>   取消事件的进一步捕获或冒泡。bubbles 为 true时可使用</li>\n</ul>\n</li>\n<li>IE 中 （通过<code>window.event 获得</code>）：<ul>\n<li><code>cancleBubble</code>    默认 false。与<code>stopPropagation()</code>作用相同</li>\n<li><code>returnValue</code>     默认 false。与<code>preventDefault()</code>作用相同</li>\n<li><code>type</code>    与<code>target</code>作用相同</li>\n<li><code>srcElement</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><ol>\n<li>UI 事件<ul>\n<li><code>load</code> document window img上可触发</li>\n<li><code>unload</code></li>\n<li><code>resize</code> window 上触发</li>\n<li><code>scroll</code> window 上触发</li>\n<li><code>select</code> <code>&lt;select&gt;</code>上触发</li>\n</ul>\n</li>\n<li>焦点事件<ul>\n<li><code>blur</code></li>\n<li><code>focus</code></li>\n<li><code>focusin</code>  &lt;==&gt; focus</li>\n<li><code>focusout</code>  &lt;==&gt; blur</li>\n</ul>\n</li>\n<li>鼠标与滚轮事件<ul>\n<li><code>click</code></li>\n<li><code>dblclick</code>  触发两次 click 事件</li>\n<li><code>mouseenter</code>  不冒泡</li>\n<li><code>mousemove</code></li>\n<li><code>mouseover</code></li>\n<li><code>mousedown</code></li>\n<li><code>mouseup</code>   与 mousedown 相继触发后才会触发 click</li>\n<li><code>mouseleave</code>  不冒泡</li>\n</ul>\n</li>\n<li>键盘与文本事件<ul>\n<li><code>keydown</code>  按下任意键触发</li>\n<li><code>keypress</code>  按下字符键时触发</li>\n<li><code>keyup</code></li>\n</ul>\n</li>\n<li><p>复合事件</p>\n<p> （基本用不到……</p>\n<ul>\n<li><code>compositionstart</code></li>\n<li><code>compositionupdate</code></li>\n<li><code>compositionend</code></li>\n</ul>\n</li>\n<li>变动事件</li>\n<li>HTML5事件<ul>\n<li><code>contextmenu</code> 右击显示上下文菜单</li>\n<li><code>beforeunload</code></li>\n<li><code>DOMContentLoaded</code>  页面的 DOM 树形成后触发，一般早于 <code>load</code> 事件</li>\n<li><code>readystatechange</code></li>\n<li><code>pageshow</code>/<code>pagehide</code>  ff和 opera 支持前进/后退时使用往返缓存<code>bfcache</code>。pageshow 在load 事件后触发，pagehide 在 unload 事件前触发。</li>\n<li><code>hashchange</code></li>\n</ul>\n</li>\n<li>设备事件<ul>\n<li><code>orientationchange</code>  通过<code>window.orientation</code>获取相关信息</li>\n<li><code>deviceorientation</code>  设备方向改变时触发</li>\n<li><code>devicemotion</code></li>\n</ul>\n</li>\n<li>触摸与手势事件<ul>\n<li>触摸事件<ul>\n<li><code>touchstart</code></li>\n<li><code>touchmove</code></li>\n<li><code>touchend</code></li>\n<li><code>touchcancle</code></li>\n</ul>\n</li>\n<li>手势事件：只有两个手指都触摸到事件的接收容器时才会触发这些事件<ul>\n<li><code>gesturestart</code></li>\n<li><code>gesturechange</code></li>\n<li><code>gestureend</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><ul>\n<li><p>Node</p>\n<p>  节点类型，js 中所有的节点类型都继承自 Node 类型。</p>\n<ul>\n<li>nodeType  节点类型，为常量<ul>\n<li>Node.ELEMENT_NODE(1)</li>\n<li>Node.ATTRIBUTE_NODE(2)</li>\n<li>Node.TEXT_NODE(3)</li>\n<li>Node.CDATA_SECTION_NODE(4)</li>\n<li>Node.ENTITY_REFERENCE_NODE(5)</li>\n<li>Node.ENTITY_NODE(6)</li>\n<li>Node.PROCESSING_INSTRUCTION_NODE(7)</li>\n<li>Node.COMMENT_NODE(8)</li>\n<li>Node.DOCUMENT_NODE(9)</li>\n<li>Node.DOCUMENT_TYPE_NODE(10)</li>\n<li>Node.DOCUMENT_FRAGMENT_NODE(11)</li>\n<li>Node.NOTATION_NODE(12)</li>\n</ul>\n</li>\n<li>nodeName  </li>\n<li>nodeValue</li>\n<li>childNodes  子节点，为 NodeList 对象（类 Array 对象）</li>\n<li>parentNode</li>\n<li>previousSibling / nextSibling</li>\n<li>firstChild / lastChild</li>\n<li>hasChildNodes()</li>\n<li><p>ownerDocument 指向表示整个文档的文档节点</p>\n</li>\n<li><p>appendChild(node) 返回新增的节点，如果参数 node 已是文档的一部分，则从旧位置移动到新位置。</p>\n</li>\n<li>insertBefore(toAppendNode, referNode)  referNode为参照节点，如为 null，结果同 appendChild。</li>\n<li>replaceChild(newNode, toReplacedNode)</li>\n<li>cloneNode(isDeep)</li>\n<li>normalize()  处理文本节点，空则删除，多个合并为一个</li>\n</ul>\n</li>\n<li><p>Document</p>\n<p>  文档类型。document 对象是 HTMLDocument (继承自Document) 的实例，它是 window 对象的一个属性。</p>\n<ul>\n<li><p>访问子节点:</p>\n<ul>\n<li>document.documentElement  </li>\n<li>document.childNodes  (一般有两个值，一个 doctype，一个 html)</li>\n</ul>\n</li>\n<li><p>文档信息</p>\n<ul>\n<li>title</li>\n<li>URL</li>\n<li>domain</li>\n<li>referrer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Element</p>\n<ul>\n<li>getAttribute(‘attrName’)</li>\n<li>setAttribute(‘attrName’, ‘value’)</li>\n<li><p>removeAttribute(‘attrName’)</p>\n</li>\n<li><p>createElement()</p>\n</li>\n</ul>\n</li>\n<li><p>Text</p>\n<ul>\n<li><p>操作节点中的文本</p>\n<ul>\n<li>appendData(‘text’)</li>\n<li>deleteData(offset, count)  从 offset 位置开始删除 count 个字符</li>\n<li>insertData(offset, text)</li>\n<li>replaceData(offset, count, text)</li>\n<li>splitText(offset) 从 offset 位置将当前文本节点分隔为两个文本节点</li>\n</ul>\n</li>\n<li><p>createTextNode(‘text’)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DOM-扩展\"><a href=\"#DOM-扩展\" class=\"headerlink\" title=\"DOM 扩展\"></a>DOM 扩展</h2><ul>\n<li>selectors API<ul>\n<li>querySelector()</li>\n<li>querySelectorAll()</li>\n<li>matchesSelector()</li>\n</ul>\n</li>\n<li><p>html5</p>\n<ul>\n<li>getElementsByClassName()</li>\n<li>classList 返回元素的 class list（类 Array 对象）<ul>\n<li>add(‘className’)</li>\n<li>contains(‘className’)</li>\n<li>remove(‘className’)</li>\n<li>toggle(‘className’)</li>\n</ul>\n</li>\n<li>document.activeElement  返回当前获得焦点的元素</li>\n<li>HTMLDocument<ul>\n<li>document.readyState  返回 <code>loading</code> or  <code>complete</code></li>\n<li>document.compatMode  返回 <code>CSS1Compat</code>（标准模式） or <code>BackCompat</code>（混杂模式）</li>\n<li>document.head  类似 document.body</li>\n</ul>\n</li>\n<li>document.charset / document.defaultCharset</li>\n<li>data-x 自定义数据<ul>\n<li>dataset 访问自定义属性</li>\n</ul>\n</li>\n<li><p>插入标记</p>\n<ul>\n<li>innerHTML</li>\n<li>outerHTML</li>\n<li>insertAdjacentHTML(‘beforebegin’, ‘elementHTML’)<ul>\n<li>第一个参数必须是： beforebegin  beforeend  afterbegin  afterend</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p> 在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><ul>\n<li><p>window</p>\n<p>  js中的全局对象。</p>\n<ul>\n<li><p>窗口位置</p>\n<p>  浏览器窗口相对于屏幕左/上边的距离：</p>\n<p>  window.screenLeft / screenX</p>\n<p>  window.screenTop / screenY</p>\n</li>\n<li><p>窗口大小</p>\n<p>  页面视图区的大小：<br>  window.innerHeight / innerWidth</p>\n<p>  浏览器窗口本身的大小：<br>  window.outerHeight / outerWidth</p>\n<p>  页面视口的大小：<br>  document.body.clientHeight / clientWidth</p>\n<p>  布局视口的大小：<br>  document.documentElement.clientHeight / clientWidth</p>\n<p>  屏幕的像素宽 / 高度：<br>  screen.width / height</p>\n</li>\n</ul>\n</li>\n<li><p>location</p>\n<p>  与当前 url 相关的一些信息。window.location 与 document.location指向同一个对象。</p>\n<ul>\n<li>hash</li>\n<li>host  服务器名称+端口号</li>\n<li>hostname  服务器名称</li>\n<li>port  端口号</li>\n<li>href</li>\n<li>pathname</li>\n<li>protocol</li>\n<li><p>search</p>\n</li>\n<li><p>location.replace()</p>\n</li>\n<li>location.assign()</li>\n</ul>\n</li>\n<li><p>navigator</p>\n<ul>\n<li>userAgent</li>\n</ul>\n</li>\n<li><p>screen</p>\n<p>  保存于客户端显示器相关的一些信息。</p>\n</li>\n<li><p>history</p>\n<ul>\n<li><p>history.go()</p>\n<p>  参数：<code>正负数</code>表示前进 or 后退，<code>字符串</code>表示跳转的 url</p>\n</li>\n<li>history.back()    后退一页</li>\n<li>history.forward()     前进一页</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->","more":"<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let’s start ·-·-·-·-·-·-·-·-·-</div>\n\n\n\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><p>事件流描述的是从页面中接收事件的顺序。</p>\n<ul>\n<li>事件冒泡：IE8及以下</li>\n<li>事件捕获：IE9及以上、其它主流浏览器</li>\n</ul>\n<p>DOM事件流：事件捕获阶段、处于目标阶段、事件冒泡阶段  （IE8及以下不支持</p>\n<h3 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h3><p>处理事件的函数叫做事件处理程序。</p>\n<ul>\n<li><p>HTML 事件处理程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;myBtn&quot; value=&quot;Click Me&quot; onclick=&quot;alert(&apos;hello world&apos;)&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0级 事件处理程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;myBtn&apos;)</span><br><span class=\"line\">btn.onclick = function () &#123;</span><br><span class=\"line\">    alert(&apos;Clicked&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2级 事件处理程序</p>\n<p>  可以添加多个，按添加的顺序执行。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;myBtn&apos;) btn.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">    alert(this.id)</span><br><span class=\"line\">&#125;, false)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IE 事件处理程序</p>\n<p>  可以添加多个，按相反的顺序执行。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(&apos;onclick&apos;, function () &#123;</span><br><span class=\"line\">    alert(&apos;Clicked&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跨浏览器的事件处理程序</p>\n<p>  使用能力检测来判断。</p>\n</li>\n</ul>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>事件处理程序默认的参数叫做事件对象 event。</p>\n<h4 id=\"事件对象的属性、方法\"><a href=\"#事件对象的属性、方法\" class=\"headerlink\" title=\"事件对象的属性、方法\"></a>事件对象的属性、方法</h4><ul>\n<li><p>DOM 中（通过事件处理程序的参数获得）：</p>\n<ul>\n<li><code>bubbles</code>  事件是否冒泡</li>\n<li><code>cancleable</code>    是否可以取消事件的默认行为</li>\n<li><code>defaultPrevented</code>  为 true 表示已经调用了<code>preventDefault()</code> DOM3级事件中新增</li>\n<li><code>trusted</code>  为 true 表示浏览器生成的，为 false 表示 js 触发的</li>\n<li><p><code>type</code>    事件类型</p>\n</li>\n<li><p><code>currentTarget</code>     当前正在处理事件的那个元素，this 始终等于它</p>\n</li>\n<li><code>target</code>   事件的目标</li>\n<li><code>preventDefault()</code>    取消事件的默认行为，cancleable 为 true 时可使用</li>\n<li><code>stopPropagation()</code>   取消事件的进一步捕获或冒泡。bubbles 为 true时可使用</li>\n</ul>\n</li>\n<li>IE 中 （通过<code>window.event 获得</code>）：<ul>\n<li><code>cancleBubble</code>    默认 false。与<code>stopPropagation()</code>作用相同</li>\n<li><code>returnValue</code>     默认 false。与<code>preventDefault()</code>作用相同</li>\n<li><code>type</code>    与<code>target</code>作用相同</li>\n<li><code>srcElement</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><ol>\n<li>UI 事件<ul>\n<li><code>load</code> document window img上可触发</li>\n<li><code>unload</code></li>\n<li><code>resize</code> window 上触发</li>\n<li><code>scroll</code> window 上触发</li>\n<li><code>select</code> <code>&lt;select&gt;</code>上触发</li>\n</ul>\n</li>\n<li>焦点事件<ul>\n<li><code>blur</code></li>\n<li><code>focus</code></li>\n<li><code>focusin</code>  &lt;==&gt; focus</li>\n<li><code>focusout</code>  &lt;==&gt; blur</li>\n</ul>\n</li>\n<li>鼠标与滚轮事件<ul>\n<li><code>click</code></li>\n<li><code>dblclick</code>  触发两次 click 事件</li>\n<li><code>mouseenter</code>  不冒泡</li>\n<li><code>mousemove</code></li>\n<li><code>mouseover</code></li>\n<li><code>mousedown</code></li>\n<li><code>mouseup</code>   与 mousedown 相继触发后才会触发 click</li>\n<li><code>mouseleave</code>  不冒泡</li>\n</ul>\n</li>\n<li>键盘与文本事件<ul>\n<li><code>keydown</code>  按下任意键触发</li>\n<li><code>keypress</code>  按下字符键时触发</li>\n<li><code>keyup</code></li>\n</ul>\n</li>\n<li><p>复合事件</p>\n<p> （基本用不到……</p>\n<ul>\n<li><code>compositionstart</code></li>\n<li><code>compositionupdate</code></li>\n<li><code>compositionend</code></li>\n</ul>\n</li>\n<li>变动事件</li>\n<li>HTML5事件<ul>\n<li><code>contextmenu</code> 右击显示上下文菜单</li>\n<li><code>beforeunload</code></li>\n<li><code>DOMContentLoaded</code>  页面的 DOM 树形成后触发，一般早于 <code>load</code> 事件</li>\n<li><code>readystatechange</code></li>\n<li><code>pageshow</code>/<code>pagehide</code>  ff和 opera 支持前进/后退时使用往返缓存<code>bfcache</code>。pageshow 在load 事件后触发，pagehide 在 unload 事件前触发。</li>\n<li><code>hashchange</code></li>\n</ul>\n</li>\n<li>设备事件<ul>\n<li><code>orientationchange</code>  通过<code>window.orientation</code>获取相关信息</li>\n<li><code>deviceorientation</code>  设备方向改变时触发</li>\n<li><code>devicemotion</code></li>\n</ul>\n</li>\n<li>触摸与手势事件<ul>\n<li>触摸事件<ul>\n<li><code>touchstart</code></li>\n<li><code>touchmove</code></li>\n<li><code>touchend</code></li>\n<li><code>touchcancle</code></li>\n</ul>\n</li>\n<li>手势事件：只有两个手指都触摸到事件的接收容器时才会触发这些事件<ul>\n<li><code>gesturestart</code></li>\n<li><code>gesturechange</code></li>\n<li><code>gestureend</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><ul>\n<li><p>Node</p>\n<p>  节点类型，js 中所有的节点类型都继承自 Node 类型。</p>\n<ul>\n<li>nodeType  节点类型，为常量<ul>\n<li>Node.ELEMENT_NODE(1)</li>\n<li>Node.ATTRIBUTE_NODE(2)</li>\n<li>Node.TEXT_NODE(3)</li>\n<li>Node.CDATA_SECTION_NODE(4)</li>\n<li>Node.ENTITY_REFERENCE_NODE(5)</li>\n<li>Node.ENTITY_NODE(6)</li>\n<li>Node.PROCESSING_INSTRUCTION_NODE(7)</li>\n<li>Node.COMMENT_NODE(8)</li>\n<li>Node.DOCUMENT_NODE(9)</li>\n<li>Node.DOCUMENT_TYPE_NODE(10)</li>\n<li>Node.DOCUMENT_FRAGMENT_NODE(11)</li>\n<li>Node.NOTATION_NODE(12)</li>\n</ul>\n</li>\n<li>nodeName  </li>\n<li>nodeValue</li>\n<li>childNodes  子节点，为 NodeList 对象（类 Array 对象）</li>\n<li>parentNode</li>\n<li>previousSibling / nextSibling</li>\n<li>firstChild / lastChild</li>\n<li>hasChildNodes()</li>\n<li><p>ownerDocument 指向表示整个文档的文档节点</p>\n</li>\n<li><p>appendChild(node) 返回新增的节点，如果参数 node 已是文档的一部分，则从旧位置移动到新位置。</p>\n</li>\n<li>insertBefore(toAppendNode, referNode)  referNode为参照节点，如为 null，结果同 appendChild。</li>\n<li>replaceChild(newNode, toReplacedNode)</li>\n<li>cloneNode(isDeep)</li>\n<li>normalize()  处理文本节点，空则删除，多个合并为一个</li>\n</ul>\n</li>\n<li><p>Document</p>\n<p>  文档类型。document 对象是 HTMLDocument (继承自Document) 的实例，它是 window 对象的一个属性。</p>\n<ul>\n<li><p>访问子节点:</p>\n<ul>\n<li>document.documentElement  </li>\n<li>document.childNodes  (一般有两个值，一个 doctype，一个 html)</li>\n</ul>\n</li>\n<li><p>文档信息</p>\n<ul>\n<li>title</li>\n<li>URL</li>\n<li>domain</li>\n<li>referrer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Element</p>\n<ul>\n<li>getAttribute(‘attrName’)</li>\n<li>setAttribute(‘attrName’, ‘value’)</li>\n<li><p>removeAttribute(‘attrName’)</p>\n</li>\n<li><p>createElement()</p>\n</li>\n</ul>\n</li>\n<li><p>Text</p>\n<ul>\n<li><p>操作节点中的文本</p>\n<ul>\n<li>appendData(‘text’)</li>\n<li>deleteData(offset, count)  从 offset 位置开始删除 count 个字符</li>\n<li>insertData(offset, text)</li>\n<li>replaceData(offset, count, text)</li>\n<li>splitText(offset) 从 offset 位置将当前文本节点分隔为两个文本节点</li>\n</ul>\n</li>\n<li><p>createTextNode(‘text’)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DOM-扩展\"><a href=\"#DOM-扩展\" class=\"headerlink\" title=\"DOM 扩展\"></a>DOM 扩展</h2><ul>\n<li>selectors API<ul>\n<li>querySelector()</li>\n<li>querySelectorAll()</li>\n<li>matchesSelector()</li>\n</ul>\n</li>\n<li><p>html5</p>\n<ul>\n<li>getElementsByClassName()</li>\n<li>classList 返回元素的 class list（类 Array 对象）<ul>\n<li>add(‘className’)</li>\n<li>contains(‘className’)</li>\n<li>remove(‘className’)</li>\n<li>toggle(‘className’)</li>\n</ul>\n</li>\n<li>document.activeElement  返回当前获得焦点的元素</li>\n<li>HTMLDocument<ul>\n<li>document.readyState  返回 <code>loading</code> or  <code>complete</code></li>\n<li>document.compatMode  返回 <code>CSS1Compat</code>（标准模式） or <code>BackCompat</code>（混杂模式）</li>\n<li>document.head  类似 document.body</li>\n</ul>\n</li>\n<li>document.charset / document.defaultCharset</li>\n<li>data-x 自定义数据<ul>\n<li>dataset 访问自定义属性</li>\n</ul>\n</li>\n<li><p>插入标记</p>\n<ul>\n<li>innerHTML</li>\n<li>outerHTML</li>\n<li>insertAdjacentHTML(‘beforebegin’, ‘elementHTML’)<ul>\n<li>第一个参数必须是： beforebegin  beforeend  afterbegin  afterend</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p> 在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><ul>\n<li><p>window</p>\n<p>  js中的全局对象。</p>\n<ul>\n<li><p>窗口位置</p>\n<p>  浏览器窗口相对于屏幕左/上边的距离：</p>\n<p>  window.screenLeft / screenX</p>\n<p>  window.screenTop / screenY</p>\n</li>\n<li><p>窗口大小</p>\n<p>  页面视图区的大小：<br>  window.innerHeight / innerWidth</p>\n<p>  浏览器窗口本身的大小：<br>  window.outerHeight / outerWidth</p>\n<p>  页面视口的大小：<br>  document.body.clientHeight / clientWidth</p>\n<p>  布局视口的大小：<br>  document.documentElement.clientHeight / clientWidth</p>\n<p>  屏幕的像素宽 / 高度：<br>  screen.width / height</p>\n</li>\n</ul>\n</li>\n<li><p>location</p>\n<p>  与当前 url 相关的一些信息。window.location 与 document.location指向同一个对象。</p>\n<ul>\n<li>hash</li>\n<li>host  服务器名称+端口号</li>\n<li>hostname  服务器名称</li>\n<li>port  端口号</li>\n<li>href</li>\n<li>pathname</li>\n<li>protocol</li>\n<li><p>search</p>\n</li>\n<li><p>location.replace()</p>\n</li>\n<li>location.assign()</li>\n</ul>\n</li>\n<li><p>navigator</p>\n<ul>\n<li>userAgent</li>\n</ul>\n</li>\n<li><p>screen</p>\n<p>  保存于客户端显示器相关的一些信息。</p>\n</li>\n<li><p>history</p>\n<ul>\n<li><p>history.go()</p>\n<p>  参数：<code>正负数</code>表示前进 or 后退，<code>字符串</code>表示跳转的 url</p>\n</li>\n<li>history.back()    后退一页</li>\n<li>history.forward()     前进一页</li>\n</ul>\n</li>\n</ul>"},{"title":"JS 基础 (上)","date":"2017-09-06T03:00:00.000Z","toc":true,"_content":"\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->\n\n<!-- more -->\n\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let's start ·-·-·-·-·-·-·-·-·-</div>\n\n## 数据类型\n\n5种基本数据类型：undefined、null、String、Boolean、Number\n\n1种引用数据类型：Object\n\nes6 新增：Symbol\n \n### 数据类型知识点\n\n-  判断类型\n\n    判断基础类型：typeof\n\n    判断引用类型：\n    - instanceof\n    - constructor：除了 undefined 和 null 均可以用此判断出类型，缺点是可以被修改\n    - Object.prototype.toString.call(a)\n    ```\n    Object.prototype.toString.call({})  // \"[object Object]\"\n    Object.prototype.toString.call([])  // \"[object Array]\"\n    Object.prototype.toString.call(/^\\d$/)  // \"[object RegExp]\"\n    ```\n\n- undefined\n\n    对未声明的变量使用 `typeof` 返回 `undefined`。\n\n    为区分“未声明”与“未初始化”推荐显式声明变量，没有必要将变量显式声明为 undefined。\n\n- null\n\n    null意为“空对象”，`typeof null` 返回 `object`。\n\n    由于 `null==undefined` 为 `true`，为区分类型，因此当一个变量意在保存对象但还没保存时，可显式声明为 null。\n\n- number\n\n    包括数值、NaN、 Infinity。\n\n    `NaN==NaN` 返回 false\n\n    - Math 对象\n        - `Math.ceil()`    向上舍入（变大）\n        - `Math.round()`    四舍五入\n        - `Math.floor()`    向下舍入（变小）\n\n    - Number.prototype.toFixed()\n        - `num.toFixed(2)`    在数值上调用，返回string（常用于价格等的舍入）\n \n### 数据类型转换\n\n一张图看懂格式转换：\n\n![一张图看懂格式转换](/img/js_basic20170906/format.png)\n\n易错点在这里：\n\n- 转换为数值\n\n    - Number()  /  +\n\n        `undefined`:  NaN\n\n        `null`:  0\n\n        `boolean`:  0/1\n\n        `string`:  \"\"->0, \"1.2\"->1.2,  \"123string\"->NaN\n\n        `object`: 先调用valueOf()，没有的话调用toString()\n\n    - parseInt('string',  进制)  按进制解析字符串\n\n    - parseFloat('string')  始终按十进制解析字符串\n\n- 转换为字符串\n\n    `toString()`，除 undefined、null 外其它值都有此方法\n\n    `num.toString(基数)` 表示转换为对应进制的值，默认为10\n \n## 作用域、闭包、this\n\n- 作用域\n\n    js中没有块级作用域，而是函数级作用域。\n\n- 作用域链\n\n    每个函数都有自己的执行环境，当代码在一个环境中执行时，会创建变量对象的作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。\n\n    每个作用域是一个执行上下文环境，整体遵循`栈`的规则。\n\n    从`全局执行环境`开始，按照包含关系压入栈内，每个作用域只能访问到当前和被包含的环境的变量，而不能访问到它包含的作用域内的变量。\n\n    一个函数执行完毕后，它所生成的执行环境出栈，并且被自动销毁。当然这是最理想的情况，有时函数执行结束后，还不能将其执行环境销毁，就是下面要说的闭包了。\n\n- 闭包\n\n    闭包是指有权访问另一个函数作用域中的变量的函数。\n\n    主要两种情况：函数作为返回值、函数作为参数传递\n\n    - 函数作为返回值\n\n        ```\n        function fun () {\n            var n = 100\n\n            return function (x) {\n                return x > n ? x : n\n            }\n        }\n\n        var f = fun()\n        f()  // 100\n        f(200)  // 200\n        ```\n\n    - 函数作为参数传递\n\n- this\n    this的值取决于调用的模式。\n\n    js中有4种调用模式：构造函数调用、方法调用、函数调用、apply调用\n\n    > 方法：函数作为对象中的属性时叫做方法\n\n    - 构造函数调用\n\n        构造函数中的 this 指代的是：即将通过此函数 new 出来的对象\n\n        ```\n        function Fun () {\n            this.name = 'fun'\n            console.log(this)\n        }\n\n        new Fun()  // Fun {name: \"fun\"}\n        Fun()  // Window {stop: function, open: function, alert: function, confirm: function, prompt: function…}\n        ```\n\n    - 方法调用\n\n        方法作对象的一个属性被调用时，方法中的 this 指向该对象。\n\n        ```\n        var name = 'deshan'\n        var obj = {\n            name: 'zhenzhu',\n            getName: function () {\n                return this.name\n            }\n        }\n\n        obj.getName() // 'zhenzhu'\n\n        var getName = obj.getName\n        getName()  // 'deshan'\n        ```\n\n    - 函数调用\n\n        普通函数中的 this 指向 window 喽\n\n    - apply 调用\n\n        一个函数被 apply/call 调用时，函数中的 this 指向第一个参数对象。\n\n        Nothing to say.\n\n## 面向对象、原型链\n\n### 原型 prototype\n\n函数是对象，而对象是属性的集合，js 默认给每一个函数赋予原型属性 —— 即 prototype，它是个对象。prototype 对象默认有个 constructor 属性。\n\n```\nfunction Fun () {}\nFun.name = 'fun'\nFun.toString = function () {\n    return 'This is Fun function'\n}\n\nvar fun = new Fun()\nfun.__proto__ === Fun.prototype  // true\n```\n\n> 1. 每个函数默认有 `prototype` 属性\n> 2. 每个对象默认有 `__proto__` 属性\n> 3. 对象的 `__proto__` 指向 创建该对象的函数的 `prototype`\n\n根据这3条分析出上段代码的原型如下图：\n<span style=\"color: #e2e2e2; font-size: 12px\">(ノへ￣、)捂脸   看起来好乱……<span>\n\n![原型链](/img/js_basic20170906/prototype.jpg)\n\n\n### 面向对象\n\n工厂模式创建的对象，类型无法被识别；\n\n构造函数创建的对象，函数内部 this 下的方法对于每个实例来说都是重新创建的；\n\nprototype 中的属性和方法 为 该类型的所有实例共享，因此可以将 类 共享的属性和方法添加到 prototype 对象中；\n\n而对象属性值一般不共享，因此常用来自定义类型的方式是：构造函数与 prototype 组合使用。\n\n```\nfunction Animal () {\n    this.name = 'animal'\n    this.age = 10\n}\n\nAnimal.prototype.getName = function () {\n    return this.name\n}\n```\n\n### 继承\n\njs 中的继承主要是通过原型链实现的，利用原型让一个引用类型继承另一个引用类型的属性和方法。\n\n```\nfunction Animal () {\n    this.name = 'animal'\n    this.age = 10\n    this.places = ['home', 'school']\n}\n\nAnimal.prototype.getName = function () {\n    return this.name\n}\n\nfunction Cat () {\n    Animal.call(this)  // 解决属性为对象时父子类不能隔离的情况\n    this.color = 'black'\n}\nCat.prototype = new Animal()  // 实现继承\nCat.prototype.constructor = Cat   // 将 constructor 指回子类\nCat.prototype.getColor = function () {\n    return this.color\n}\n```\n \n\n## 参考\n\n- [《JavaScript高级程序设计》](https://book.douban.com/subject/10546125/)\n\n- [深入理解javascript原型和闭包](http://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n","source":"_posts/js-basic.md","raw":"---\ntitle: JS 基础 (上)\ndate: 2017-09-06 11:00:00\ncategories: front-end\ntags: javascript\ntoc: true\n---\n\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->\n\n<!-- more -->\n\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let's start ·-·-·-·-·-·-·-·-·-</div>\n\n## 数据类型\n\n5种基本数据类型：undefined、null、String、Boolean、Number\n\n1种引用数据类型：Object\n\nes6 新增：Symbol\n \n### 数据类型知识点\n\n-  判断类型\n\n    判断基础类型：typeof\n\n    判断引用类型：\n    - instanceof\n    - constructor：除了 undefined 和 null 均可以用此判断出类型，缺点是可以被修改\n    - Object.prototype.toString.call(a)\n    ```\n    Object.prototype.toString.call({})  // \"[object Object]\"\n    Object.prototype.toString.call([])  // \"[object Array]\"\n    Object.prototype.toString.call(/^\\d$/)  // \"[object RegExp]\"\n    ```\n\n- undefined\n\n    对未声明的变量使用 `typeof` 返回 `undefined`。\n\n    为区分“未声明”与“未初始化”推荐显式声明变量，没有必要将变量显式声明为 undefined。\n\n- null\n\n    null意为“空对象”，`typeof null` 返回 `object`。\n\n    由于 `null==undefined` 为 `true`，为区分类型，因此当一个变量意在保存对象但还没保存时，可显式声明为 null。\n\n- number\n\n    包括数值、NaN、 Infinity。\n\n    `NaN==NaN` 返回 false\n\n    - Math 对象\n        - `Math.ceil()`    向上舍入（变大）\n        - `Math.round()`    四舍五入\n        - `Math.floor()`    向下舍入（变小）\n\n    - Number.prototype.toFixed()\n        - `num.toFixed(2)`    在数值上调用，返回string（常用于价格等的舍入）\n \n### 数据类型转换\n\n一张图看懂格式转换：\n\n![一张图看懂格式转换](/img/js_basic20170906/format.png)\n\n易错点在这里：\n\n- 转换为数值\n\n    - Number()  /  +\n\n        `undefined`:  NaN\n\n        `null`:  0\n\n        `boolean`:  0/1\n\n        `string`:  \"\"->0, \"1.2\"->1.2,  \"123string\"->NaN\n\n        `object`: 先调用valueOf()，没有的话调用toString()\n\n    - parseInt('string',  进制)  按进制解析字符串\n\n    - parseFloat('string')  始终按十进制解析字符串\n\n- 转换为字符串\n\n    `toString()`，除 undefined、null 外其它值都有此方法\n\n    `num.toString(基数)` 表示转换为对应进制的值，默认为10\n \n## 作用域、闭包、this\n\n- 作用域\n\n    js中没有块级作用域，而是函数级作用域。\n\n- 作用域链\n\n    每个函数都有自己的执行环境，当代码在一个环境中执行时，会创建变量对象的作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。\n\n    每个作用域是一个执行上下文环境，整体遵循`栈`的规则。\n\n    从`全局执行环境`开始，按照包含关系压入栈内，每个作用域只能访问到当前和被包含的环境的变量，而不能访问到它包含的作用域内的变量。\n\n    一个函数执行完毕后，它所生成的执行环境出栈，并且被自动销毁。当然这是最理想的情况，有时函数执行结束后，还不能将其执行环境销毁，就是下面要说的闭包了。\n\n- 闭包\n\n    闭包是指有权访问另一个函数作用域中的变量的函数。\n\n    主要两种情况：函数作为返回值、函数作为参数传递\n\n    - 函数作为返回值\n\n        ```\n        function fun () {\n            var n = 100\n\n            return function (x) {\n                return x > n ? x : n\n            }\n        }\n\n        var f = fun()\n        f()  // 100\n        f(200)  // 200\n        ```\n\n    - 函数作为参数传递\n\n- this\n    this的值取决于调用的模式。\n\n    js中有4种调用模式：构造函数调用、方法调用、函数调用、apply调用\n\n    > 方法：函数作为对象中的属性时叫做方法\n\n    - 构造函数调用\n\n        构造函数中的 this 指代的是：即将通过此函数 new 出来的对象\n\n        ```\n        function Fun () {\n            this.name = 'fun'\n            console.log(this)\n        }\n\n        new Fun()  // Fun {name: \"fun\"}\n        Fun()  // Window {stop: function, open: function, alert: function, confirm: function, prompt: function…}\n        ```\n\n    - 方法调用\n\n        方法作对象的一个属性被调用时，方法中的 this 指向该对象。\n\n        ```\n        var name = 'deshan'\n        var obj = {\n            name: 'zhenzhu',\n            getName: function () {\n                return this.name\n            }\n        }\n\n        obj.getName() // 'zhenzhu'\n\n        var getName = obj.getName\n        getName()  // 'deshan'\n        ```\n\n    - 函数调用\n\n        普通函数中的 this 指向 window 喽\n\n    - apply 调用\n\n        一个函数被 apply/call 调用时，函数中的 this 指向第一个参数对象。\n\n        Nothing to say.\n\n## 面向对象、原型链\n\n### 原型 prototype\n\n函数是对象，而对象是属性的集合，js 默认给每一个函数赋予原型属性 —— 即 prototype，它是个对象。prototype 对象默认有个 constructor 属性。\n\n```\nfunction Fun () {}\nFun.name = 'fun'\nFun.toString = function () {\n    return 'This is Fun function'\n}\n\nvar fun = new Fun()\nfun.__proto__ === Fun.prototype  // true\n```\n\n> 1. 每个函数默认有 `prototype` 属性\n> 2. 每个对象默认有 `__proto__` 属性\n> 3. 对象的 `__proto__` 指向 创建该对象的函数的 `prototype`\n\n根据这3条分析出上段代码的原型如下图：\n<span style=\"color: #e2e2e2; font-size: 12px\">(ノへ￣、)捂脸   看起来好乱……<span>\n\n![原型链](/img/js_basic20170906/prototype.jpg)\n\n\n### 面向对象\n\n工厂模式创建的对象，类型无法被识别；\n\n构造函数创建的对象，函数内部 this 下的方法对于每个实例来说都是重新创建的；\n\nprototype 中的属性和方法 为 该类型的所有实例共享，因此可以将 类 共享的属性和方法添加到 prototype 对象中；\n\n而对象属性值一般不共享，因此常用来自定义类型的方式是：构造函数与 prototype 组合使用。\n\n```\nfunction Animal () {\n    this.name = 'animal'\n    this.age = 10\n}\n\nAnimal.prototype.getName = function () {\n    return this.name\n}\n```\n\n### 继承\n\njs 中的继承主要是通过原型链实现的，利用原型让一个引用类型继承另一个引用类型的属性和方法。\n\n```\nfunction Animal () {\n    this.name = 'animal'\n    this.age = 10\n    this.places = ['home', 'school']\n}\n\nAnimal.prototype.getName = function () {\n    return this.name\n}\n\nfunction Cat () {\n    Animal.call(this)  // 解决属性为对象时父子类不能隔离的情况\n    this.color = 'black'\n}\nCat.prototype = new Animal()  // 实现继承\nCat.prototype.constructor = Cat   // 将 constructor 指回子类\nCat.prototype.getColor = function () {\n    return this.color\n}\n```\n \n\n## 参考\n\n- [《JavaScript高级程序设计》](https://book.douban.com/subject/10546125/)\n\n- [深入理解javascript原型和闭包](http://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n","slug":"js-basic","published":1,"updated":"2018-02-05T16:36:29.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s74000b9ms6o2ltnl9s","content":"<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->\n<a id=\"more\"></a>\n<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let’s start ·-·-·-·-·-·-·-·-·-</div>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>5种基本数据类型：undefined、null、String、Boolean、Number</p>\n<p>1种引用数据类型：Object</p>\n<p>es6 新增：Symbol</p>\n<h3 id=\"数据类型知识点\"><a href=\"#数据类型知识点\" class=\"headerlink\" title=\"数据类型知识点\"></a>数据类型知识点</h3><ul>\n<li><p>判断类型</p>\n<p> 判断基础类型：typeof</p>\n<p> 判断引用类型：</p>\n<ul>\n<li>instanceof</li>\n<li>constructor：除了 undefined 和 null 均可以用此判断出类型，缺点是可以被修改</li>\n<li>Object.prototype.toString.call(a)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(&#123;&#125;)  // &quot;[object Object]&quot;</span><br><span class=\"line\">Object.prototype.toString.call([])  // &quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(/^\\d$/)  // &quot;[object RegExp]&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>undefined</p>\n<p>  对未声明的变量使用 <code>typeof</code> 返回 <code>undefined</code>。</p>\n<p>  为区分“未声明”与“未初始化”推荐显式声明变量，没有必要将变量显式声明为 undefined。</p>\n</li>\n<li><p>null</p>\n<p>  null意为“空对象”，<code>typeof null</code> 返回 <code>object</code>。</p>\n<p>  由于 <code>null==undefined</code> 为 <code>true</code>，为区分类型，因此当一个变量意在保存对象但还没保存时，可显式声明为 null。</p>\n</li>\n<li><p>number</p>\n<p>  包括数值、NaN、 Infinity。</p>\n<p>  <code>NaN==NaN</code> 返回 false</p>\n<ul>\n<li><p>Math 对象</p>\n<ul>\n<li><code>Math.ceil()</code>    向上舍入（变大）</li>\n<li><code>Math.round()</code>    四舍五入</li>\n<li><code>Math.floor()</code>    向下舍入（变小）</li>\n</ul>\n</li>\n<li><p>Number.prototype.toFixed()</p>\n<ul>\n<li><code>num.toFixed(2)</code>    在数值上调用，返回string（常用于价格等的舍入）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p>一张图看懂格式转换：</p>\n<p><img src=\"/img/js_basic20170906/format.png\" alt=\"一张图看懂格式转换\"></p>\n<p>易错点在这里：</p>\n<ul>\n<li><p>转换为数值</p>\n<ul>\n<li><p>Number()  /  +</p>\n<p>  <code>undefined</code>:  NaN</p>\n<p>  <code>null</code>:  0</p>\n<p>  <code>boolean</code>:  0/1</p>\n<p>  <code>string</code>:  “”-&gt;0, “1.2”-&gt;1.2,  “123string”-&gt;NaN</p>\n<p>  <code>object</code>: 先调用valueOf()，没有的话调用toString()</p>\n</li>\n<li><p>parseInt(‘string’,  进制)  按进制解析字符串</p>\n</li>\n<li><p>parseFloat(‘string’)  始终按十进制解析字符串</p>\n</li>\n</ul>\n</li>\n<li><p>转换为字符串</p>\n<p>  <code>toString()</code>，除 undefined、null 外其它值都有此方法</p>\n<p>  <code>num.toString(基数)</code> 表示转换为对应进制的值，默认为10</p>\n</li>\n</ul>\n<h2 id=\"作用域、闭包、this\"><a href=\"#作用域、闭包、this\" class=\"headerlink\" title=\"作用域、闭包、this\"></a>作用域、闭包、this</h2><ul>\n<li><p>作用域</p>\n<p>  js中没有块级作用域，而是函数级作用域。</p>\n</li>\n<li><p>作用域链</p>\n<p>  每个函数都有自己的执行环境，当代码在一个环境中执行时，会创建变量对象的作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。</p>\n<p>  每个作用域是一个执行上下文环境，整体遵循<code>栈</code>的规则。</p>\n<p>  从<code>全局执行环境</code>开始，按照包含关系压入栈内，每个作用域只能访问到当前和被包含的环境的变量，而不能访问到它包含的作用域内的变量。</p>\n<p>  一个函数执行完毕后，它所生成的执行环境出栈，并且被自动销毁。当然这是最理想的情况，有时函数执行结束后，还不能将其执行环境销毁，就是下面要说的闭包了。</p>\n</li>\n<li><p>闭包</p>\n<p>  闭包是指有权访问另一个函数作用域中的变量的函数。</p>\n<p>  主要两种情况：函数作为返回值、函数作为参数传递</p>\n<ul>\n<li><p>函数作为返回值</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun () &#123;</span><br><span class=\"line\">    var n = 100</span><br><span class=\"line\"></span><br><span class=\"line\">    return function (x) &#123;</span><br><span class=\"line\">        return x &gt; n ? x : n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var f = fun()</span><br><span class=\"line\">f()  // 100</span><br><span class=\"line\">f(200)  // 200</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数作为参数传递</p>\n</li>\n</ul>\n</li>\n<li><p>this<br>  this的值取决于调用的模式。</p>\n<p>  js中有4种调用模式：构造函数调用、方法调用、函数调用、apply调用</p>\n<blockquote>\n<p>方法：函数作为对象中的属性时叫做方法</p>\n</blockquote>\n<ul>\n<li><p>构造函数调用</p>\n<p>  构造函数中的 this 指代的是：即将通过此函数 new 出来的对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Fun () &#123;</span><br><span class=\"line\">    this.name = &apos;fun&apos;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Fun()  // Fun &#123;name: &quot;fun&quot;&#125;</span><br><span class=\"line\">Fun()  // Window &#123;stop: function, open: function, alert: function, confirm: function, prompt: function…&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法调用</p>\n<p>  方法作对象的一个属性被调用时，方法中的 this 指向该对象。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &apos;deshan&apos;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    name: &apos;zhenzhu&apos;,</span><br><span class=\"line\">    getName: function () &#123;</span><br><span class=\"line\">        return this.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.getName() // &apos;zhenzhu&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">var getName = obj.getName</span><br><span class=\"line\">getName()  // &apos;deshan&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数调用</p>\n<p>  普通函数中的 this 指向 window 喽</p>\n</li>\n<li><p>apply 调用</p>\n<p>  一个函数被 apply/call 调用时，函数中的 this 指向第一个参数对象。</p>\n<p>  Nothing to say.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"面向对象、原型链\"><a href=\"#面向对象、原型链\" class=\"headerlink\" title=\"面向对象、原型链\"></a>面向对象、原型链</h2><h3 id=\"原型-prototype\"><a href=\"#原型-prototype\" class=\"headerlink\" title=\"原型 prototype\"></a>原型 prototype</h3><p>函数是对象，而对象是属性的集合，js 默认给每一个函数赋予原型属性 —— 即 prototype，它是个对象。prototype 对象默认有个 constructor 属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Fun () &#123;&#125;</span><br><span class=\"line\">Fun.name = &apos;fun&apos;</span><br><span class=\"line\">Fun.toString = function () &#123;</span><br><span class=\"line\">    return &apos;This is Fun function&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var fun = new Fun()</span><br><span class=\"line\">fun.__proto__ === Fun.prototype  // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>每个函数默认有 <code>prototype</code> 属性</li>\n<li>每个对象默认有 <code>__proto__</code> 属性</li>\n<li>对象的 <code>__proto__</code> 指向 创建该对象的函数的 <code>prototype</code></li>\n</ol>\n</blockquote>\n<p>根据这3条分析出上段代码的原型如下图：<br><span style=\"color: #e2e2e2; font-size: 12px\">(ノへ￣、)捂脸   看起来好乱……<span></span></span></p>\n<p><img src=\"/img/js_basic20170906/prototype.jpg\" alt=\"原型链\"></p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>工厂模式创建的对象，类型无法被识别；</p>\n<p>构造函数创建的对象，函数内部 this 下的方法对于每个实例来说都是重新创建的；</p>\n<p>prototype 中的属性和方法 为 该类型的所有实例共享，因此可以将 类 共享的属性和方法添加到 prototype 对象中；</p>\n<p>而对象属性值一般不共享，因此常用来自定义类型的方式是：构造函数与 prototype 组合使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Animal () &#123;</span><br><span class=\"line\">    this.name = &apos;animal&apos;</span><br><span class=\"line\">    this.age = 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.getName = function () &#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>js 中的继承主要是通过原型链实现的，利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Animal () &#123;</span><br><span class=\"line\">    this.name = &apos;animal&apos;</span><br><span class=\"line\">    this.age = 10</span><br><span class=\"line\">    this.places = [&apos;home&apos;, &apos;school&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.getName = function () &#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Cat () &#123;</span><br><span class=\"line\">    Animal.call(this)  // 解决属性为对象时父子类不能隔离的情况</span><br><span class=\"line\">    this.color = &apos;black&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype = new Animal()  // 实现继承</span><br><span class=\"line\">Cat.prototype.constructor = Cat   // 将 constructor 指回子类</span><br><span class=\"line\">Cat.prototype.getColor = function () &#123;</span><br><span class=\"line\">    return this.color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://book.douban.com/subject/10546125/\" target=\"_blank\" rel=\"noopener\">《JavaScript高级程序设计》</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· agenda ·-·-·-·-·-·-·-·-·-</div>\n\n<!-- toc -->","more":"<div style=\"text-align: center\">-·-·-·-·-·-·-·-·-· Let’s start ·-·-·-·-·-·-·-·-·-</div>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>5种基本数据类型：undefined、null、String、Boolean、Number</p>\n<p>1种引用数据类型：Object</p>\n<p>es6 新增：Symbol</p>\n<h3 id=\"数据类型知识点\"><a href=\"#数据类型知识点\" class=\"headerlink\" title=\"数据类型知识点\"></a>数据类型知识点</h3><ul>\n<li><p>判断类型</p>\n<p> 判断基础类型：typeof</p>\n<p> 判断引用类型：</p>\n<ul>\n<li>instanceof</li>\n<li>constructor：除了 undefined 和 null 均可以用此判断出类型，缺点是可以被修改</li>\n<li>Object.prototype.toString.call(a)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(&#123;&#125;)  // &quot;[object Object]&quot;</span><br><span class=\"line\">Object.prototype.toString.call([])  // &quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(/^\\d$/)  // &quot;[object RegExp]&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>undefined</p>\n<p>  对未声明的变量使用 <code>typeof</code> 返回 <code>undefined</code>。</p>\n<p>  为区分“未声明”与“未初始化”推荐显式声明变量，没有必要将变量显式声明为 undefined。</p>\n</li>\n<li><p>null</p>\n<p>  null意为“空对象”，<code>typeof null</code> 返回 <code>object</code>。</p>\n<p>  由于 <code>null==undefined</code> 为 <code>true</code>，为区分类型，因此当一个变量意在保存对象但还没保存时，可显式声明为 null。</p>\n</li>\n<li><p>number</p>\n<p>  包括数值、NaN、 Infinity。</p>\n<p>  <code>NaN==NaN</code> 返回 false</p>\n<ul>\n<li><p>Math 对象</p>\n<ul>\n<li><code>Math.ceil()</code>    向上舍入（变大）</li>\n<li><code>Math.round()</code>    四舍五入</li>\n<li><code>Math.floor()</code>    向下舍入（变小）</li>\n</ul>\n</li>\n<li><p>Number.prototype.toFixed()</p>\n<ul>\n<li><code>num.toFixed(2)</code>    在数值上调用，返回string（常用于价格等的舍入）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p>一张图看懂格式转换：</p>\n<p><img src=\"/img/js_basic20170906/format.png\" alt=\"一张图看懂格式转换\"></p>\n<p>易错点在这里：</p>\n<ul>\n<li><p>转换为数值</p>\n<ul>\n<li><p>Number()  /  +</p>\n<p>  <code>undefined</code>:  NaN</p>\n<p>  <code>null</code>:  0</p>\n<p>  <code>boolean</code>:  0/1</p>\n<p>  <code>string</code>:  “”-&gt;0, “1.2”-&gt;1.2,  “123string”-&gt;NaN</p>\n<p>  <code>object</code>: 先调用valueOf()，没有的话调用toString()</p>\n</li>\n<li><p>parseInt(‘string’,  进制)  按进制解析字符串</p>\n</li>\n<li><p>parseFloat(‘string’)  始终按十进制解析字符串</p>\n</li>\n</ul>\n</li>\n<li><p>转换为字符串</p>\n<p>  <code>toString()</code>，除 undefined、null 外其它值都有此方法</p>\n<p>  <code>num.toString(基数)</code> 表示转换为对应进制的值，默认为10</p>\n</li>\n</ul>\n<h2 id=\"作用域、闭包、this\"><a href=\"#作用域、闭包、this\" class=\"headerlink\" title=\"作用域、闭包、this\"></a>作用域、闭包、this</h2><ul>\n<li><p>作用域</p>\n<p>  js中没有块级作用域，而是函数级作用域。</p>\n</li>\n<li><p>作用域链</p>\n<p>  每个函数都有自己的执行环境，当代码在一个环境中执行时，会创建变量对象的作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。</p>\n<p>  每个作用域是一个执行上下文环境，整体遵循<code>栈</code>的规则。</p>\n<p>  从<code>全局执行环境</code>开始，按照包含关系压入栈内，每个作用域只能访问到当前和被包含的环境的变量，而不能访问到它包含的作用域内的变量。</p>\n<p>  一个函数执行完毕后，它所生成的执行环境出栈，并且被自动销毁。当然这是最理想的情况，有时函数执行结束后，还不能将其执行环境销毁，就是下面要说的闭包了。</p>\n</li>\n<li><p>闭包</p>\n<p>  闭包是指有权访问另一个函数作用域中的变量的函数。</p>\n<p>  主要两种情况：函数作为返回值、函数作为参数传递</p>\n<ul>\n<li><p>函数作为返回值</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun () &#123;</span><br><span class=\"line\">    var n = 100</span><br><span class=\"line\"></span><br><span class=\"line\">    return function (x) &#123;</span><br><span class=\"line\">        return x &gt; n ? x : n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var f = fun()</span><br><span class=\"line\">f()  // 100</span><br><span class=\"line\">f(200)  // 200</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数作为参数传递</p>\n</li>\n</ul>\n</li>\n<li><p>this<br>  this的值取决于调用的模式。</p>\n<p>  js中有4种调用模式：构造函数调用、方法调用、函数调用、apply调用</p>\n<blockquote>\n<p>方法：函数作为对象中的属性时叫做方法</p>\n</blockquote>\n<ul>\n<li><p>构造函数调用</p>\n<p>  构造函数中的 this 指代的是：即将通过此函数 new 出来的对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Fun () &#123;</span><br><span class=\"line\">    this.name = &apos;fun&apos;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Fun()  // Fun &#123;name: &quot;fun&quot;&#125;</span><br><span class=\"line\">Fun()  // Window &#123;stop: function, open: function, alert: function, confirm: function, prompt: function…&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法调用</p>\n<p>  方法作对象的一个属性被调用时，方法中的 this 指向该对象。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &apos;deshan&apos;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    name: &apos;zhenzhu&apos;,</span><br><span class=\"line\">    getName: function () &#123;</span><br><span class=\"line\">        return this.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.getName() // &apos;zhenzhu&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">var getName = obj.getName</span><br><span class=\"line\">getName()  // &apos;deshan&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数调用</p>\n<p>  普通函数中的 this 指向 window 喽</p>\n</li>\n<li><p>apply 调用</p>\n<p>  一个函数被 apply/call 调用时，函数中的 this 指向第一个参数对象。</p>\n<p>  Nothing to say.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"面向对象、原型链\"><a href=\"#面向对象、原型链\" class=\"headerlink\" title=\"面向对象、原型链\"></a>面向对象、原型链</h2><h3 id=\"原型-prototype\"><a href=\"#原型-prototype\" class=\"headerlink\" title=\"原型 prototype\"></a>原型 prototype</h3><p>函数是对象，而对象是属性的集合，js 默认给每一个函数赋予原型属性 —— 即 prototype，它是个对象。prototype 对象默认有个 constructor 属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Fun () &#123;&#125;</span><br><span class=\"line\">Fun.name = &apos;fun&apos;</span><br><span class=\"line\">Fun.toString = function () &#123;</span><br><span class=\"line\">    return &apos;This is Fun function&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var fun = new Fun()</span><br><span class=\"line\">fun.__proto__ === Fun.prototype  // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>每个函数默认有 <code>prototype</code> 属性</li>\n<li>每个对象默认有 <code>__proto__</code> 属性</li>\n<li>对象的 <code>__proto__</code> 指向 创建该对象的函数的 <code>prototype</code></li>\n</ol>\n</blockquote>\n<p>根据这3条分析出上段代码的原型如下图：<br><span style=\"color: #e2e2e2; font-size: 12px\">(ノへ￣、)捂脸   看起来好乱……<span></span></span></p>\n<p><img src=\"/img/js_basic20170906/prototype.jpg\" alt=\"原型链\"></p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>工厂模式创建的对象，类型无法被识别；</p>\n<p>构造函数创建的对象，函数内部 this 下的方法对于每个实例来说都是重新创建的；</p>\n<p>prototype 中的属性和方法 为 该类型的所有实例共享，因此可以将 类 共享的属性和方法添加到 prototype 对象中；</p>\n<p>而对象属性值一般不共享，因此常用来自定义类型的方式是：构造函数与 prototype 组合使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Animal () &#123;</span><br><span class=\"line\">    this.name = &apos;animal&apos;</span><br><span class=\"line\">    this.age = 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.getName = function () &#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>js 中的继承主要是通过原型链实现的，利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Animal () &#123;</span><br><span class=\"line\">    this.name = &apos;animal&apos;</span><br><span class=\"line\">    this.age = 10</span><br><span class=\"line\">    this.places = [&apos;home&apos;, &apos;school&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.getName = function () &#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Cat () &#123;</span><br><span class=\"line\">    Animal.call(this)  // 解决属性为对象时父子类不能隔离的情况</span><br><span class=\"line\">    this.color = &apos;black&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype = new Animal()  // 实现继承</span><br><span class=\"line\">Cat.prototype.constructor = Cat   // 将 constructor 指回子类</span><br><span class=\"line\">Cat.prototype.getColor = function () &#123;</span><br><span class=\"line\">    return this.color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://book.douban.com/subject/10546125/\" target=\"_blank\" rel=\"noopener\">《JavaScript高级程序设计》</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包</a></p>\n</li>\n</ul>"},{"title":"js之闭包","date":"2017-08-17T08:20:56.000Z","_content":"\n米福镇楼 科科^_^\n\n![米福镇楼](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1487524457&di=f1af0fb7bbdb7f4254d0627f7f61f772&imgtype=jpg&er=1&src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg)\n\n其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。\n<!--more-->\n\n对闭包的理解基本可以分这几个点来思考：y\n> * 什么是闭包\n> * 闭包的基本形式\n> * 闭包的作用是什么\n\n### 一、什么是闭包\n**闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染**。\n\n我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：**一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值** 举个栗子：\n```\nfunction a(){\n    var b = 0;\n    console.log(++b);\n}\na(); // 1\na(); // 1  第二次调用a()结果还是1\n```\n第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果\n\n也遵从作用域链的原则，即：**函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。**再举个栗子：\n```\nfunction a() {\n\tvar b = 1\n\tfunction c(){\n\t    console.log(b);\n\t }\n\t c();\n}\na(); //  1   \n```\n 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。\n\n\n闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说**闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)**\n注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：\n```\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n        console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n```\n这里就一目了然了，**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**（这个例子下面也会用到 ）。\n\n\n### 二、闭包的基本形式\n**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**\n\n从这句话可以明白常见的闭包的基本形式为：\n　****两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。****例如：\n```\nfunction a(){\n    var b = 1;\n    return function c(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5    \n.\n.     \n```\n这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。\n\n### 三、闭包应用中的作用\n\n> * 外部作用域获取内部作用域变量的值\n> * 保存内部变量的值到一个独立的环境中\n\n在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。\n##### 1）外部作用域获取内部作用域变量的值\n在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：\n```\nfunction a() {\n\tvar c = 1;\n\treturn function b() {\n\t\tconsole.log(c);\n\t}\n}\nvar d = a();\nd(); // 1  执行外部的函数d便获得了作用域a中的变量\n```\n例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。\n\n##### 2） 保存内部变量的值到一个独立的环境中\n由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。\n\n例子1：\n\n```\n//使用闭包前\nfunction a(){\n\tvar b = 1;\n\tb+=1;\n\tconsole.log(b);\n}　\na(); // 2\na(); // 2 \na(); // 2\na(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收\n.\n.\n.     \n```\n使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。\n```\n//使用闭包后\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n.\n.     \n```\n使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。\n\n例子2：\n```\n//使用闭包前\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = function(){\n        console.log(i);\n    }\n}\narr[0]() ; // 8\narr[1]() ;// 8\narr[2]() ;// 8    每次结果都为8 \n..\n```\n使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。\n```\n//使用闭包后\nvar arr = [];\nfor(var i=0;i<8;i++){\n    (function(i){\n        arr[i] = function(){\n            console.log(i);\n        }\n    })(i)\n}\narr[0](); //0\narr[1](); //1\narr[2](); //2\n...\narr[7](); //7\n```\n使用闭包后，此时已经把要`return`出去的`function(){  console.log(i); }`直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：\n```\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = (function(i){\n        return function(){\n            console.log(i);\n        }\n    })(i)\n}\n```\n再进一步改写：\n```\nvar arr = [];\nfunction a(i){\n    return function(){\n        console.log(i);\n    }\n}\nfor(var i=0;i<8;i++){\n    arr[i] = a(i);\n}\n```\n此时一目了然，这也就是我们常说的`立即执行函数（IIFE）`中的闭包。\n\n闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的... 囧。\n\n#### -END-","source":"_posts/js之闭包.md","raw":"---\ntitle: js之闭包\ndate: 2017-08-17 16:20:56\ntag: js\ncategory: js\n\n---\n\n米福镇楼 科科^_^\n\n![米福镇楼](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1487524457&di=f1af0fb7bbdb7f4254d0627f7f61f772&imgtype=jpg&er=1&src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg)\n\n其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。\n<!--more-->\n\n对闭包的理解基本可以分这几个点来思考：y\n> * 什么是闭包\n> * 闭包的基本形式\n> * 闭包的作用是什么\n\n### 一、什么是闭包\n**闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染**。\n\n我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：**一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值** 举个栗子：\n```\nfunction a(){\n    var b = 0;\n    console.log(++b);\n}\na(); // 1\na(); // 1  第二次调用a()结果还是1\n```\n第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果\n\n也遵从作用域链的原则，即：**函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。**再举个栗子：\n```\nfunction a() {\n\tvar b = 1\n\tfunction c(){\n\t    console.log(b);\n\t }\n\t c();\n}\na(); //  1   \n```\n 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。\n\n\n闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说**闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)**\n注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：\n```\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n        console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n```\n这里就一目了然了，**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**（这个例子下面也会用到 ）。\n\n\n### 二、闭包的基本形式\n**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**\n\n从这句话可以明白常见的闭包的基本形式为：\n　****两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。****例如：\n```\nfunction a(){\n    var b = 1;\n    return function c(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5    \n.\n.     \n```\n这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。\n\n### 三、闭包应用中的作用\n\n> * 外部作用域获取内部作用域变量的值\n> * 保存内部变量的值到一个独立的环境中\n\n在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。\n##### 1）外部作用域获取内部作用域变量的值\n在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：\n```\nfunction a() {\n\tvar c = 1;\n\treturn function b() {\n\t\tconsole.log(c);\n\t}\n}\nvar d = a();\nd(); // 1  执行外部的函数d便获得了作用域a中的变量\n```\n例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。\n\n##### 2） 保存内部变量的值到一个独立的环境中\n由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。\n\n例子1：\n\n```\n//使用闭包前\nfunction a(){\n\tvar b = 1;\n\tb+=1;\n\tconsole.log(b);\n}　\na(); // 2\na(); // 2 \na(); // 2\na(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收\n.\n.\n.     \n```\n使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。\n```\n//使用闭包后\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n.\n.     \n```\n使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。\n\n例子2：\n```\n//使用闭包前\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = function(){\n        console.log(i);\n    }\n}\narr[0]() ; // 8\narr[1]() ;// 8\narr[2]() ;// 8    每次结果都为8 \n..\n```\n使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。\n```\n//使用闭包后\nvar arr = [];\nfor(var i=0;i<8;i++){\n    (function(i){\n        arr[i] = function(){\n            console.log(i);\n        }\n    })(i)\n}\narr[0](); //0\narr[1](); //1\narr[2](); //2\n...\narr[7](); //7\n```\n使用闭包后，此时已经把要`return`出去的`function(){  console.log(i); }`直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：\n```\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = (function(i){\n        return function(){\n            console.log(i);\n        }\n    })(i)\n}\n```\n再进一步改写：\n```\nvar arr = [];\nfunction a(i){\n    return function(){\n        console.log(i);\n    }\n}\nfor(var i=0;i<8;i++){\n    arr[i] = a(i);\n}\n```\n此时一目了然，这也就是我们常说的`立即执行函数（IIFE）`中的闭包。\n\n闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的... 囧。\n\n#### -END-","slug":"js之闭包","published":1,"updated":"2018-02-05T16:36:29.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s7i000f9ms6pk2fyjg8","content":"<p>米福镇楼 科科^_^</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1487524457&amp;di=f1af0fb7bbdb7f4254d0627f7f61f772&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg\" alt=\"米福镇楼\"></p>\n<p>其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。<br><a id=\"more\"></a></p>\n<p>对闭包的理解基本可以分这几个点来思考：y</p>\n<blockquote>\n<ul>\n<li>什么是闭包</li>\n<li>闭包的基本形式</li>\n<li>闭包的作用是什么</li>\n</ul>\n</blockquote>\n<h3 id=\"一、什么是闭包\"><a href=\"#一、什么是闭包\" class=\"headerlink\" title=\"一、什么是闭包\"></a>一、什么是闭包</h3><p><strong>闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染</strong>。</p>\n<p>我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：<strong>一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值</strong> 举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 0;</span><br><span class=\"line\">    console.log(++b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a(); // 1</span><br><span class=\"line\">a(); // 1  第二次调用a()结果还是1</span><br></pre></td></tr></table></figure></p>\n<p>第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果</p>\n<p>也遵从作用域链的原则，即：<strong>函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。</strong>再举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">\tvar b = 1</span><br><span class=\"line\">\tfunction c()&#123;</span><br><span class=\"line\">\t    console.log(b);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a(); //  1</span><br></pre></td></tr></table></figure></p>\n<p> 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。</p>\n<p>闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说<strong>闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)</strong><br>注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 1;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        b+=1;</span><br><span class=\"line\">        console.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f = a();</span><br><span class=\"line\">f(); // 2</span><br><span class=\"line\">f(); // 3 </span><br><span class=\"line\">f(); // 4</span><br><span class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</span><br></pre></td></tr></table></figure></p>\n<p>这里就一目了然了，<strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong>（这个例子下面也会用到 ）。</p>\n<h3 id=\"二、闭包的基本形式\"><a href=\"#二、闭包的基本形式\" class=\"headerlink\" title=\"二、闭包的基本形式\"></a>二、闭包的基本形式</h3><p><strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong></p>\n<p>从这句话可以明白常见的闭包的基本形式为：<br>　<strong><strong>两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。</strong></strong>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 1;</span><br><span class=\"line\">    return function c()&#123;</span><br><span class=\"line\">        b+=1;</span><br><span class=\"line\">\t    console.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f = a();</span><br><span class=\"line\">f(); // 2</span><br><span class=\"line\">f(); // 3 </span><br><span class=\"line\">f(); // 4</span><br><span class=\"line\">f(); // 5    </span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure></p>\n<p>这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。</p>\n<h3 id=\"三、闭包应用中的作用\"><a href=\"#三、闭包应用中的作用\" class=\"headerlink\" title=\"三、闭包应用中的作用\"></a>三、闭包应用中的作用</h3><blockquote>\n<ul>\n<li>外部作用域获取内部作用域变量的值</li>\n<li>保存内部变量的值到一个独立的环境中</li>\n</ul>\n</blockquote>\n<p>在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。</p>\n<h5 id=\"1）外部作用域获取内部作用域变量的值\"><a href=\"#1）外部作用域获取内部作用域变量的值\" class=\"headerlink\" title=\"1）外部作用域获取内部作用域变量的值\"></a>1）外部作用域获取内部作用域变量的值</h5><p>在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">\tvar c = 1;</span><br><span class=\"line\">\treturn function b() &#123;</span><br><span class=\"line\">\t\tconsole.log(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var d = a();</span><br><span class=\"line\">d(); // 1  执行外部的函数d便获得了作用域a中的变量</span><br></pre></td></tr></table></figure></p>\n<p>例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。</p>\n<h5 id=\"2）-保存内部变量的值到一个独立的环境中\"><a href=\"#2）-保存内部变量的值到一个独立的环境中\" class=\"headerlink\" title=\"2） 保存内部变量的值到一个独立的环境中\"></a>2） 保存内部变量的值到一个独立的环境中</h5><p>由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。</p>\n<p>例子1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包前</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">\tvar b = 1;</span><br><span class=\"line\">\tb+=1;</span><br><span class=\"line\">\tconsole.log(b);</span><br><span class=\"line\">&#125;　</span><br><span class=\"line\">a(); // 2</span><br><span class=\"line\">a(); // 2 </span><br><span class=\"line\">a(); // 2</span><br><span class=\"line\">a(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p>使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包后</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 1;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        b+=1;</span><br><span class=\"line\">\t    console.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f = a();</span><br><span class=\"line\">f(); // 2</span><br><span class=\"line\">f(); // 3 </span><br><span class=\"line\">f(); // 4</span><br><span class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure></p>\n<p>使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。</p>\n<p>例子2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包前</span><br><span class=\"line\">var arr = [];</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    arr[i] = function()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr[0]() ; // 8</span><br><span class=\"line\">arr[1]() ;// 8</span><br><span class=\"line\">arr[2]() ;// 8    每次结果都为8 </span><br><span class=\"line\">..</span><br></pre></td></tr></table></figure></p>\n<p>使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包后</span><br><span class=\"line\">var arr = [];</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    (function(i)&#123;</span><br><span class=\"line\">        arr[i] = function()&#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr[0](); //0</span><br><span class=\"line\">arr[1](); //1</span><br><span class=\"line\">arr[2](); //2</span><br><span class=\"line\">...</span><br><span class=\"line\">arr[7](); //7</span><br></pre></td></tr></table></figure></p>\n<p>使用闭包后，此时已经把要<code>return</code>出去的<code>function(){  console.log(i); }</code>直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    arr[i] = (function(i)&#123;</span><br><span class=\"line\">        return function()&#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再进一步改写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">function a(i)&#123;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    arr[i] = a(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时一目了然，这也就是我们常说的<code>立即执行函数（IIFE）</code>中的闭包。</p>\n<p>闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的… 囧。</p>\n<h4 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"-END-\"></a>-END-</h4>","site":{"data":{}},"excerpt":"<p>米福镇楼 科科^_^</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1487524457&amp;di=f1af0fb7bbdb7f4254d0627f7f61f772&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg\" alt=\"米福镇楼\"></p>\n<p>其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。<br>","more":"</p>\n<p>对闭包的理解基本可以分这几个点来思考：y</p>\n<blockquote>\n<ul>\n<li>什么是闭包</li>\n<li>闭包的基本形式</li>\n<li>闭包的作用是什么</li>\n</ul>\n</blockquote>\n<h3 id=\"一、什么是闭包\"><a href=\"#一、什么是闭包\" class=\"headerlink\" title=\"一、什么是闭包\"></a>一、什么是闭包</h3><p><strong>闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染</strong>。</p>\n<p>我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：<strong>一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值</strong> 举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 0;</span><br><span class=\"line\">    console.log(++b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a(); // 1</span><br><span class=\"line\">a(); // 1  第二次调用a()结果还是1</span><br></pre></td></tr></table></figure></p>\n<p>第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果</p>\n<p>也遵从作用域链的原则，即：<strong>函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。</strong>再举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">\tvar b = 1</span><br><span class=\"line\">\tfunction c()&#123;</span><br><span class=\"line\">\t    console.log(b);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a(); //  1</span><br></pre></td></tr></table></figure></p>\n<p> 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。</p>\n<p>闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说<strong>闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)</strong><br>注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 1;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        b+=1;</span><br><span class=\"line\">        console.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f = a();</span><br><span class=\"line\">f(); // 2</span><br><span class=\"line\">f(); // 3 </span><br><span class=\"line\">f(); // 4</span><br><span class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</span><br></pre></td></tr></table></figure></p>\n<p>这里就一目了然了，<strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong>（这个例子下面也会用到 ）。</p>\n<h3 id=\"二、闭包的基本形式\"><a href=\"#二、闭包的基本形式\" class=\"headerlink\" title=\"二、闭包的基本形式\"></a>二、闭包的基本形式</h3><p><strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong></p>\n<p>从这句话可以明白常见的闭包的基本形式为：<br>　<strong><strong>两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。</strong></strong>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 1;</span><br><span class=\"line\">    return function c()&#123;</span><br><span class=\"line\">        b+=1;</span><br><span class=\"line\">\t    console.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f = a();</span><br><span class=\"line\">f(); // 2</span><br><span class=\"line\">f(); // 3 </span><br><span class=\"line\">f(); // 4</span><br><span class=\"line\">f(); // 5    </span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure></p>\n<p>这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。</p>\n<h3 id=\"三、闭包应用中的作用\"><a href=\"#三、闭包应用中的作用\" class=\"headerlink\" title=\"三、闭包应用中的作用\"></a>三、闭包应用中的作用</h3><blockquote>\n<ul>\n<li>外部作用域获取内部作用域变量的值</li>\n<li>保存内部变量的值到一个独立的环境中</li>\n</ul>\n</blockquote>\n<p>在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。</p>\n<h5 id=\"1）外部作用域获取内部作用域变量的值\"><a href=\"#1）外部作用域获取内部作用域变量的值\" class=\"headerlink\" title=\"1）外部作用域获取内部作用域变量的值\"></a>1）外部作用域获取内部作用域变量的值</h5><p>在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">\tvar c = 1;</span><br><span class=\"line\">\treturn function b() &#123;</span><br><span class=\"line\">\t\tconsole.log(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var d = a();</span><br><span class=\"line\">d(); // 1  执行外部的函数d便获得了作用域a中的变量</span><br></pre></td></tr></table></figure></p>\n<p>例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。</p>\n<h5 id=\"2）-保存内部变量的值到一个独立的环境中\"><a href=\"#2）-保存内部变量的值到一个独立的环境中\" class=\"headerlink\" title=\"2） 保存内部变量的值到一个独立的环境中\"></a>2） 保存内部变量的值到一个独立的环境中</h5><p>由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。</p>\n<p>例子1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包前</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">\tvar b = 1;</span><br><span class=\"line\">\tb+=1;</span><br><span class=\"line\">\tconsole.log(b);</span><br><span class=\"line\">&#125;　</span><br><span class=\"line\">a(); // 2</span><br><span class=\"line\">a(); // 2 </span><br><span class=\"line\">a(); // 2</span><br><span class=\"line\">a(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p>使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包后</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">    var b = 1;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        b+=1;</span><br><span class=\"line\">\t    console.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f = a();</span><br><span class=\"line\">f(); // 2</span><br><span class=\"line\">f(); // 3 </span><br><span class=\"line\">f(); // 4</span><br><span class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure></p>\n<p>使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。</p>\n<p>例子2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包前</span><br><span class=\"line\">var arr = [];</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    arr[i] = function()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr[0]() ; // 8</span><br><span class=\"line\">arr[1]() ;// 8</span><br><span class=\"line\">arr[2]() ;// 8    每次结果都为8 </span><br><span class=\"line\">..</span><br></pre></td></tr></table></figure></p>\n<p>使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用闭包后</span><br><span class=\"line\">var arr = [];</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    (function(i)&#123;</span><br><span class=\"line\">        arr[i] = function()&#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr[0](); //0</span><br><span class=\"line\">arr[1](); //1</span><br><span class=\"line\">arr[2](); //2</span><br><span class=\"line\">...</span><br><span class=\"line\">arr[7](); //7</span><br></pre></td></tr></table></figure></p>\n<p>使用闭包后，此时已经把要<code>return</code>出去的<code>function(){  console.log(i); }</code>直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    arr[i] = (function(i)&#123;</span><br><span class=\"line\">        return function()&#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再进一步改写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">function a(i)&#123;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(var i=0;i&lt;8;i++)&#123;</span><br><span class=\"line\">    arr[i] = a(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时一目了然，这也就是我们常说的<code>立即执行函数（IIFE）</code>中的闭包。</p>\n<p>闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的… 囧。</p>\n<h4 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"-END-\"></a>-END-</h4>"},{"title":"前端常见布局","date":"2017-03-31T09:00:00.000Z","_content":"\n\n> 1. 单列布局\n> 2. 多列布局\n\n<!-- more -->\n\n\n\n## 单列布局\n\n<p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-center.png\" width=\"300\" style=\"\" /></p>\n\n```\n<!-- html  -->\n<div class=\"parent\">\n    <div class=\"child\">This is content.</div>\n</div>\n```\n\n### 水平居中\n\n```\n// 1. text-align\n// 优点：兼容性好\n// 不足：需要同时设置子元素和父元素\n.parent {\n    text-align: center;\n    .child {\n        display: inline-block;\n    }\n}\n\n// 2. margin\n// 优点：兼容性好\n// 缺点: 需要指定宽度\n.parent {\n    border: 1px solid #03a9f4;\n    .child {\n        width: 120px;\n        margin: 0 auto;\n    }\n}\n\n// 3. table + margin\n// 优点: 只需要对自身进行设置\n// 不足: IE6,7需要调整结构\n.parent {\n    display: table;\n    margin: 0 auto;\n}\n\n// 4. position\n// 不足：兼容性差, IE9及以上可用\n.parent {\n    position: relative;\n    .child {\n        position: absolute;\n        left: 50%;\n        transform: translate(-50%);\n    }\n}\n\n// 5. flex\n// 缺点：兼容性差，如果进行大面积的布局可能会影响效率\n.parent {\n    display: flex;\n    justify-content: center;\n\n    .child {\n        margin: 0 auto;\n    }\n}\n```\n\n### 垂直居中\n```\n// 1. vertical-align + table-cell\n.parent {\n    display: table-cell; // 宽度根据内容决定\n    height: 100px;  \n    vertical-align: middle;\n    border: 1px solid #03a9f4;\n}\n\n// 2. vertical-align + inline-block\n.parent {\n    display: inline-block; // 宽度根据内容决定；若不设置此值，宽度自适应\n    line-height: 200px;\n    vertical-align: middle;\n    border: 1px solid #03a9f4;\n}\n\n// 3. position\n.parent {\n    position: relative;\n    height: 100px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        position: absolute;\n        top: 50%;\n        transform: translate(0, -50%);\n    }\n}\n\n// 4. flex\n.parent {\n    display: flex;\n    align-items: center;\n    height: 100px;\n    border: 1px solid #03a9f4;\n}\n```\n\n### 水平垂直居中\n```\n// 1. table\n.parent {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n    width: 345px;\n    height: 150px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        display: inline-block;\n        border: 1px solid #00bcd4;\n    }\n}\n\n// 2. position\n.parent {\n    position: relative;\n    width: 345px;\n    height: 150px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        border: 1px solid #00bcd4;\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 345px;\n    height: 150px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        border: 1px solid #00bcd4;\n    }\n}\n```\n\n## 多列布局\n\n<p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-layout.png\" width=\"300\" style=\"\" /><img src=\"/img/layout20170317/layout-auto.png\" width=\"300\" style=\"\" /></p>\n\n### 左栏固定宽度，右栏自适应\n\n```\n<!-- html  -->\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"right\">\n        <div class=\"right-fix\">right</div>\n    </div>\n</div>\n\n// less\n.left,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n// 1. float + margin(1)\n.left {\n    float: left;\n    width: 100px;\n}\n.right {\n    margin-left: 300px;\n}\n\n// 2. float + margin(2)\n.left {\n    width: 100px;\n    float: left;\n}\n.right {\n    float: right;\n    width: 100%;\n    margin-left: -100px;\n\n    .right-fix {\n        margin-left: 100px;\n    }\n}\n\n// 3. float + overflow\n.left {\n    width: 100px;\n    float: left;\n}\n.right {\n    overflow: hidden; // 触发bfc模式，浮动无法影响，隔离其他元素，IE6不支持\n}\n// 左侧left设置 margin-left 当作left与right之间的边距，右侧利用overflow:hidden 进行形成bfc模式\n// 如果我们需要将两列设置为等高，可以用下述方法将『背景』设置为等高，其实并不是内容的等高\n.parent {\n    overflow: hidden;\n}\n.left,\n.right {\n    padding-bottom: 9999px;\n    margin-bottom: -9999px;\n}\n\n// 4. table\n.parent {\n    display: table;\n    width: 100%;\n    table-layout: fixed;\n    .left {\n        width: 100px;\n    }\n    .left,\n    .right {\n        display: table-cell;\n    }\n}\n\n// 5. flex\n.parent {\n    display: flex;\n    .left {\n        width: 100px;\n    }\n    .right {\n        flex: 1;\n    }\n}\n```\n\n### 右栏固定宽度，左栏自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"right\">right</div>\n</div>\n\n// less\n.left,\n.right {\n    border: 1px solid #03a9f4;\n}\n.right {\n    width: 100px;\n}\n\n// 1. float + margin\n.left {\n    float: left;\n    width: 100%;\n    margin-right: -100px;\n}\n.right {\n    float: right;\n}\n\n// 2. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    .left,\n    .right {\n        display: table-cell;\n    }\n    .left {\n\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .left {\n        flex: 1\n    }\n}\n```\n\n### 两栏固定宽度，一栏自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"center\">center</div>\n    <div class=\"right\">right</div>\n</div>\n\n.left,\n.center,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n.left,\n.center {\n    width: 50px;\n}\n\n// 1. float\n.left,\n.center{\n    float: left;\n}\n.right {\n    margin-left: 100px;\n}\n\n// 2. float + overflow\n.left,\n.center {\n    float: left;\n}\n.right {\n    overflow: hidden;\n}\n\n// 3. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n\n    .left,\n    .center,\n    .right {\n        display: table-cell;\n    }\n}\n\n// 4. flex\n.parent {\n    display: flex;\n\n    .right {\n        flex: 1;\n    }\n}\n```\n\n\n### 两侧固定宽度，中栏自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"center\">center</div>\n    <div class=\"right\">right</div>\n</div>\n\n// less\n.left,\n.center,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n.left,\n.right {\n    width: 50px;\n}\n\n// 1. float\n.parent {\n    position: relative;\n    overflow: hidden;\n\n    .left {\n        float: left;\n    }\n    .center {\n        position: absolute;\n        left: 50px;\n        right: 50px;\n    }\n    .right {\n        float: right;\n    }\n}\n\n// 2. table\n.parent {\n    display: table;\n    width: 100%;\n    .left,\n    .center,\n    .right {\n        display: table-cell;\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .center {\n        flex: 1;\n    }\n}\n```\n\n### 一列不定宽，一列自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"right\">right</div>\n</div>\n\n.left,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n// 1. float + overflow\n.parent {\n    .left {\n        float: left;\n    }\n    .right {\n        overflow: hidden;\n    }\n}\n\n// 2. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    .left,\n    .right {\n        display: table-cell;\n    }\n    .left {\n        width: 0.1%; // 黑人问号？？？\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .right {\n        flex: 1;\n    }\n}\n```\n\n\n### 多列等分布局\n```\n<div class=\"parent\">\n    <div class=\"column\">column</div>\n    <div class=\"column\">column</div>\n    <div class=\"column\">column</div>\n    <div class=\"column\">column</div>\n</div>\n\n// less\n.column {\n    background-color: #03a9f4;\n    border: 1px solid #fff;\n    box-sizing: border-box;\n}\n\n// 1. float\n.parent {\n    .column {\n        float: left;\n        width: 25%;\n        padding-left: 20px;\n    }\n}\n\n// 2. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    .column {\n        display: table-cell;\n        padding-left: 20px;\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .column {\n        flex: 1;\n    }\n}\n```\n\n### 九宫格布局\n```\n<div class=\"parent\">\n    <div class=\"row\">\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n    </div>\n</div>\n\n// less\n.item {\n    background-color: #03a9f4;\n    border: 1px solid #fff;\n    box-sizing: border-box;\n}\n\n// 1. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n\n    .row {\n        display: table-row;\n\n        .item {\n            display: table-cell;\n            width: 33.3%;\n        }\n    }\n}\n\n// 2. flex\n.parent {\n    display: flex;\n    flex-direction: column;\n\n    .row {\n        display: flex;\n        height: 50px;\n\n        .item {\n            width: 50px;\n        }\n    }\n}\n```\n\n### 全屏布局\n\n```\n<div class=\"parent\">\n    <div class=\"top\">top</div>\n    <div class=\"middle\">\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n    <div class=\"bottom\">bottom</div>\n</div>\n\n// less\n// 1. position\n.parent {\n    position: relative;\n    height: 200px; // 100% 如果相对与body的话直接100%，overflow: hidden\n\n    background-color: #03a9f4;\n    .top {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 30px;\n\n        box-sizing: border-box;\n        border-bottom: 1px solid #fff;\n    }\n    .left {\n        position: absolute;\n        left: 0;\n        top: 30px;\n        bottom: 20px;\n        width: 100px;\n\n        box-sizing: border-box;\n        border-right: 1px solid #fff;\n    }\n    .right {\n        position: absolute;\n        top: 30px;\n        right: 0;\n        bottom: 20px;\n    }\n    .bottom {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 20px;\n\n        box-sizing: border-box;\n        border-top: 1px solid #fff;\n    }\n}\n\n// 2. flex\n.parent {\n    display: flex;\n    flex-direction: column;\n    // height: 200px;\n\n    background-color: #03a9f4;\n    .top {\n\n        box-sizing: border-box;\n        border-bottom: 1px solid #fff;\n    }\n    .middle {\n        display: flex;\n        .left {\n            width: 100px;\n            box-sizing: border-box;\n            border-right: 1px solid #fff;\n        }\n        .right {\n            flex: 1;\n        }\n    }\n\n    .bottom {\n        box-sizing: border-box;\n        border-top: 1px solid #fff;\n    }\n}\n```\n","source":"_posts/layout.md","raw":"title: 前端常见布局\ndate: 2017-03-31 17:00:00\ncategories: front-end\ntags: layout\n---\n\n\n> 1. 单列布局\n> 2. 多列布局\n\n<!-- more -->\n\n\n\n## 单列布局\n\n<p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-center.png\" width=\"300\" style=\"\" /></p>\n\n```\n<!-- html  -->\n<div class=\"parent\">\n    <div class=\"child\">This is content.</div>\n</div>\n```\n\n### 水平居中\n\n```\n// 1. text-align\n// 优点：兼容性好\n// 不足：需要同时设置子元素和父元素\n.parent {\n    text-align: center;\n    .child {\n        display: inline-block;\n    }\n}\n\n// 2. margin\n// 优点：兼容性好\n// 缺点: 需要指定宽度\n.parent {\n    border: 1px solid #03a9f4;\n    .child {\n        width: 120px;\n        margin: 0 auto;\n    }\n}\n\n// 3. table + margin\n// 优点: 只需要对自身进行设置\n// 不足: IE6,7需要调整结构\n.parent {\n    display: table;\n    margin: 0 auto;\n}\n\n// 4. position\n// 不足：兼容性差, IE9及以上可用\n.parent {\n    position: relative;\n    .child {\n        position: absolute;\n        left: 50%;\n        transform: translate(-50%);\n    }\n}\n\n// 5. flex\n// 缺点：兼容性差，如果进行大面积的布局可能会影响效率\n.parent {\n    display: flex;\n    justify-content: center;\n\n    .child {\n        margin: 0 auto;\n    }\n}\n```\n\n### 垂直居中\n```\n// 1. vertical-align + table-cell\n.parent {\n    display: table-cell; // 宽度根据内容决定\n    height: 100px;  \n    vertical-align: middle;\n    border: 1px solid #03a9f4;\n}\n\n// 2. vertical-align + inline-block\n.parent {\n    display: inline-block; // 宽度根据内容决定；若不设置此值，宽度自适应\n    line-height: 200px;\n    vertical-align: middle;\n    border: 1px solid #03a9f4;\n}\n\n// 3. position\n.parent {\n    position: relative;\n    height: 100px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        position: absolute;\n        top: 50%;\n        transform: translate(0, -50%);\n    }\n}\n\n// 4. flex\n.parent {\n    display: flex;\n    align-items: center;\n    height: 100px;\n    border: 1px solid #03a9f4;\n}\n```\n\n### 水平垂直居中\n```\n// 1. table\n.parent {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n    width: 345px;\n    height: 150px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        display: inline-block;\n        border: 1px solid #00bcd4;\n    }\n}\n\n// 2. position\n.parent {\n    position: relative;\n    width: 345px;\n    height: 150px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        border: 1px solid #00bcd4;\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 345px;\n    height: 150px;\n    border: 1px solid #03a9f4;\n\n    .child {\n        border: 1px solid #00bcd4;\n    }\n}\n```\n\n## 多列布局\n\n<p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-layout.png\" width=\"300\" style=\"\" /><img src=\"/img/layout20170317/layout-auto.png\" width=\"300\" style=\"\" /></p>\n\n### 左栏固定宽度，右栏自适应\n\n```\n<!-- html  -->\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"right\">\n        <div class=\"right-fix\">right</div>\n    </div>\n</div>\n\n// less\n.left,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n// 1. float + margin(1)\n.left {\n    float: left;\n    width: 100px;\n}\n.right {\n    margin-left: 300px;\n}\n\n// 2. float + margin(2)\n.left {\n    width: 100px;\n    float: left;\n}\n.right {\n    float: right;\n    width: 100%;\n    margin-left: -100px;\n\n    .right-fix {\n        margin-left: 100px;\n    }\n}\n\n// 3. float + overflow\n.left {\n    width: 100px;\n    float: left;\n}\n.right {\n    overflow: hidden; // 触发bfc模式，浮动无法影响，隔离其他元素，IE6不支持\n}\n// 左侧left设置 margin-left 当作left与right之间的边距，右侧利用overflow:hidden 进行形成bfc模式\n// 如果我们需要将两列设置为等高，可以用下述方法将『背景』设置为等高，其实并不是内容的等高\n.parent {\n    overflow: hidden;\n}\n.left,\n.right {\n    padding-bottom: 9999px;\n    margin-bottom: -9999px;\n}\n\n// 4. table\n.parent {\n    display: table;\n    width: 100%;\n    table-layout: fixed;\n    .left {\n        width: 100px;\n    }\n    .left,\n    .right {\n        display: table-cell;\n    }\n}\n\n// 5. flex\n.parent {\n    display: flex;\n    .left {\n        width: 100px;\n    }\n    .right {\n        flex: 1;\n    }\n}\n```\n\n### 右栏固定宽度，左栏自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"right\">right</div>\n</div>\n\n// less\n.left,\n.right {\n    border: 1px solid #03a9f4;\n}\n.right {\n    width: 100px;\n}\n\n// 1. float + margin\n.left {\n    float: left;\n    width: 100%;\n    margin-right: -100px;\n}\n.right {\n    float: right;\n}\n\n// 2. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    .left,\n    .right {\n        display: table-cell;\n    }\n    .left {\n\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .left {\n        flex: 1\n    }\n}\n```\n\n### 两栏固定宽度，一栏自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"center\">center</div>\n    <div class=\"right\">right</div>\n</div>\n\n.left,\n.center,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n.left,\n.center {\n    width: 50px;\n}\n\n// 1. float\n.left,\n.center{\n    float: left;\n}\n.right {\n    margin-left: 100px;\n}\n\n// 2. float + overflow\n.left,\n.center {\n    float: left;\n}\n.right {\n    overflow: hidden;\n}\n\n// 3. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n\n    .left,\n    .center,\n    .right {\n        display: table-cell;\n    }\n}\n\n// 4. flex\n.parent {\n    display: flex;\n\n    .right {\n        flex: 1;\n    }\n}\n```\n\n\n### 两侧固定宽度，中栏自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"center\">center</div>\n    <div class=\"right\">right</div>\n</div>\n\n// less\n.left,\n.center,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n.left,\n.right {\n    width: 50px;\n}\n\n// 1. float\n.parent {\n    position: relative;\n    overflow: hidden;\n\n    .left {\n        float: left;\n    }\n    .center {\n        position: absolute;\n        left: 50px;\n        right: 50px;\n    }\n    .right {\n        float: right;\n    }\n}\n\n// 2. table\n.parent {\n    display: table;\n    width: 100%;\n    .left,\n    .center,\n    .right {\n        display: table-cell;\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .center {\n        flex: 1;\n    }\n}\n```\n\n### 一列不定宽，一列自适应\n\n```\n<div class=\"parent\">\n    <div class=\"left\">left</div>\n    <div class=\"right\">right</div>\n</div>\n\n.left,\n.right {\n    border: 1px solid #03a9f4;\n}\n\n// 1. float + overflow\n.parent {\n    .left {\n        float: left;\n    }\n    .right {\n        overflow: hidden;\n    }\n}\n\n// 2. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    .left,\n    .right {\n        display: table-cell;\n    }\n    .left {\n        width: 0.1%; // 黑人问号？？？\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .right {\n        flex: 1;\n    }\n}\n```\n\n\n### 多列等分布局\n```\n<div class=\"parent\">\n    <div class=\"column\">column</div>\n    <div class=\"column\">column</div>\n    <div class=\"column\">column</div>\n    <div class=\"column\">column</div>\n</div>\n\n// less\n.column {\n    background-color: #03a9f4;\n    border: 1px solid #fff;\n    box-sizing: border-box;\n}\n\n// 1. float\n.parent {\n    .column {\n        float: left;\n        width: 25%;\n        padding-left: 20px;\n    }\n}\n\n// 2. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    .column {\n        display: table-cell;\n        padding-left: 20px;\n    }\n}\n\n// 3. flex\n.parent {\n    display: flex;\n    .column {\n        flex: 1;\n    }\n}\n```\n\n### 九宫格布局\n```\n<div class=\"parent\">\n    <div class=\"row\">\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n        <div class=\"item\">item</div>\n    </div>\n</div>\n\n// less\n.item {\n    background-color: #03a9f4;\n    border: 1px solid #fff;\n    box-sizing: border-box;\n}\n\n// 1. table\n.parent {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n\n    .row {\n        display: table-row;\n\n        .item {\n            display: table-cell;\n            width: 33.3%;\n        }\n    }\n}\n\n// 2. flex\n.parent {\n    display: flex;\n    flex-direction: column;\n\n    .row {\n        display: flex;\n        height: 50px;\n\n        .item {\n            width: 50px;\n        }\n    }\n}\n```\n\n### 全屏布局\n\n```\n<div class=\"parent\">\n    <div class=\"top\">top</div>\n    <div class=\"middle\">\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n    <div class=\"bottom\">bottom</div>\n</div>\n\n// less\n// 1. position\n.parent {\n    position: relative;\n    height: 200px; // 100% 如果相对与body的话直接100%，overflow: hidden\n\n    background-color: #03a9f4;\n    .top {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 30px;\n\n        box-sizing: border-box;\n        border-bottom: 1px solid #fff;\n    }\n    .left {\n        position: absolute;\n        left: 0;\n        top: 30px;\n        bottom: 20px;\n        width: 100px;\n\n        box-sizing: border-box;\n        border-right: 1px solid #fff;\n    }\n    .right {\n        position: absolute;\n        top: 30px;\n        right: 0;\n        bottom: 20px;\n    }\n    .bottom {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 20px;\n\n        box-sizing: border-box;\n        border-top: 1px solid #fff;\n    }\n}\n\n// 2. flex\n.parent {\n    display: flex;\n    flex-direction: column;\n    // height: 200px;\n\n    background-color: #03a9f4;\n    .top {\n\n        box-sizing: border-box;\n        border-bottom: 1px solid #fff;\n    }\n    .middle {\n        display: flex;\n        .left {\n            width: 100px;\n            box-sizing: border-box;\n            border-right: 1px solid #fff;\n        }\n        .right {\n            flex: 1;\n        }\n    }\n\n    .bottom {\n        box-sizing: border-box;\n        border-top: 1px solid #fff;\n    }\n}\n```\n","slug":"layout","published":1,"updated":"2018-02-05T16:36:29.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s7n000i9ms63aev9l1j","content":"<blockquote>\n<ol>\n<li>单列布局</li>\n<li>多列布局</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"单列布局\"><a href=\"#单列布局\" class=\"headerlink\" title=\"单列布局\"></a>单列布局</h2><p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-center.png\" width=\"300\" style=\"\"></p>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html  --&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;child&quot;&gt;This is content.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. text-align</span><br><span class=\"line\">// 优点：兼容性好</span><br><span class=\"line\">// 不足：需要同时设置子元素和父元素</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. margin</span><br><span class=\"line\">// 优点：兼容性好</span><br><span class=\"line\">// 缺点: 需要指定宽度</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        width: 120px;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. table + margin</span><br><span class=\"line\">// 优点: 只需要对自身进行设置</span><br><span class=\"line\">// 不足: IE6,7需要调整结构</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. position</span><br><span class=\"line\">// 不足：兼容性差, IE9及以上可用</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 50%;</span><br><span class=\"line\">        transform: translate(-50%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. flex</span><br><span class=\"line\">// 缺点：兼容性差，如果进行大面积的布局可能会影响效率</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. vertical-align + table-cell</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table-cell; // 宽度根据内容决定</span><br><span class=\"line\">    height: 100px;  </span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. vertical-align + inline-block</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: inline-block; // 宽度根据内容决定；若不设置此值，宽度自适应</span><br><span class=\"line\">    line-height: 200px;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. position</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        transform: translate(0, -50%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    width: 345px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        border: 1px solid #00bcd4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. position</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    width: 345px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 50%;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        transform: translate(-50%, -50%);</span><br><span class=\"line\">        border: 1px solid #00bcd4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    width: 345px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        border: 1px solid #00bcd4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h2><p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-layout.png\" width=\"300\" style=\"\"><img src=\"/img/layout20170317/layout-auto.png\" width=\"300\" style=\"\"></p>\n\n<h3 id=\"左栏固定宽度，右栏自适应\"><a href=\"#左栏固定宽度，右栏自适应\" class=\"headerlink\" title=\"左栏固定宽度，右栏自适应\"></a>左栏固定宽度，右栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html  --&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;right-fix&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float + margin(1)</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    margin-left: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. float + margin(2)</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-left: -100px;</span><br><span class=\"line\"></span><br><span class=\"line\">    .right-fix &#123;</span><br><span class=\"line\">        margin-left: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. float + overflow</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    overflow: hidden; // 触发bfc模式，浮动无法影响，隔离其他元素，IE6不支持</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 左侧left设置 margin-left 当作left与right之间的边距，右侧利用overflow:hidden 进行形成bfc模式</span><br><span class=\"line\">// 如果我们需要将两列设置为等高，可以用下述方法将『背景』设置为等高，其实并不是内容的等高</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    padding-bottom: 9999px;</span><br><span class=\"line\">    margin-bottom: -9999px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"右栏固定宽度，左栏自适应\"><a href=\"#右栏固定宽度，左栏自适应\" class=\"headerlink\" title=\"右栏固定宽度，左栏自适应\"></a>右栏固定宽度，左栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float + margin</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-right: -100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        flex: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两栏固定宽度，一栏自适应\"><a href=\"#两栏固定宽度，一栏自适应\" class=\"headerlink\" title=\"两栏固定宽度，一栏自适应\"></a>两栏固定宽度，一栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;center&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center &#123;</span><br><span class=\"line\">    width: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    margin-left: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. float + overflow</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\"></span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .center,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\"></span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两侧固定宽度，中栏自适应\"><a href=\"#两侧固定宽度，中栏自适应\" class=\"headerlink\" title=\"两侧固定宽度，中栏自适应\"></a>两侧固定宽度，中栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;center&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    width: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\"></span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .center &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 50px;</span><br><span class=\"line\">        right: 50px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        float: right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .center,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .center &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一列不定宽，一列自适应\"><a href=\"#一列不定宽，一列自适应\" class=\"headerlink\" title=\"一列不定宽，一列自适应\"></a>一列不定宽，一列自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float + overflow</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        width: 0.1%; // 黑人问号？？？</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多列等分布局\"><a href=\"#多列等分布局\" class=\"headerlink\" title=\"多列等分布局\"></a>多列等分布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.column &#123;</span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    border: 1px solid #fff;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    .column &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        padding-left: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .column &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">        padding-left: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .column &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九宫格布局\"><a href=\"#九宫格布局\" class=\"headerlink\" title=\"九宫格布局\"></a>九宫格布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    border: 1px solid #fff;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        display: table-row;</span><br><span class=\"line\"></span><br><span class=\"line\">        .item &#123;</span><br><span class=\"line\">            display: table-cell;</span><br><span class=\"line\">            width: 33.3%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        height: 50px;</span><br><span class=\"line\"></span><br><span class=\"line\">        .item &#123;</span><br><span class=\"line\">            width: 50px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全屏布局\"><a href=\"#全屏布局\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">// 1. position</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    height: 200px; // 100% 如果相对与body的话直接100%，overflow: hidden</span><br><span class=\"line\"></span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    .top &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        height: 30px;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-bottom: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        top: 30px;</span><br><span class=\"line\">        bottom: 20px;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-right: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 30px;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        bottom: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .bottom &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        bottom: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        height: 20px;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-top: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">    // height: 200px;</span><br><span class=\"line\"></span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    .top &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-bottom: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .middle &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        .left &#123;</span><br><span class=\"line\">            width: 100px;</span><br><span class=\"line\">            box-sizing: border-box;</span><br><span class=\"line\">            border-right: 1px solid #fff;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right &#123;</span><br><span class=\"line\">            flex: 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .bottom &#123;</span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-top: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<ol>\n<li>单列布局</li>\n<li>多列布局</li>\n</ol>\n</blockquote>","more":"<h2 id=\"单列布局\"><a href=\"#单列布局\" class=\"headerlink\" title=\"单列布局\"></a>单列布局</h2><p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-center.png\" width=\"300\" style=\"\"></p>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html  --&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;child&quot;&gt;This is content.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. text-align</span><br><span class=\"line\">// 优点：兼容性好</span><br><span class=\"line\">// 不足：需要同时设置子元素和父元素</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. margin</span><br><span class=\"line\">// 优点：兼容性好</span><br><span class=\"line\">// 缺点: 需要指定宽度</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        width: 120px;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. table + margin</span><br><span class=\"line\">// 优点: 只需要对自身进行设置</span><br><span class=\"line\">// 不足: IE6,7需要调整结构</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. position</span><br><span class=\"line\">// 不足：兼容性差, IE9及以上可用</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 50%;</span><br><span class=\"line\">        transform: translate(-50%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. flex</span><br><span class=\"line\">// 缺点：兼容性差，如果进行大面积的布局可能会影响效率</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. vertical-align + table-cell</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table-cell; // 宽度根据内容决定</span><br><span class=\"line\">    height: 100px;  </span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. vertical-align + inline-block</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: inline-block; // 宽度根据内容决定；若不设置此值，宽度自适应</span><br><span class=\"line\">    line-height: 200px;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. position</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        transform: translate(0, -50%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    width: 345px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        border: 1px solid #00bcd4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. position</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    width: 345px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 50%;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        transform: translate(-50%, -50%);</span><br><span class=\"line\">        border: 1px solid #00bcd4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    width: 345px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\"></span><br><span class=\"line\">    .child &#123;</span><br><span class=\"line\">        border: 1px solid #00bcd4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h2><p style=\"text-align: center\"><img src=\"/img/layout20170317/layout-layout.png\" width=\"300\" style=\"\"><img src=\"/img/layout20170317/layout-auto.png\" width=\"300\" style=\"\"></p>\n\n<h3 id=\"左栏固定宽度，右栏自适应\"><a href=\"#左栏固定宽度，右栏自适应\" class=\"headerlink\" title=\"左栏固定宽度，右栏自适应\"></a>左栏固定宽度，右栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html  --&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;right-fix&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float + margin(1)</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    margin-left: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. float + margin(2)</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-left: -100px;</span><br><span class=\"line\"></span><br><span class=\"line\">    .right-fix &#123;</span><br><span class=\"line\">        margin-left: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. float + overflow</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    overflow: hidden; // 触发bfc模式，浮动无法影响，隔离其他元素，IE6不支持</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 左侧left设置 margin-left 当作left与right之间的边距，右侧利用overflow:hidden 进行形成bfc模式</span><br><span class=\"line\">// 如果我们需要将两列设置为等高，可以用下述方法将『背景』设置为等高，其实并不是内容的等高</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    padding-bottom: 9999px;</span><br><span class=\"line\">    margin-bottom: -9999px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"右栏固定宽度，左栏自适应\"><a href=\"#右栏固定宽度，左栏自适应\" class=\"headerlink\" title=\"右栏固定宽度，左栏自适应\"></a>右栏固定宽度，左栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float + margin</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-right: -100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        flex: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两栏固定宽度，一栏自适应\"><a href=\"#两栏固定宽度，一栏自适应\" class=\"headerlink\" title=\"两栏固定宽度，一栏自适应\"></a>两栏固定宽度，一栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;center&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center &#123;</span><br><span class=\"line\">    width: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    margin-left: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. float + overflow</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\"></span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .center,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\"></span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两侧固定宽度，中栏自适应\"><a href=\"#两侧固定宽度，中栏自适应\" class=\"headerlink\" title=\"两侧固定宽度，中栏自适应\"></a>两侧固定宽度，中栏自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;center&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.center,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    width: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\"></span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .center &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 50px;</span><br><span class=\"line\">        right: 50px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        float: right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .center,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .center &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一列不定宽，一列自适应\"><a href=\"#一列不定宽，一列自适应\" class=\"headerlink\" title=\"一列不定宽，一列自适应\"></a>一列不定宽，一列自适应</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">    border: 1px solid #03a9f4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float + overflow</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .left,</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        width: 0.1%; // 黑人问号？？？</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多列等分布局\"><a href=\"#多列等分布局\" class=\"headerlink\" title=\"多列等分布局\"></a>多列等分布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;column&quot;&gt;column&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.column &#123;</span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    border: 1px solid #fff;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. float</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    .column &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        padding-left: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    .column &#123;</span><br><span class=\"line\">        display: table-cell;</span><br><span class=\"line\">        padding-left: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    .column &#123;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九宫格布局\"><a href=\"#九宫格布局\" class=\"headerlink\" title=\"九宫格布局\"></a>九宫格布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;item&quot;&gt;item&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    border: 1px solid #fff;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. table</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    table-layout: fixed;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        display: table-row;</span><br><span class=\"line\"></span><br><span class=\"line\">        .item &#123;</span><br><span class=\"line\">            display: table-cell;</span><br><span class=\"line\">            width: 33.3%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        height: 50px;</span><br><span class=\"line\"></span><br><span class=\"line\">        .item &#123;</span><br><span class=\"line\">            width: 50px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全屏布局\"><a href=\"#全屏布局\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// less</span><br><span class=\"line\">// 1. position</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    height: 200px; // 100% 如果相对与body的话直接100%，overflow: hidden</span><br><span class=\"line\"></span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    .top &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        height: 30px;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-bottom: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        top: 30px;</span><br><span class=\"line\">        bottom: 20px;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-right: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .right &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 30px;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        bottom: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .bottom &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        bottom: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        height: 20px;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-top: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. flex</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">    // height: 200px;</span><br><span class=\"line\"></span><br><span class=\"line\">    background-color: #03a9f4;</span><br><span class=\"line\">    .top &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-bottom: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .middle &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        .left &#123;</span><br><span class=\"line\">            width: 100px;</span><br><span class=\"line\">            box-sizing: border-box;</span><br><span class=\"line\">            border-right: 1px solid #fff;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right &#123;</span><br><span class=\"line\">            flex: 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .bottom &#123;</span><br><span class=\"line\">        box-sizing: border-box;</span><br><span class=\"line\">        border-top: 1px solid #fff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"移动WEB前端开发常用资源","date":"2017-08-18T02:50:58.000Z","_content":"> #### [转]\n\n自己在移动开发中总结和收集的一些常用资源，分享给大家。\n\n<!--more-->\n\n## [](#meta篇 \"meta篇\")meta篇\n\n### [](#1-视窗宽度 \"1.视窗宽度\")1.视窗宽度\n```html\n<meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"/>\n\n```\n其中 `width=device-width` 是设置视窗宽度为设备视窗宽度，还可以固定宽度，例如： `width=640` 则是640px的宽度（常见于微信）；\n\n`initial-scale=1.0` ：设置缩放比例为1.0；\n\n`minimum-scale=1.0` 和 `maximum-scale=1.0` ：最小缩放比例和最大缩放比例；\n\n`user-scalable=no` ：禁止用户自由缩放，`user-scalable` 默认值为 `yes` 。\n\n[ecko_icon alias=”fa-exclamation-triangle”] 提示：刚刚那个是带全部参数的，一般常用的，有 `user-scalable=no` 就不用使用 `minimum-scale=1.0` 和 `maximum-scale=1.0` 来强制禁止缩放了。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\"/>\n```\n\n### [](#2-自动识别格式 \"2.自动识别格式\")2.自动识别格式\n```\n<meta name=\"format-detection\" content=\"telephone=no\"/>\n```\n\n`content` 里面的参数：`telephone=no` 是禁止浏览器自动识别手机号码，`email=no` 是禁止浏览器自动识别Email。\n\n### [](#3-完整模板 \"3.完整模板\")3.完整模板\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\"/>\n<meta name=\"format-detection\" content=\"telephone=no\"/>\n<meta name=\"format-detection\" content=\"email=no\"/>\n```\n\n## [](#CSS篇 \"CSS篇\")CSS篇\n\n```css\nbody {\n    font-family: \"Helvetica Neue\", Helvetica, STHeiTi, sans-serif; /*使用无衬线字体*/\n}\na, img {\n    -webkit-touch-callout: none; /*禁止长按链接与图片弹出菜单*/\n}\nhtml, body {\n    -webkit-user-select: none; /*禁止选中文本*/\n    user-select: none;\n}\nbutton,input,optgroup,select,textarea {\n    -webkit-appearance:none; /*去掉webkit默认的表单样式*/\n}\na,button,input,optgroup,select,textarea {\n    -webkit-tap-highlight-color:rgba(0,0,0,0); /*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/\n}\ninput::-webkit-input-placeholder {\n    color:#ccc; /*修改webkit中input的planceholder样式*/\n}\ninput:focus::-webkit-input-placeholder {\n    color:#f00; /*修改webkit中focus状态下input的planceholder样式*/\n}\nbody {\n    -webkit-text-size-adjust: 100%!important; /*禁止IOS调整字体大小*/\n}\ninput::-webkit-input-speech-button {\ndisplay: none; /*隐藏Android的语音输入按钮*/\n}\n```\n\n## [](#Flex基础篇 \"Flex基础篇\")Flex基础篇\n\n这里假设flex容器为 `.box` ，子元素为 `.item` 。\n\n### [](#1-定义容器为flex布局 \"1.定义容器为flex布局\")1.定义容器为flex布局\n```css\n.box{\n    display: -webkit-flex; /*webkit*/\n    display: flex;\n}\n/*行内flex*/\n.box{\n    display: -webkit-inline-flex; /*webkit*/\n    display:inline-flex;\n}\n\n```\n\n\n### [](#2-容器样式 \"2.容器样式\")2.容器样式\n```css\n.box{\n    flex-direction: row | row-reverse | column | column-reverse;\n    /*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/\n    flex-wrap: nowrap | wrap | wrap-reverse;\n    /*换行：不换行（默认） | 换行 | 换行并第一行在下方*/\n    flex-flow: <flex-direction> || <flex-wrap>;\n    /*主轴方向和换行简写*/\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n    /*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/\n    align-items: flex-start | flex-end | center | baseline | stretch;\n    /*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n    /*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/\n}\n```\n\n\n### [](#3-子元素样式 \"3.子元素样式\")3.子元素样式\n```css\n.item{\n    order: <integer>;\n    /*排序：数值越小，越排前，默认为0*/\n    flex-grow: <number>; /* default 0 */\n    /*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/\n    flex-shrink: <number>; /* default 1 */\n    /*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/\n    flex-basis: <length> | auto; /* default auto */\n    /*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/\n    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n    /*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n    /*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/\n}\n```\n\n## [](#小技巧篇 \"小技巧篇\")小技巧篇\n\n### [](#1-自定义苹果图标 \"1.自定义苹果图标\")1.自定义苹果图标\n\n在网站文件根目录放一个 `apple-touch-icon.png` 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。\n\n### [](#2-自定义favicon \"2.自定义favicon\")2.自定义favicon\n```html\n<link rel=\"icon\" href=\"favicon.ico\" mce_href=\"favicon.ico\" type=\"image/x-icon\">\n\n```\n\n\n### [](#3-定义浏览器点击行为 \"3.定义浏览器点击行为\")3.定义浏览器点击行为\n```html\n<a href=\"tel:020-10086\">打电话给:020-10086</a>\n<a href=\"sms:10086\">发短信给: 10086</a>\n<a href=\"mailto:me@22278.club\">发送邮件: me@22278.club</a>\n\n```\n### [](#4-定义上传文件类型和格式 \"4.定义上传文件类型和格式\")4.定义上传文件类型和格式\n\n```html\n<input type=file accept=\"image/*\">\n```\n\n\n上面的文件上传框中，`accept` 可以限制上传文件的类型，参数为 `image/*` 是所有图片类型，点击会弹出图库，也可以指定图片格式，参数设置成 `image/png` 则可以限制图片类型为png；参数如果为 `video/*` 则是选择视频的意思；`accept` 还可以设置多个文件格式，语法为 `accept=&quot;image/gif, image/jpeg&quot;` ；\n\n### [](#5-使用box-shadow改变-挡住-表单自动填充后的黄色 \"5.使用box-shadow改变(挡住)表单自动填充后的黄色\")5.使用box-shadow改变(挡住)表单自动填充后的黄色\n```css\ninput:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill{box-shadow:inset 0 0 0 1000px #fff;\n}\n```\n\n\n### [](#6-用CSS实现省略号文字截断 \"6.用CSS实现省略号文字截断\")6.用CSS实现省略号文字截断\n```css\nwhite-space: nowrap;\ntext-overflow: ellipsis;\noverflow: hidden;\n```\n\n\n### [](#7-使用border绘制小三角 \"7.使用border绘制小三角\")7.使用border绘制小三角\n\n原理是：上下和左右的边框对接其实是个斜角，利用这个特性，使其中一边的边框透明，另外一边写成想要的颜色并隐藏对边，就可以变成小箭头形状。\n```css\nborder-width: 10px 10px 10px 0; //左箭头\nborder-color: transparent #fff;\nborder-style: solid;\nwidth: 0;\n```\n\nTootip写法：\n```html\n<!--html-->\n<div class=\"box\">嗨！点击菜单就可以关注兮兮公众号了哟~</div>\n```\n```css\n/*--css--*/\n.box{\n    position: relative;\n    padding: 0 20px;\n    width: 380px;\n    height: 80px;\n    border-radius: 8px;\n    background: #efefef;\n    font-size: 18px;\n    line-height: 80px;\n}\n.box:after{\n    position: absolute;\n    top: 50%;\n    left: -15px;\n    z-index: 1;\n    display: block;\n    margin-top: -15px;\n    width: 0;\n    border-color: transparent #efefef;\n    border-style: solid;\n    border-width: 15px 15px 15px 0;\n    content: \"\";\n}\n```\n\n\n\n> ##### [作者]：https://github.com/BoizZ\n\n\n","source":"_posts/mobile-terminal-dev.md","raw":"---\ntitle: 移动WEB前端开发常用资源\ndate: 2017-08-18 10:50:58\ntags:\ncategory : mobile\n---\n> #### [转]\n\n自己在移动开发中总结和收集的一些常用资源，分享给大家。\n\n<!--more-->\n\n## [](#meta篇 \"meta篇\")meta篇\n\n### [](#1-视窗宽度 \"1.视窗宽度\")1.视窗宽度\n```html\n<meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"/>\n\n```\n其中 `width=device-width` 是设置视窗宽度为设备视窗宽度，还可以固定宽度，例如： `width=640` 则是640px的宽度（常见于微信）；\n\n`initial-scale=1.0` ：设置缩放比例为1.0；\n\n`minimum-scale=1.0` 和 `maximum-scale=1.0` ：最小缩放比例和最大缩放比例；\n\n`user-scalable=no` ：禁止用户自由缩放，`user-scalable` 默认值为 `yes` 。\n\n[ecko_icon alias=”fa-exclamation-triangle”] 提示：刚刚那个是带全部参数的，一般常用的，有 `user-scalable=no` 就不用使用 `minimum-scale=1.0` 和 `maximum-scale=1.0` 来强制禁止缩放了。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\"/>\n```\n\n### [](#2-自动识别格式 \"2.自动识别格式\")2.自动识别格式\n```\n<meta name=\"format-detection\" content=\"telephone=no\"/>\n```\n\n`content` 里面的参数：`telephone=no` 是禁止浏览器自动识别手机号码，`email=no` 是禁止浏览器自动识别Email。\n\n### [](#3-完整模板 \"3.完整模板\")3.完整模板\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\"/>\n<meta name=\"format-detection\" content=\"telephone=no\"/>\n<meta name=\"format-detection\" content=\"email=no\"/>\n```\n\n## [](#CSS篇 \"CSS篇\")CSS篇\n\n```css\nbody {\n    font-family: \"Helvetica Neue\", Helvetica, STHeiTi, sans-serif; /*使用无衬线字体*/\n}\na, img {\n    -webkit-touch-callout: none; /*禁止长按链接与图片弹出菜单*/\n}\nhtml, body {\n    -webkit-user-select: none; /*禁止选中文本*/\n    user-select: none;\n}\nbutton,input,optgroup,select,textarea {\n    -webkit-appearance:none; /*去掉webkit默认的表单样式*/\n}\na,button,input,optgroup,select,textarea {\n    -webkit-tap-highlight-color:rgba(0,0,0,0); /*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/\n}\ninput::-webkit-input-placeholder {\n    color:#ccc; /*修改webkit中input的planceholder样式*/\n}\ninput:focus::-webkit-input-placeholder {\n    color:#f00; /*修改webkit中focus状态下input的planceholder样式*/\n}\nbody {\n    -webkit-text-size-adjust: 100%!important; /*禁止IOS调整字体大小*/\n}\ninput::-webkit-input-speech-button {\ndisplay: none; /*隐藏Android的语音输入按钮*/\n}\n```\n\n## [](#Flex基础篇 \"Flex基础篇\")Flex基础篇\n\n这里假设flex容器为 `.box` ，子元素为 `.item` 。\n\n### [](#1-定义容器为flex布局 \"1.定义容器为flex布局\")1.定义容器为flex布局\n```css\n.box{\n    display: -webkit-flex; /*webkit*/\n    display: flex;\n}\n/*行内flex*/\n.box{\n    display: -webkit-inline-flex; /*webkit*/\n    display:inline-flex;\n}\n\n```\n\n\n### [](#2-容器样式 \"2.容器样式\")2.容器样式\n```css\n.box{\n    flex-direction: row | row-reverse | column | column-reverse;\n    /*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/\n    flex-wrap: nowrap | wrap | wrap-reverse;\n    /*换行：不换行（默认） | 换行 | 换行并第一行在下方*/\n    flex-flow: <flex-direction> || <flex-wrap>;\n    /*主轴方向和换行简写*/\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n    /*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/\n    align-items: flex-start | flex-end | center | baseline | stretch;\n    /*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n    /*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/\n}\n```\n\n\n### [](#3-子元素样式 \"3.子元素样式\")3.子元素样式\n```css\n.item{\n    order: <integer>;\n    /*排序：数值越小，越排前，默认为0*/\n    flex-grow: <number>; /* default 0 */\n    /*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/\n    flex-shrink: <number>; /* default 1 */\n    /*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/\n    flex-basis: <length> | auto; /* default auto */\n    /*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/\n    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n    /*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n    /*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/\n}\n```\n\n## [](#小技巧篇 \"小技巧篇\")小技巧篇\n\n### [](#1-自定义苹果图标 \"1.自定义苹果图标\")1.自定义苹果图标\n\n在网站文件根目录放一个 `apple-touch-icon.png` 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。\n\n### [](#2-自定义favicon \"2.自定义favicon\")2.自定义favicon\n```html\n<link rel=\"icon\" href=\"favicon.ico\" mce_href=\"favicon.ico\" type=\"image/x-icon\">\n\n```\n\n\n### [](#3-定义浏览器点击行为 \"3.定义浏览器点击行为\")3.定义浏览器点击行为\n```html\n<a href=\"tel:020-10086\">打电话给:020-10086</a>\n<a href=\"sms:10086\">发短信给: 10086</a>\n<a href=\"mailto:me@22278.club\">发送邮件: me@22278.club</a>\n\n```\n### [](#4-定义上传文件类型和格式 \"4.定义上传文件类型和格式\")4.定义上传文件类型和格式\n\n```html\n<input type=file accept=\"image/*\">\n```\n\n\n上面的文件上传框中，`accept` 可以限制上传文件的类型，参数为 `image/*` 是所有图片类型，点击会弹出图库，也可以指定图片格式，参数设置成 `image/png` 则可以限制图片类型为png；参数如果为 `video/*` 则是选择视频的意思；`accept` 还可以设置多个文件格式，语法为 `accept=&quot;image/gif, image/jpeg&quot;` ；\n\n### [](#5-使用box-shadow改变-挡住-表单自动填充后的黄色 \"5.使用box-shadow改变(挡住)表单自动填充后的黄色\")5.使用box-shadow改变(挡住)表单自动填充后的黄色\n```css\ninput:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill{box-shadow:inset 0 0 0 1000px #fff;\n}\n```\n\n\n### [](#6-用CSS实现省略号文字截断 \"6.用CSS实现省略号文字截断\")6.用CSS实现省略号文字截断\n```css\nwhite-space: nowrap;\ntext-overflow: ellipsis;\noverflow: hidden;\n```\n\n\n### [](#7-使用border绘制小三角 \"7.使用border绘制小三角\")7.使用border绘制小三角\n\n原理是：上下和左右的边框对接其实是个斜角，利用这个特性，使其中一边的边框透明，另外一边写成想要的颜色并隐藏对边，就可以变成小箭头形状。\n```css\nborder-width: 10px 10px 10px 0; //左箭头\nborder-color: transparent #fff;\nborder-style: solid;\nwidth: 0;\n```\n\nTootip写法：\n```html\n<!--html-->\n<div class=\"box\">嗨！点击菜单就可以关注兮兮公众号了哟~</div>\n```\n```css\n/*--css--*/\n.box{\n    position: relative;\n    padding: 0 20px;\n    width: 380px;\n    height: 80px;\n    border-radius: 8px;\n    background: #efefef;\n    font-size: 18px;\n    line-height: 80px;\n}\n.box:after{\n    position: absolute;\n    top: 50%;\n    left: -15px;\n    z-index: 1;\n    display: block;\n    margin-top: -15px;\n    width: 0;\n    border-color: transparent #efefef;\n    border-style: solid;\n    border-width: 15px 15px 15px 0;\n    content: \"\";\n}\n```\n\n\n\n> ##### [作者]：https://github.com/BoizZ\n\n\n","slug":"mobile-terminal-dev","published":1,"updated":"2018-02-05T16:36:29.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s7u000m9ms6wg94rj21","content":"<blockquote>\n<h4 id=\"转\"><a href=\"#转\" class=\"headerlink\" title=\"[转]\"></a>[转]</h4></blockquote>\n<p>自己在移动开发中总结和收集的一些常用资源，分享给大家。</p>\n<a id=\"more\"></a>\n<h2 id=\"meta篇\"><a href=\"#meta篇\" class=\"headerlink\" title=\"meta篇\"></a><a href=\"#meta篇\" title=\"meta篇\"></a>meta篇</h2><h3 id=\"1-视窗宽度\"><a href=\"#1-视窗宽度\" class=\"headerlink\" title=\"1.视窗宽度\"></a><a href=\"#1-视窗宽度\" title=\"1.视窗宽度\"></a>1.视窗宽度</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>width=device-width</code> 是设置视窗宽度为设备视窗宽度，还可以固定宽度，例如： <code>width=640</code> 则是640px的宽度（常见于微信）；</p>\n<p><code>initial-scale=1.0</code> ：设置缩放比例为1.0；</p>\n<p><code>minimum-scale=1.0</code> 和 <code>maximum-scale=1.0</code> ：最小缩放比例和最大缩放比例；</p>\n<p><code>user-scalable=no</code> ：禁止用户自由缩放，<code>user-scalable</code> 默认值为 <code>yes</code> 。</p>\n<p>[ecko_icon alias=”fa-exclamation-triangle”] 提示：刚刚那个是带全部参数的，一般常用的，有 <code>user-scalable=no</code> 就不用使用 <code>minimum-scale=1.0</code> 和 <code>maximum-scale=1.0</code> 来强制禁止缩放了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,user-scalable=no\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自动识别格式\"><a href=\"#2-自动识别格式\" class=\"headerlink\" title=\"2.自动识别格式\"></a><a href=\"#2-自动识别格式\" title=\"2.自动识别格式\"></a>2.自动识别格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p><code>content</code> 里面的参数：<code>telephone=no</code> 是禁止浏览器自动识别手机号码，<code>email=no</code> 是禁止浏览器自动识别Email。</p>\n<h3 id=\"3-完整模板\"><a href=\"#3-完整模板\" class=\"headerlink\" title=\"3.完整模板\"></a><a href=\"#3-完整模板\" title=\"3.完整模板\"></a>3.完整模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,user-scalable=no\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS篇\"><a href=\"#CSS篇\" class=\"headerlink\" title=\"CSS篇\"></a><a href=\"#CSS篇\" title=\"CSS篇\"></a>CSS篇</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Helvetica Neue\"</span>, Helvetica, STHeiTi, sans-serif; <span class=\"comment\">/*使用无衬线字体*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-touch-callout</span>: none; <span class=\"comment\">/*禁止长按链接与图片弹出菜单*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none; <span class=\"comment\">/*禁止选中文本*/</span></span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">optgroup</span>,<span class=\"selector-tag\">select</span>,<span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>:none; <span class=\"comment\">/*去掉webkit默认的表单样式*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">optgroup</span>,<span class=\"selector-tag\">select</span>,<span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-tap-highlight-color</span>:<span class=\"built_in\">rgba</span>(0,0,0,0); <span class=\"comment\">/*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#ccc</span>; <span class=\"comment\">/*修改webkit中input的planceholder样式*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>; <span class=\"comment\">/*修改webkit中focus状态下input的planceholder样式*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-text-size-adjust</span>: <span class=\"number\">100%</span><span class=\"meta\">!important</span>; <span class=\"comment\">/*禁止IOS调整字体大小*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-speech-button</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: none; <span class=\"comment\">/*隐藏Android的语音输入按钮*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Flex基础篇\"><a href=\"#Flex基础篇\" class=\"headerlink\" title=\"Flex基础篇\"></a><a href=\"#Flex基础篇\" title=\"Flex基础篇\"></a>Flex基础篇</h2><p>这里假设flex容器为 <code>.box</code> ，子元素为 <code>.item</code> 。</p>\n<h3 id=\"1-定义容器为flex布局\"><a href=\"#1-定义容器为flex布局\" class=\"headerlink\" title=\"1.定义容器为flex布局\"></a><a href=\"#1-定义容器为flex布局\" title=\"1.定义容器为flex布局\"></a>1.定义容器为flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/*webkit*/</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*行内flex*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-inline-flex; <span class=\"comment\">/*webkit*/</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-容器样式\"><a href=\"#2-容器样式\" class=\"headerlink\" title=\"2.容器样式\"></a><a href=\"#2-容器样式\" title=\"2.容器样式\"></a>2.容器样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">    <span class=\"comment\">/*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">    <span class=\"comment\">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">    <span class=\"comment\">/*主轴方向和换行简写*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">    <span class=\"comment\">/*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/</span></span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">    <span class=\"comment\">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">    <span class=\"comment\">/*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-子元素样式\"><a href=\"#3-子元素样式\" class=\"headerlink\" title=\"3.子元素样式\"></a><a href=\"#3-子元素样式\" title=\"3.子元素样式\"></a>3.子元素样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">    <span class=\"comment\">/*排序：数值越小，越排前，默认为0*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">    <span class=\"comment\">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">    <span class=\"comment\">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">    <span class=\"comment\">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">    <span class=\"comment\">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></span><br><span class=\"line\">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">    <span class=\"comment\">/*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小技巧篇\"><a href=\"#小技巧篇\" class=\"headerlink\" title=\"小技巧篇\"></a><a href=\"#小技巧篇\" title=\"小技巧篇\"></a>小技巧篇</h2><h3 id=\"1-自定义苹果图标\"><a href=\"#1-自定义苹果图标\" class=\"headerlink\" title=\"1.自定义苹果图标\"></a><a href=\"#1-自定义苹果图标\" title=\"1.自定义苹果图标\"></a>1.自定义苹果图标</h3><p>在网站文件根目录放一个 <code>apple-touch-icon.png</code> 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。</p>\n<h3 id=\"2-自定义favicon\"><a href=\"#2-自定义favicon\" class=\"headerlink\" title=\"2.自定义favicon\"></a><a href=\"#2-自定义favicon\" title=\"2.自定义favicon\"></a>2.自定义favicon</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">mce_href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-定义浏览器点击行为\"><a href=\"#3-定义浏览器点击行为\" class=\"headerlink\" title=\"3.定义浏览器点击行为\"></a><a href=\"#3-定义浏览器点击行为\" title=\"3.定义浏览器点击行为\"></a>3.定义浏览器点击行为</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:020-10086\"</span>&gt;</span>打电话给:020-10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>发短信给: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:me@22278.club\"</span>&gt;</span>发送邮件: me@22278.club<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-定义上传文件类型和格式\"><a href=\"#4-定义上传文件类型和格式\" class=\"headerlink\" title=\"4.定义上传文件类型和格式\"></a><a href=\"#4-定义上传文件类型和格式\" title=\"4.定义上传文件类型和格式\"></a>4.定义上传文件类型和格式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">file</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的文件上传框中，<code>accept</code> 可以限制上传文件的类型，参数为 <code>image/*</code> 是所有图片类型，点击会弹出图库，也可以指定图片格式，参数设置成 <code>image/png</code> 则可以限制图片类型为png；参数如果为 <code>video/*</code> 则是选择视频的意思；<code>accept</code> 还可以设置多个文件格式，语法为 <code>accept=&amp;quot;image/gif, image/jpeg&amp;quot;</code> ；</p>\n<h3 id=\"5-使用box-shadow改变-挡住-表单自动填充后的黄色\"><a href=\"#5-使用box-shadow改变-挡住-表单自动填充后的黄色\" class=\"headerlink\" title=\"5.使用box-shadow改变(挡住)表单自动填充后的黄色\"></a><a href=\"#5-使用box-shadow改变-挡住-表单自动填充后的黄色\" title=\"5.使用box-shadow改变(挡住)表单自动填充后的黄色\"></a>5.使用box-shadow改变(挡住)表单自动填充后的黄色</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:-webkit-autofill</span>, <span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:-webkit-autofill</span>, <span class=\"selector-tag\">select</span><span class=\"selector-pseudo\">:-webkit-autofill</span>&#123;<span class=\"attribute\">box-shadow</span>:inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1000px</span> <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-用CSS实现省略号文字截断\"><a href=\"#6-用CSS实现省略号文字截断\" class=\"headerlink\" title=\"6.用CSS实现省略号文字截断\"></a><a href=\"#6-用CSS实现省略号文字截断\" title=\"6.用CSS实现省略号文字截断\"></a>6.用CSS实现省略号文字截断</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-使用border绘制小三角\"><a href=\"#7-使用border绘制小三角\" class=\"headerlink\" title=\"7.使用border绘制小三角\"></a><a href=\"#7-使用border绘制小三角\" title=\"7.使用border绘制小三角\"></a>7.使用border绘制小三角</h3><p>原理是：上下和左右的边框对接其实是个斜角，利用这个特性，使其中一边的边框透明，另外一边写成想要的颜色并隐藏对边，就可以变成小箭头形状。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-width: 10px 10px 10px 0; //左箭头</span><br><span class=\"line\"><span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">transparent</span> <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-style</span>: <span class=\"selector-tag\">solid</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 0;</span><br></pre></td></tr></table></figure></p>\n<p>Tootip写法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>嗨！点击菜单就可以关注兮兮公众号了哟~<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*--css--*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">380px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: transparent <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">15px</span> <span class=\"number\">15px</span> <span class=\"number\">15px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"作者-：https-github-com-BoizZ\"><a href=\"#作者-：https-github-com-BoizZ\" class=\"headerlink\" title=\"[作者]：https://github.com/BoizZ\"></a>[作者]：<a href=\"https://github.com/BoizZ\" target=\"_blank\" rel=\"noopener\">https://github.com/BoizZ</a></h5></blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h4 id=\"转\"><a href=\"#转\" class=\"headerlink\" title=\"[转]\"></a>[转]</h4></blockquote>\n<p>自己在移动开发中总结和收集的一些常用资源，分享给大家。</p>","more":"<h2 id=\"meta篇\"><a href=\"#meta篇\" class=\"headerlink\" title=\"meta篇\"></a><a href=\"#meta篇\" title=\"meta篇\"></a>meta篇</h2><h3 id=\"1-视窗宽度\"><a href=\"#1-视窗宽度\" class=\"headerlink\" title=\"1.视窗宽度\"></a><a href=\"#1-视窗宽度\" title=\"1.视窗宽度\"></a>1.视窗宽度</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>width=device-width</code> 是设置视窗宽度为设备视窗宽度，还可以固定宽度，例如： <code>width=640</code> 则是640px的宽度（常见于微信）；</p>\n<p><code>initial-scale=1.0</code> ：设置缩放比例为1.0；</p>\n<p><code>minimum-scale=1.0</code> 和 <code>maximum-scale=1.0</code> ：最小缩放比例和最大缩放比例；</p>\n<p><code>user-scalable=no</code> ：禁止用户自由缩放，<code>user-scalable</code> 默认值为 <code>yes</code> 。</p>\n<p>[ecko_icon alias=”fa-exclamation-triangle”] 提示：刚刚那个是带全部参数的，一般常用的，有 <code>user-scalable=no</code> 就不用使用 <code>minimum-scale=1.0</code> 和 <code>maximum-scale=1.0</code> 来强制禁止缩放了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,user-scalable=no\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自动识别格式\"><a href=\"#2-自动识别格式\" class=\"headerlink\" title=\"2.自动识别格式\"></a><a href=\"#2-自动识别格式\" title=\"2.自动识别格式\"></a>2.自动识别格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p><code>content</code> 里面的参数：<code>telephone=no</code> 是禁止浏览器自动识别手机号码，<code>email=no</code> 是禁止浏览器自动识别Email。</p>\n<h3 id=\"3-完整模板\"><a href=\"#3-完整模板\" class=\"headerlink\" title=\"3.完整模板\"></a><a href=\"#3-完整模板\" title=\"3.完整模板\"></a>3.完整模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,user-scalable=no\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS篇\"><a href=\"#CSS篇\" class=\"headerlink\" title=\"CSS篇\"></a><a href=\"#CSS篇\" title=\"CSS篇\"></a>CSS篇</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Helvetica Neue\"</span>, Helvetica, STHeiTi, sans-serif; <span class=\"comment\">/*使用无衬线字体*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-touch-callout</span>: none; <span class=\"comment\">/*禁止长按链接与图片弹出菜单*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none; <span class=\"comment\">/*禁止选中文本*/</span></span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">optgroup</span>,<span class=\"selector-tag\">select</span>,<span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>:none; <span class=\"comment\">/*去掉webkit默认的表单样式*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">optgroup</span>,<span class=\"selector-tag\">select</span>,<span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-tap-highlight-color</span>:<span class=\"built_in\">rgba</span>(0,0,0,0); <span class=\"comment\">/*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#ccc</span>; <span class=\"comment\">/*修改webkit中input的planceholder样式*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>; <span class=\"comment\">/*修改webkit中focus状态下input的planceholder样式*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-text-size-adjust</span>: <span class=\"number\">100%</span><span class=\"meta\">!important</span>; <span class=\"comment\">/*禁止IOS调整字体大小*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-speech-button</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: none; <span class=\"comment\">/*隐藏Android的语音输入按钮*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Flex基础篇\"><a href=\"#Flex基础篇\" class=\"headerlink\" title=\"Flex基础篇\"></a><a href=\"#Flex基础篇\" title=\"Flex基础篇\"></a>Flex基础篇</h2><p>这里假设flex容器为 <code>.box</code> ，子元素为 <code>.item</code> 。</p>\n<h3 id=\"1-定义容器为flex布局\"><a href=\"#1-定义容器为flex布局\" class=\"headerlink\" title=\"1.定义容器为flex布局\"></a><a href=\"#1-定义容器为flex布局\" title=\"1.定义容器为flex布局\"></a>1.定义容器为flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/*webkit*/</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*行内flex*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-inline-flex; <span class=\"comment\">/*webkit*/</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-容器样式\"><a href=\"#2-容器样式\" class=\"headerlink\" title=\"2.容器样式\"></a><a href=\"#2-容器样式\" title=\"2.容器样式\"></a>2.容器样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">    <span class=\"comment\">/*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">    <span class=\"comment\">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">    <span class=\"comment\">/*主轴方向和换行简写*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">    <span class=\"comment\">/*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/</span></span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">    <span class=\"comment\">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">    <span class=\"comment\">/*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-子元素样式\"><a href=\"#3-子元素样式\" class=\"headerlink\" title=\"3.子元素样式\"></a><a href=\"#3-子元素样式\" title=\"3.子元素样式\"></a>3.子元素样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">    <span class=\"comment\">/*排序：数值越小，越排前，默认为0*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">    <span class=\"comment\">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">    <span class=\"comment\">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">    <span class=\"comment\">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">    <span class=\"comment\">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></span><br><span class=\"line\">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">    <span class=\"comment\">/*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小技巧篇\"><a href=\"#小技巧篇\" class=\"headerlink\" title=\"小技巧篇\"></a><a href=\"#小技巧篇\" title=\"小技巧篇\"></a>小技巧篇</h2><h3 id=\"1-自定义苹果图标\"><a href=\"#1-自定义苹果图标\" class=\"headerlink\" title=\"1.自定义苹果图标\"></a><a href=\"#1-自定义苹果图标\" title=\"1.自定义苹果图标\"></a>1.自定义苹果图标</h3><p>在网站文件根目录放一个 <code>apple-touch-icon.png</code> 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。</p>\n<h3 id=\"2-自定义favicon\"><a href=\"#2-自定义favicon\" class=\"headerlink\" title=\"2.自定义favicon\"></a><a href=\"#2-自定义favicon\" title=\"2.自定义favicon\"></a>2.自定义favicon</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">mce_href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-定义浏览器点击行为\"><a href=\"#3-定义浏览器点击行为\" class=\"headerlink\" title=\"3.定义浏览器点击行为\"></a><a href=\"#3-定义浏览器点击行为\" title=\"3.定义浏览器点击行为\"></a>3.定义浏览器点击行为</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:020-10086\"</span>&gt;</span>打电话给:020-10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>发短信给: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:me@22278.club\"</span>&gt;</span>发送邮件: me@22278.club<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-定义上传文件类型和格式\"><a href=\"#4-定义上传文件类型和格式\" class=\"headerlink\" title=\"4.定义上传文件类型和格式\"></a><a href=\"#4-定义上传文件类型和格式\" title=\"4.定义上传文件类型和格式\"></a>4.定义上传文件类型和格式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">file</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的文件上传框中，<code>accept</code> 可以限制上传文件的类型，参数为 <code>image/*</code> 是所有图片类型，点击会弹出图库，也可以指定图片格式，参数设置成 <code>image/png</code> 则可以限制图片类型为png；参数如果为 <code>video/*</code> 则是选择视频的意思；<code>accept</code> 还可以设置多个文件格式，语法为 <code>accept=&amp;quot;image/gif, image/jpeg&amp;quot;</code> ；</p>\n<h3 id=\"5-使用box-shadow改变-挡住-表单自动填充后的黄色\"><a href=\"#5-使用box-shadow改变-挡住-表单自动填充后的黄色\" class=\"headerlink\" title=\"5.使用box-shadow改变(挡住)表单自动填充后的黄色\"></a><a href=\"#5-使用box-shadow改变-挡住-表单自动填充后的黄色\" title=\"5.使用box-shadow改变(挡住)表单自动填充后的黄色\"></a>5.使用box-shadow改变(挡住)表单自动填充后的黄色</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:-webkit-autofill</span>, <span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:-webkit-autofill</span>, <span class=\"selector-tag\">select</span><span class=\"selector-pseudo\">:-webkit-autofill</span>&#123;<span class=\"attribute\">box-shadow</span>:inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1000px</span> <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-用CSS实现省略号文字截断\"><a href=\"#6-用CSS实现省略号文字截断\" class=\"headerlink\" title=\"6.用CSS实现省略号文字截断\"></a><a href=\"#6-用CSS实现省略号文字截断\" title=\"6.用CSS实现省略号文字截断\"></a>6.用CSS实现省略号文字截断</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-使用border绘制小三角\"><a href=\"#7-使用border绘制小三角\" class=\"headerlink\" title=\"7.使用border绘制小三角\"></a><a href=\"#7-使用border绘制小三角\" title=\"7.使用border绘制小三角\"></a>7.使用border绘制小三角</h3><p>原理是：上下和左右的边框对接其实是个斜角，利用这个特性，使其中一边的边框透明，另外一边写成想要的颜色并隐藏对边，就可以变成小箭头形状。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-width: 10px 10px 10px 0; //左箭头</span><br><span class=\"line\"><span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">transparent</span> <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-style</span>: <span class=\"selector-tag\">solid</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 0;</span><br></pre></td></tr></table></figure></p>\n<p>Tootip写法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>嗨！点击菜单就可以关注兮兮公众号了哟~<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*--css--*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">380px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: transparent <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">15px</span> <span class=\"number\">15px</span> <span class=\"number\">15px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"作者-：https-github-com-BoizZ\"><a href=\"#作者-：https-github-com-BoizZ\" class=\"headerlink\" title=\"[作者]：https://github.com/BoizZ\"></a>[作者]：<a href=\"https://github.com/BoizZ\" target=\"_blank\" rel=\"noopener\">https://github.com/BoizZ</a></h5></blockquote>"},{"title":"关于 promise","date":"2017-11-20T11:00:00.000Z","_content":"\n[转自：[翻译] We have a problem with promises](http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c)\n\n\n> Q: 下面的四种 promises 的区别是什么\n\n```\ndoSomething().then(function () {\n  return doSomethingElse();\n});\n\ndoSomething().then(function () {\n  doSomethingElse();\n});\n\ndoSomething().then(doSomethingElse());\n\ndoSomething().then(doSomethingElse);\n```\n\n> 当我尝试分析这道题的答案时，看了一半就楞(meng)住(bi)了，深深的怀疑我是否看过《你不知道的 JavaScript》中关于`异步和性能`的那章，看完这篇文章，有豁然开朗的感觉。\n\n<!-- more -->\n\n\n用Javascript的小伙伴们，是时候承认了，关于 promises 我们一直存在着问题。并非说 promises 本身有问题，Promises/A+ 是极好的。\n\n就我过去数年观察大量 PouchDB API 以及其他 promise-heavy API 的使用者们与这些 API 的搏斗中我发现，最大的问题是：\n\n大部分使用 promises 的小伙伴们并没有真正的理解它\n\n如果你不认同这个观点，可以看看我最近在 [twitter](https://twitter.com/nolanlawson/status/578948854411878400) 上出的这道题：\n\n> Q: 下面的四种 promises 的区别是什么\n\n```\ndoSomething().then(function () {\n  return doSomethingElse();\n});\n\ndoSomething().then(function () {\n  doSomethingElse();\n});\n\ndoSomething().then(doSomethingElse());\n\ndoSomething().then(doSomethingElse);\n```\n\n如果你知道正常答案，那么我要恭喜你，你是一位 promises 大拿，你完全可以不再继续阅读这篇文件。\n\n另外 99.99% 的小伙伴们，你们才是正义。没有一个人在 twitter 上给出正确答案，甚至我自己也被 #3 的答案惊到了。恩，即使这道题是我自己出的。\n\n正确答案在这篇文章的结尾，在此之前，我希望首先探究一下为何为何 promises 如此复杂，并且为何有这么多人，无论是新手还是专家，都被它坑到了。同时我还会给出一个我自认为非常独特的视角，可以让 promises 变的更加容易理解。同时，我非常确信在了解这些之后，promises 并不会再难以理解。\n\n不过在开始这些之前，让我们先了解一些 promises 的基础知识。\n\n### Promises 的起源\n\n如果你阅读了 promises 的一些相关文献，你会发现有一个词 [金字塔问题](https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf) 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。\n\nPromises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 [Callback Hell的救赎](https://www.youtube.com/watch?v=hf1T_AONQJU&feature=youtu.be) 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。\n\n> 原文关于副作用的描述并不能很直观的进行理解，建议参考 [WIKI](https://en.wikipedia.org/wiki/Side_effect_(computer_science)) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。译者注。\n\n并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的 堆栈 破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。\n\nPromises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。\n\n### 新手错误\n\n一些同学试图通过用 [卡通](http://andyshora.com/promises-angularjs-explained-as-cartoon.html) 来描述 promises，或者试图用语言去描述它: “哦，你可以把它作为一个异步的值进行传递。”\n\n我认为这些解释并不会有很大的帮助。对我来说，promises 完全是一种代码结构和流程。因此我认为直接展示一些常见的错误并且演示如何修复它们更能够说明问题。我说这些问题是 “新手问题” ，这意味着 “虽然你现在是一个新手，孩子，但是马上你会变成一位专家”。\n\n小插曲: “promises” 对于不同的人有不同的理解和观点，但是在这篇文章中我特指 [正式标准](https://promisesaplus.com/) ，在现代浏览器中暴露为 window.Promise。虽然并非所有浏览器都有 windows.Promise，但是可以寻找一些 pollyfill ，比如 [Lie](https://github.com/calvinmetcalf/lie) 是目前体积最小的兼容标准的库。\n\n#### 新手错误 #1： promise版的金字塔问题\n\n观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个：\n\n```\nremotedb.allDocs({\n  include_docs: true,\n  attachments: true\n}).then(function (result) {\n  var docs = result.rows;\n  docs.forEach(function(element) {\n    localdb.put(element.doc).then(function(response) {\n      alert(\"Pulled doc with id \" + element.doc._id + \" and added to local db.\");\n    }).catch(function (err) {\n      if (err.status == 409) {\n        localdb.get(element.doc._id).then(function (resp) {\n          localdb.remove(resp._id, resp._rev).then(function (resp) {\n// et cetera...\n```\n\n是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。\n\n并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)\n\n正确的风格应该是这样:\n\n```\nremotedb.allDocs(...).then(function (resultOfAllDocs) {\n  return localdb.put(...);\n}).then(function (resultOfPut) {\n  return localdb.get(...);\n}).then(function (resultOfGet) {\n  return localdb.put(...);\n}).catch(function (err) {\n  console.log(err);\n});\n```\n\n这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。\n\n#### 新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\n\n这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。\n\n```\n// I want to remove() all docs\ndb.allDocs({include_docs: true}).then(function (result) {\n  result.rows.forEach(function (row) {\n    db.remove(row.doc);  \n  });\n}).then(function () {\n  // I naively believe all docs have been removed() now!\n});\n```\n\n这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！\n\n这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。\n\n简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():\n\n```\ndb.allDocs({include_docs: true}).then(function (result) {\n  return Promise.all(result.rows.map(function (row) {\n    return db.remove(row.doc);\n  }));\n}).then(function (arrayOfResults) {\n  // All docs have really been removed() now!\n});\n```\n\n上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。\n\n并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。\n\n#### 新手错误 #3： 忘记使用 .catch()\n\n这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。\n\n类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注\n为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:\n\n```\nsomePromise().then(function () {\n  return anotherPromise();\n}).then(function () {\n  return yetAnotherPromise();\n}).catch(console.log.bind(console)); // <-- this is badass\n```\n\n即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。\n\n#### 新手错误 #4：使用 “deferred”\n\n这是一个我[经常可以看到的错误](https://gonehybrid.com/how-to-use-pouchdb-sqlite-for-local-storage-in-your-ionic-app/)，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。\n\n简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。\n\n因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。\n\n首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.\n\n```\n$q.when(db.put(doc)).then(/* ... */); // <-- this is all the code you need\n```\n\n另一种策略是使用[构造函数声明模式](https://blog.domenic.me/the-revealing-constructor-pattern/)，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:\n\n```\nnew Promise(function (resolve, reject) {\n  fs.readFile('myfile.txt', function (err, file) {\n    if (err) {\n      return reject(err);\n    }\n    resolve(file);\n  });\n}).then(/* ... */)\n```\n\n完工！我们打败了可怕的 def….啊哈，抓到自己了。:)\n\n> 关于为何这是一种反模式更多的内容，请查看 Bluebird 的 [promise anti-patterns wiki](https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern) 页\n\n#### 新手错误 #5：使用副作用调用而非返回\n\n下面的代码有什么问题？\n\n```\nsomePromise().then(function () {\n  someOtherPromise();\n}).then(function () {\n  // Gee, I hope someOtherPromise() has resolved!\n  // Spoiler alert: it hasn't.\n});\n```\n\n好了，现在是时候讨论一下关于 promises 你所需要知道的一切。\n\n认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？\n\n就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？\n\n每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, ...) 的语法糖)。当我们在 then() 函数内部时：\n\n```\nsomePromise().then(function () {\n  // I'm inside a then() function!\n});\n```\n\n我们可以做什么呢？有三种事情：\n\nreturn 另一个 promise\nreturn 一个同步的值 (或者 undefined)\nthrow 一个同步异常\n就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。\n\n- 返回另一个 promise\n\n    这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：\n\n    ```\n    getUserByName('nolan').then(function (user) {\n      return getUserAccountById(user.id);\n    }).then(function (userAccount) {\n      // I got a user account!\n    });\n    ```\n    注意到我是 `return` 第二个 promise，这个 `return` 非常重要。如果我没有写 `return`，`getUserAccountById()` 就会成为一个副作用，并且下一个函数将会接收到 `undefined` 而非 `userAccount`。\n\n- 返回一个同步值 (或者 undefined)\n\n    返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：\n\n    ```\n    getUserByName('nolan').then(function (user) {\n      if (inMemoryCache[user.id]) {\n        return inMemoryCache[user.id];    // returning a synchronous value!\n      }\n      return getUserAccountById(user.id); // returning a promise!\n    }).then(function (userAccount) {\n      // I got a user account!\n    });\n    ```\n\n    是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。\n\n    不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。\n\n    出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。\n\n- 抛出同步异常\n\n    谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：\n\n    ```\n    getUserByName('nolan').then(function (user) {\n      if (user.isLoggedOut()) {\n        throw new Error('user logged out!'); // throwing a synchronous error!\n      }\n      if (inMemoryCache[user.id]) {\n        return inMemoryCache[user.id];       // returning a synchronous value!\n      }\n      return getUserAccountById(user.id);    // returning a promise!\n    }).then(function (userAccount) {\n      // I got a user account!\n    }).catch(function (err) {\n      // Boo, I got an error!\n    });\n    ```\n    如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。\n\n    这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。\n\n\n### 进阶错误\n\n好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。\n\n这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。\n\n#### 进阶错误 #1：不知道 Promise.resolve()\n\n如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：\n\n```\nnew Promise(function (resolve, reject) {\n  resolve(someSynchronousValue);\n}).then(/* ... */);\n```\n\n你会发现使用 Promise.resolve 会更加简洁：\n```\nPromise.resolve(someSynchronousValue).then(/* ... */);\n```\n\n它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：\n\n```\nfunction somePromiseAPI() {\n  return Promise.resolve().then(function () {\n    doSomethingThatMayThrow();\n    return 'foo';\n  }).then(/* ... */);\n}\n```\n\n切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。\n\n类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。\n```\nPromise.reject(new Error('some awful error'));\n```\n\n#### 进阶错误 #2：catch() 与 then(null, ...) 并非完全等价\n\n之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：\n\n```\nsomePromise().catch(function (err) {\n  // handle error\n});\n\nsomePromise().then(null, function (err) {\n  // handle error\n});\n```\n\n然而，这并不意味着下面两段代码是等价的：\n\n```\nsomePromise().then(function () {\n  return someOtherPromise();\n}).catch(function (err) {\n  // handle error\n});\n\nsomePromise().then(function () {\n  return someOtherPromise();\n}, function (err) {\n  // handle error\n});\n```\n\n如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：\n\n```\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}).catch(function (err) {\n  // I caught your error! :)\n});\n\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}, function (err) {\n  // I didn't catch your error! :(\n});\n```\n因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。\n\n鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：\n\n```\nit('should throw an error', function () {\n  return doSomethingThatThrows().then(function () {\n    throw new Error('I expected an error!');\n  }, function (err) {\n    should.exist(err);\n  });\n});\n```\n说到这里，Mocha 和 Chai 用来测试 promise 接口时，是一对非常好的组合。 pouchdb-plugin-seed 项目中有一些 示例 可以帮助你入门。\n\n#### 进阶错误 #3：promises vs promises factories\n\n当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。\n\n你可能天真的写下这样的代码：\n\n```\nfunction executeSequentially(promises) {\n  var result = Promise.resolve();\n  promises.forEach(function (promise) {\n    result = result.then(promise);\n  });\n  return result;\n}\n```\n不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。\n\n其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。\n\n```\nfunction executeSequentially(promiseFactories) {\n  var result = Promise.resolve();\n  promiseFactories.forEach(function (promiseFactory) {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n```\n我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：\n\n```\nfunction myPromiseFactory() {\n  return somethingThatCreatesAPromise();\n}\n```\n\n为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。\n\n如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(...) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。\n\n#### 进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\n\n有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：\n\n```\ngetUserByName('nolan').then(function (user) {\n  return getUserAccountById(user.id);\n}).then(function (userAccount) {\n  // dangit, I need the \"user\" object too!\n});\n```\n\n为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：\n\n```\nvar user;\ngetUserByName('nolan').then(function (result) {\n  user = result;\n  return getUserAccountById(user.id);\n}).then(function (userAccount) {\n  // okay, I have both the \"user\" and the \"userAccount\"\n});\n```\n这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：\n```\ngetUserByName('nolan').then(function (user) {\n  return getUserAccountById(user.id).then(function (userAccount) {\n    // okay, I have both the \"user\" and the \"userAccount\"\n  });\n});\n```\n\n…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：\n\n```\nfunction onGetUserAndUserAccount(user, userAccount) {\n  return doSomething(user, userAccount);\n}\n\nfunction onGetUser(user) {\n  return getUserAccountById(user.id).then(function (userAccount) {\n    return onGetUserAndUserAccount(user, userAccount);\n  });\n}\n\ngetUserByName('nolan')\n  .then(onGetUser)\n  .then(function () {\n  // at this point, doSomething() is done, and we are back to indentation 0\n});\n```\n\n由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：\n\n```\nputYourRightFootIn()\n  .then(putYourRightFootOut)\n  .then(putYourRightFootIn)  \n  .then(shakeItAllAbout);\n```\n这就是 promises 的重点。\n\n#### 进阶错误 #5：promises 穿透\n\n最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。\n\n你认为下面的代码会打印出什么？\n\n```\nPromise.resolve('foo').then(Promise.resolve('bar')).then(function (result) {\n  console.log(result);\n});\n```\n\n如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！\n\n发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：\n\n```\nPromise.resolve('foo').then(null).then(function (result) {\n  console.log(result);\n});\n```\n添加任意数量的 then(null)，它依然会打印 foo。\n\n这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：\n\n```\nPromise.resolve('foo').then(function () {\n  return Promise.resolve('bar');\n}).then(function (result) {\n  console.log(result);\n});\n```\n\n这样他就会如我们所想的打印出 bar。\n\n因此记住：永远都是往 then() 中传递函数！\n\n### 谜题揭晓\n\n现在我们了解了关于 promsies 所有的知识（或者接近！），我们应该可以解决文章最开始我提出的谜题了。\n\n这里是谜题的所有答案，我以图形的格式展示出来方便你查看：\n\n#### Puzzle #1\n\n```\ndoSomething().then(function () {\n  return doSomethingElse();\n}).then(finalHandler);\n```\nAnswer:\n```\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n                                     ```\n#### Puzzle #2\n```\ndoSomething().then(function () {\n  doSomethingElse();\n}).then(finalHandler);\n```\nAnswer:\n```\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                  finalHandler(undefined)\n                  |------------------|\n```\n\n#### Puzzle #3\n```\ndoSomething().then(doSomethingElse())\n  .then(finalHandler);\n```\nAnswer:\n```\ndoSomething\n|-----------------|\ndoSomethingElse(undefined)\n|---------------------------------|\n                  finalHandler(resultOfDoSomething)\n                  |------------------|\n```\n\n#### Puzzle #4\n```\ndoSomething().then(doSomethingElse)\n  .then(finalHandler);\n  ```\nAnswer:\n```\ndoSomething\n|-----------------|\n                  doSomethingElse(resultOfDoSomething)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n```\n如果这些答案你依然无法理解，那么我强烈建议你重新读一下这篇文章，或者实现一下 doSomething() 和 doSomethingElse() 函数并且在浏览器中自己试试看。\n\n声明：在这些例子中，我假定 doSomething() 和 doSomethingElse() 均返回 promises，并且这些 promises 代表某些在 JavaScript event loop (如 IndexedDB, network, setTimeout) 之外的某些工作结束，这也是为何它们在某些时候表现起来像是并行执行的意义。这里是一个模拟用的 [JSBin](http://jsbin.com/tuqukakawo/1/edit?js,console,output)。\n关于更多 promises 的进阶用法，可以参考我的 [promise protips cheat sheet](https://gist.github.com/nolanlawson/6ce81186421d2fa109a4)\n\n### 关于 promises 最后的话\n\nPromises 是非常赞的。如果你还在使用回调模式，我强烈建议你切换到 promises。你的代码会变的更少，更优雅，并且更加容易理解。\n\n如果你不相信我，这里是证明：[a refactor of PouchDB’s map/reduce module](https://t.co/hRyc6ENYGC)，使用 promises 替换回调。结果是：新增 290 行，删除 555 行。\n\n顺带一提，写出那令人讨厌的回调代码的人。。是我！因此这是我第一次领会到 promises 的力量，同时我感谢其他 PouchDB 的贡献者们教导我这样做。\n\n当然了，promises 并非完美。虽然它的确比回调模式要好，但是这样说就好比说给你肚子来一拳会比在你牙齿上踹一脚好。的确，它是会略有优势，但是如果你有选择，你会两者都尽力避免。\n\n作为回调模式的升级版，promises 依然难以理解并且容易误用，证明之一就是我不得不写下这篇博文。初学者与专家都很容易经常将它用错，并且真要说的话，并非是他们的问题。问题在于 promises 的使用模式与我们写同步代码非常类似，但是又不尽然。\n\n> 我也认为 promises 的确难以理解并且容易误用，证明之一就是我不得不翻译这篇博文。 译者注\n\n老实说，你不应该需要去学一堆晦涩难懂的规则和新的 API 去做在同步代码中我们已经熟稔的 return，catch，throw 和 for 循环。在你的脑中不应该总是要提醒自己要区分有两套并行的系统。\n\n### 期待 async/await\n\n这是我在 [“Taming the asynchronous beast with ES7”](http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html) 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。\n\n这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。\n\n从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。\n\nES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。\n\n因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”\n\n> 更新：有人告知我 Bluebird 3.0 将会 打印警告 来避免我文中所列举的这些错误。因此当我们还在等待 ES7 时，使用 Bluebird 会是另一个极好的方案。\n","source":"_posts/promise.md","raw":"title: 关于 promise\ndate: 2017-11-20 19:00:00\ncategories: front-end\ntags: promise\n---\n\n[转自：[翻译] We have a problem with promises](http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c)\n\n\n> Q: 下面的四种 promises 的区别是什么\n\n```\ndoSomething().then(function () {\n  return doSomethingElse();\n});\n\ndoSomething().then(function () {\n  doSomethingElse();\n});\n\ndoSomething().then(doSomethingElse());\n\ndoSomething().then(doSomethingElse);\n```\n\n> 当我尝试分析这道题的答案时，看了一半就楞(meng)住(bi)了，深深的怀疑我是否看过《你不知道的 JavaScript》中关于`异步和性能`的那章，看完这篇文章，有豁然开朗的感觉。\n\n<!-- more -->\n\n\n用Javascript的小伙伴们，是时候承认了，关于 promises 我们一直存在着问题。并非说 promises 本身有问题，Promises/A+ 是极好的。\n\n就我过去数年观察大量 PouchDB API 以及其他 promise-heavy API 的使用者们与这些 API 的搏斗中我发现，最大的问题是：\n\n大部分使用 promises 的小伙伴们并没有真正的理解它\n\n如果你不认同这个观点，可以看看我最近在 [twitter](https://twitter.com/nolanlawson/status/578948854411878400) 上出的这道题：\n\n> Q: 下面的四种 promises 的区别是什么\n\n```\ndoSomething().then(function () {\n  return doSomethingElse();\n});\n\ndoSomething().then(function () {\n  doSomethingElse();\n});\n\ndoSomething().then(doSomethingElse());\n\ndoSomething().then(doSomethingElse);\n```\n\n如果你知道正常答案，那么我要恭喜你，你是一位 promises 大拿，你完全可以不再继续阅读这篇文件。\n\n另外 99.99% 的小伙伴们，你们才是正义。没有一个人在 twitter 上给出正确答案，甚至我自己也被 #3 的答案惊到了。恩，即使这道题是我自己出的。\n\n正确答案在这篇文章的结尾，在此之前，我希望首先探究一下为何为何 promises 如此复杂，并且为何有这么多人，无论是新手还是专家，都被它坑到了。同时我还会给出一个我自认为非常独特的视角，可以让 promises 变的更加容易理解。同时，我非常确信在了解这些之后，promises 并不会再难以理解。\n\n不过在开始这些之前，让我们先了解一些 promises 的基础知识。\n\n### Promises 的起源\n\n如果你阅读了 promises 的一些相关文献，你会发现有一个词 [金字塔问题](https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf) 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。\n\nPromises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 [Callback Hell的救赎](https://www.youtube.com/watch?v=hf1T_AONQJU&feature=youtu.be) 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。\n\n> 原文关于副作用的描述并不能很直观的进行理解，建议参考 [WIKI](https://en.wikipedia.org/wiki/Side_effect_(computer_science)) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。译者注。\n\n并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的 堆栈 破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。\n\nPromises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。\n\n### 新手错误\n\n一些同学试图通过用 [卡通](http://andyshora.com/promises-angularjs-explained-as-cartoon.html) 来描述 promises，或者试图用语言去描述它: “哦，你可以把它作为一个异步的值进行传递。”\n\n我认为这些解释并不会有很大的帮助。对我来说，promises 完全是一种代码结构和流程。因此我认为直接展示一些常见的错误并且演示如何修复它们更能够说明问题。我说这些问题是 “新手问题” ，这意味着 “虽然你现在是一个新手，孩子，但是马上你会变成一位专家”。\n\n小插曲: “promises” 对于不同的人有不同的理解和观点，但是在这篇文章中我特指 [正式标准](https://promisesaplus.com/) ，在现代浏览器中暴露为 window.Promise。虽然并非所有浏览器都有 windows.Promise，但是可以寻找一些 pollyfill ，比如 [Lie](https://github.com/calvinmetcalf/lie) 是目前体积最小的兼容标准的库。\n\n#### 新手错误 #1： promise版的金字塔问题\n\n观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个：\n\n```\nremotedb.allDocs({\n  include_docs: true,\n  attachments: true\n}).then(function (result) {\n  var docs = result.rows;\n  docs.forEach(function(element) {\n    localdb.put(element.doc).then(function(response) {\n      alert(\"Pulled doc with id \" + element.doc._id + \" and added to local db.\");\n    }).catch(function (err) {\n      if (err.status == 409) {\n        localdb.get(element.doc._id).then(function (resp) {\n          localdb.remove(resp._id, resp._rev).then(function (resp) {\n// et cetera...\n```\n\n是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。\n\n并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)\n\n正确的风格应该是这样:\n\n```\nremotedb.allDocs(...).then(function (resultOfAllDocs) {\n  return localdb.put(...);\n}).then(function (resultOfPut) {\n  return localdb.get(...);\n}).then(function (resultOfGet) {\n  return localdb.put(...);\n}).catch(function (err) {\n  console.log(err);\n});\n```\n\n这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。\n\n#### 新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\n\n这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。\n\n```\n// I want to remove() all docs\ndb.allDocs({include_docs: true}).then(function (result) {\n  result.rows.forEach(function (row) {\n    db.remove(row.doc);  \n  });\n}).then(function () {\n  // I naively believe all docs have been removed() now!\n});\n```\n\n这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！\n\n这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。\n\n简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():\n\n```\ndb.allDocs({include_docs: true}).then(function (result) {\n  return Promise.all(result.rows.map(function (row) {\n    return db.remove(row.doc);\n  }));\n}).then(function (arrayOfResults) {\n  // All docs have really been removed() now!\n});\n```\n\n上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。\n\n并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。\n\n#### 新手错误 #3： 忘记使用 .catch()\n\n这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。\n\n类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注\n为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:\n\n```\nsomePromise().then(function () {\n  return anotherPromise();\n}).then(function () {\n  return yetAnotherPromise();\n}).catch(console.log.bind(console)); // <-- this is badass\n```\n\n即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。\n\n#### 新手错误 #4：使用 “deferred”\n\n这是一个我[经常可以看到的错误](https://gonehybrid.com/how-to-use-pouchdb-sqlite-for-local-storage-in-your-ionic-app/)，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。\n\n简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。\n\n因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。\n\n首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.\n\n```\n$q.when(db.put(doc)).then(/* ... */); // <-- this is all the code you need\n```\n\n另一种策略是使用[构造函数声明模式](https://blog.domenic.me/the-revealing-constructor-pattern/)，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:\n\n```\nnew Promise(function (resolve, reject) {\n  fs.readFile('myfile.txt', function (err, file) {\n    if (err) {\n      return reject(err);\n    }\n    resolve(file);\n  });\n}).then(/* ... */)\n```\n\n完工！我们打败了可怕的 def….啊哈，抓到自己了。:)\n\n> 关于为何这是一种反模式更多的内容，请查看 Bluebird 的 [promise anti-patterns wiki](https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern) 页\n\n#### 新手错误 #5：使用副作用调用而非返回\n\n下面的代码有什么问题？\n\n```\nsomePromise().then(function () {\n  someOtherPromise();\n}).then(function () {\n  // Gee, I hope someOtherPromise() has resolved!\n  // Spoiler alert: it hasn't.\n});\n```\n\n好了，现在是时候讨论一下关于 promises 你所需要知道的一切。\n\n认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？\n\n就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？\n\n每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, ...) 的语法糖)。当我们在 then() 函数内部时：\n\n```\nsomePromise().then(function () {\n  // I'm inside a then() function!\n});\n```\n\n我们可以做什么呢？有三种事情：\n\nreturn 另一个 promise\nreturn 一个同步的值 (或者 undefined)\nthrow 一个同步异常\n就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。\n\n- 返回另一个 promise\n\n    这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：\n\n    ```\n    getUserByName('nolan').then(function (user) {\n      return getUserAccountById(user.id);\n    }).then(function (userAccount) {\n      // I got a user account!\n    });\n    ```\n    注意到我是 `return` 第二个 promise，这个 `return` 非常重要。如果我没有写 `return`，`getUserAccountById()` 就会成为一个副作用，并且下一个函数将会接收到 `undefined` 而非 `userAccount`。\n\n- 返回一个同步值 (或者 undefined)\n\n    返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：\n\n    ```\n    getUserByName('nolan').then(function (user) {\n      if (inMemoryCache[user.id]) {\n        return inMemoryCache[user.id];    // returning a synchronous value!\n      }\n      return getUserAccountById(user.id); // returning a promise!\n    }).then(function (userAccount) {\n      // I got a user account!\n    });\n    ```\n\n    是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。\n\n    不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。\n\n    出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。\n\n- 抛出同步异常\n\n    谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：\n\n    ```\n    getUserByName('nolan').then(function (user) {\n      if (user.isLoggedOut()) {\n        throw new Error('user logged out!'); // throwing a synchronous error!\n      }\n      if (inMemoryCache[user.id]) {\n        return inMemoryCache[user.id];       // returning a synchronous value!\n      }\n      return getUserAccountById(user.id);    // returning a promise!\n    }).then(function (userAccount) {\n      // I got a user account!\n    }).catch(function (err) {\n      // Boo, I got an error!\n    });\n    ```\n    如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。\n\n    这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。\n\n\n### 进阶错误\n\n好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。\n\n这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。\n\n#### 进阶错误 #1：不知道 Promise.resolve()\n\n如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：\n\n```\nnew Promise(function (resolve, reject) {\n  resolve(someSynchronousValue);\n}).then(/* ... */);\n```\n\n你会发现使用 Promise.resolve 会更加简洁：\n```\nPromise.resolve(someSynchronousValue).then(/* ... */);\n```\n\n它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：\n\n```\nfunction somePromiseAPI() {\n  return Promise.resolve().then(function () {\n    doSomethingThatMayThrow();\n    return 'foo';\n  }).then(/* ... */);\n}\n```\n\n切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。\n\n类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。\n```\nPromise.reject(new Error('some awful error'));\n```\n\n#### 进阶错误 #2：catch() 与 then(null, ...) 并非完全等价\n\n之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：\n\n```\nsomePromise().catch(function (err) {\n  // handle error\n});\n\nsomePromise().then(null, function (err) {\n  // handle error\n});\n```\n\n然而，这并不意味着下面两段代码是等价的：\n\n```\nsomePromise().then(function () {\n  return someOtherPromise();\n}).catch(function (err) {\n  // handle error\n});\n\nsomePromise().then(function () {\n  return someOtherPromise();\n}, function (err) {\n  // handle error\n});\n```\n\n如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：\n\n```\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}).catch(function (err) {\n  // I caught your error! :)\n});\n\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}, function (err) {\n  // I didn't catch your error! :(\n});\n```\n因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。\n\n鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：\n\n```\nit('should throw an error', function () {\n  return doSomethingThatThrows().then(function () {\n    throw new Error('I expected an error!');\n  }, function (err) {\n    should.exist(err);\n  });\n});\n```\n说到这里，Mocha 和 Chai 用来测试 promise 接口时，是一对非常好的组合。 pouchdb-plugin-seed 项目中有一些 示例 可以帮助你入门。\n\n#### 进阶错误 #3：promises vs promises factories\n\n当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。\n\n你可能天真的写下这样的代码：\n\n```\nfunction executeSequentially(promises) {\n  var result = Promise.resolve();\n  promises.forEach(function (promise) {\n    result = result.then(promise);\n  });\n  return result;\n}\n```\n不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。\n\n其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。\n\n```\nfunction executeSequentially(promiseFactories) {\n  var result = Promise.resolve();\n  promiseFactories.forEach(function (promiseFactory) {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n```\n我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：\n\n```\nfunction myPromiseFactory() {\n  return somethingThatCreatesAPromise();\n}\n```\n\n为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。\n\n如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(...) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。\n\n#### 进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\n\n有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：\n\n```\ngetUserByName('nolan').then(function (user) {\n  return getUserAccountById(user.id);\n}).then(function (userAccount) {\n  // dangit, I need the \"user\" object too!\n});\n```\n\n为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：\n\n```\nvar user;\ngetUserByName('nolan').then(function (result) {\n  user = result;\n  return getUserAccountById(user.id);\n}).then(function (userAccount) {\n  // okay, I have both the \"user\" and the \"userAccount\"\n});\n```\n这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：\n```\ngetUserByName('nolan').then(function (user) {\n  return getUserAccountById(user.id).then(function (userAccount) {\n    // okay, I have both the \"user\" and the \"userAccount\"\n  });\n});\n```\n\n…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：\n\n```\nfunction onGetUserAndUserAccount(user, userAccount) {\n  return doSomething(user, userAccount);\n}\n\nfunction onGetUser(user) {\n  return getUserAccountById(user.id).then(function (userAccount) {\n    return onGetUserAndUserAccount(user, userAccount);\n  });\n}\n\ngetUserByName('nolan')\n  .then(onGetUser)\n  .then(function () {\n  // at this point, doSomething() is done, and we are back to indentation 0\n});\n```\n\n由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：\n\n```\nputYourRightFootIn()\n  .then(putYourRightFootOut)\n  .then(putYourRightFootIn)  \n  .then(shakeItAllAbout);\n```\n这就是 promises 的重点。\n\n#### 进阶错误 #5：promises 穿透\n\n最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。\n\n你认为下面的代码会打印出什么？\n\n```\nPromise.resolve('foo').then(Promise.resolve('bar')).then(function (result) {\n  console.log(result);\n});\n```\n\n如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！\n\n发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：\n\n```\nPromise.resolve('foo').then(null).then(function (result) {\n  console.log(result);\n});\n```\n添加任意数量的 then(null)，它依然会打印 foo。\n\n这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：\n\n```\nPromise.resolve('foo').then(function () {\n  return Promise.resolve('bar');\n}).then(function (result) {\n  console.log(result);\n});\n```\n\n这样他就会如我们所想的打印出 bar。\n\n因此记住：永远都是往 then() 中传递函数！\n\n### 谜题揭晓\n\n现在我们了解了关于 promsies 所有的知识（或者接近！），我们应该可以解决文章最开始我提出的谜题了。\n\n这里是谜题的所有答案，我以图形的格式展示出来方便你查看：\n\n#### Puzzle #1\n\n```\ndoSomething().then(function () {\n  return doSomethingElse();\n}).then(finalHandler);\n```\nAnswer:\n```\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n                                     ```\n#### Puzzle #2\n```\ndoSomething().then(function () {\n  doSomethingElse();\n}).then(finalHandler);\n```\nAnswer:\n```\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                  finalHandler(undefined)\n                  |------------------|\n```\n\n#### Puzzle #3\n```\ndoSomething().then(doSomethingElse())\n  .then(finalHandler);\n```\nAnswer:\n```\ndoSomething\n|-----------------|\ndoSomethingElse(undefined)\n|---------------------------------|\n                  finalHandler(resultOfDoSomething)\n                  |------------------|\n```\n\n#### Puzzle #4\n```\ndoSomething().then(doSomethingElse)\n  .then(finalHandler);\n  ```\nAnswer:\n```\ndoSomething\n|-----------------|\n                  doSomethingElse(resultOfDoSomething)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n```\n如果这些答案你依然无法理解，那么我强烈建议你重新读一下这篇文章，或者实现一下 doSomething() 和 doSomethingElse() 函数并且在浏览器中自己试试看。\n\n声明：在这些例子中，我假定 doSomething() 和 doSomethingElse() 均返回 promises，并且这些 promises 代表某些在 JavaScript event loop (如 IndexedDB, network, setTimeout) 之外的某些工作结束，这也是为何它们在某些时候表现起来像是并行执行的意义。这里是一个模拟用的 [JSBin](http://jsbin.com/tuqukakawo/1/edit?js,console,output)。\n关于更多 promises 的进阶用法，可以参考我的 [promise protips cheat sheet](https://gist.github.com/nolanlawson/6ce81186421d2fa109a4)\n\n### 关于 promises 最后的话\n\nPromises 是非常赞的。如果你还在使用回调模式，我强烈建议你切换到 promises。你的代码会变的更少，更优雅，并且更加容易理解。\n\n如果你不相信我，这里是证明：[a refactor of PouchDB’s map/reduce module](https://t.co/hRyc6ENYGC)，使用 promises 替换回调。结果是：新增 290 行，删除 555 行。\n\n顺带一提，写出那令人讨厌的回调代码的人。。是我！因此这是我第一次领会到 promises 的力量，同时我感谢其他 PouchDB 的贡献者们教导我这样做。\n\n当然了，promises 并非完美。虽然它的确比回调模式要好，但是这样说就好比说给你肚子来一拳会比在你牙齿上踹一脚好。的确，它是会略有优势，但是如果你有选择，你会两者都尽力避免。\n\n作为回调模式的升级版，promises 依然难以理解并且容易误用，证明之一就是我不得不写下这篇博文。初学者与专家都很容易经常将它用错，并且真要说的话，并非是他们的问题。问题在于 promises 的使用模式与我们写同步代码非常类似，但是又不尽然。\n\n> 我也认为 promises 的确难以理解并且容易误用，证明之一就是我不得不翻译这篇博文。 译者注\n\n老实说，你不应该需要去学一堆晦涩难懂的规则和新的 API 去做在同步代码中我们已经熟稔的 return，catch，throw 和 for 循环。在你的脑中不应该总是要提醒自己要区分有两套并行的系统。\n\n### 期待 async/await\n\n这是我在 [“Taming the asynchronous beast with ES7”](http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html) 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。\n\n这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。\n\n从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。\n\nES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。\n\n因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”\n\n> 更新：有人告知我 Bluebird 3.0 将会 打印警告 来避免我文中所列举的这些错误。因此当我们还在等待 ES7 时，使用 Bluebird 会是另一个极好的方案。\n","slug":"promise","published":1,"updated":"2018-02-05T16:36:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s7x000p9ms6hskar7ix","content":"<p><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">转自：[翻译] We have a problem with promises</a></p>\n<blockquote>\n<p>Q: 下面的四种 promises 的区别是什么</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  return doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse());</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当我尝试分析这道题的答案时，看了一半就楞(meng)住(bi)了，深深的怀疑我是否看过《你不知道的 JavaScript》中关于<code>异步和性能</code>的那章，看完这篇文章，有豁然开朗的感觉。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>用Javascript的小伙伴们，是时候承认了，关于 promises 我们一直存在着问题。并非说 promises 本身有问题，Promises/A+ 是极好的。</p>\n<p>就我过去数年观察大量 PouchDB API 以及其他 promise-heavy API 的使用者们与这些 API 的搏斗中我发现，最大的问题是：</p>\n<p>大部分使用 promises 的小伙伴们并没有真正的理解它</p>\n<p>如果你不认同这个观点，可以看看我最近在 <a href=\"https://twitter.com/nolanlawson/status/578948854411878400\" target=\"_blank\" rel=\"noopener\">twitter</a> 上出的这道题：</p>\n<blockquote>\n<p>Q: 下面的四种 promises 的区别是什么</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  return doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse());</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<p>如果你知道正常答案，那么我要恭喜你，你是一位 promises 大拿，你完全可以不再继续阅读这篇文件。</p>\n<p>另外 99.99% 的小伙伴们，你们才是正义。没有一个人在 twitter 上给出正确答案，甚至我自己也被 #3 的答案惊到了。恩，即使这道题是我自己出的。</p>\n<p>正确答案在这篇文章的结尾，在此之前，我希望首先探究一下为何为何 promises 如此复杂，并且为何有这么多人，无论是新手还是专家，都被它坑到了。同时我还会给出一个我自认为非常独特的视角，可以让 promises 变的更加容易理解。同时，我非常确信在了解这些之后，promises 并不会再难以理解。</p>\n<p>不过在开始这些之前，让我们先了解一些 promises 的基础知识。</p>\n<h3 id=\"Promises-的起源\"><a href=\"#Promises-的起源\" class=\"headerlink\" title=\"Promises 的起源\"></a>Promises 的起源</h3><p>如果你阅读了 promises 的一些相关文献，你会发现有一个词 <a href=\"https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf\" target=\"_blank\" rel=\"noopener\">金字塔问题</a> 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。</p>\n<p>Promises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 <a href=\"https://www.youtube.com/watch?v=hf1T_AONQJU&amp;feature=youtu.be\" target=\"_blank\" rel=\"noopener\">Callback Hell的救赎</a> 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。</p>\n<blockquote>\n<p>原文关于副作用的描述并不能很直观的进行理解，建议参考 <a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science\" target=\"_blank\" rel=\"noopener\">WIKI</a>) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。译者注。</p>\n</blockquote>\n<p>并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的 堆栈 破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。</p>\n<p>Promises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。</p>\n<h3 id=\"新手错误\"><a href=\"#新手错误\" class=\"headerlink\" title=\"新手错误\"></a>新手错误</h3><p>一些同学试图通过用 <a href=\"http://andyshora.com/promises-angularjs-explained-as-cartoon.html\" target=\"_blank\" rel=\"noopener\">卡通</a> 来描述 promises，或者试图用语言去描述它: “哦，你可以把它作为一个异步的值进行传递。”</p>\n<p>我认为这些解释并不会有很大的帮助。对我来说，promises 完全是一种代码结构和流程。因此我认为直接展示一些常见的错误并且演示如何修复它们更能够说明问题。我说这些问题是 “新手问题” ，这意味着 “虽然你现在是一个新手，孩子，但是马上你会变成一位专家”。</p>\n<p>小插曲: “promises” 对于不同的人有不同的理解和观点，但是在这篇文章中我特指 <a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">正式标准</a> ，在现代浏览器中暴露为 window.Promise。虽然并非所有浏览器都有 windows.Promise，但是可以寻找一些 pollyfill ，比如 <a href=\"https://github.com/calvinmetcalf/lie\" target=\"_blank\" rel=\"noopener\">Lie</a> 是目前体积最小的兼容标准的库。</p>\n<h4 id=\"新手错误-1：-promise版的金字塔问题\"><a href=\"#新手错误-1：-promise版的金字塔问题\" class=\"headerlink\" title=\"新手错误 #1： promise版的金字塔问题\"></a>新手错误 #1： promise版的金字塔问题</h4><p>观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remotedb.allDocs(&#123;</span><br><span class=\"line\">  include_docs: true,</span><br><span class=\"line\">  attachments: true</span><br><span class=\"line\">&#125;).then(function (result) &#123;</span><br><span class=\"line\">  var docs = result.rows;</span><br><span class=\"line\">  docs.forEach(function(element) &#123;</span><br><span class=\"line\">    localdb.put(element.doc).then(function(response) &#123;</span><br><span class=\"line\">      alert(&quot;Pulled doc with id &quot; + element.doc._id + &quot; and added to local db.&quot;);</span><br><span class=\"line\">    &#125;).catch(function (err) &#123;</span><br><span class=\"line\">      if (err.status == 409) &#123;</span><br><span class=\"line\">        localdb.get(element.doc._id).then(function (resp) &#123;</span><br><span class=\"line\">          localdb.remove(resp._id, resp._rev).then(function (resp) &#123;</span><br><span class=\"line\">// et cetera...</span><br></pre></td></tr></table></figure>\n<p>是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。</p>\n<p>并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)</p>\n<p>正确的风格应该是这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remotedb.allDocs(...).then(function (resultOfAllDocs) &#123;</span><br><span class=\"line\">  return localdb.put(...);</span><br><span class=\"line\">&#125;).then(function (resultOfPut) &#123;</span><br><span class=\"line\">  return localdb.get(...);</span><br><span class=\"line\">&#125;).then(function (resultOfGet) &#123;</span><br><span class=\"line\">  return localdb.put(...);</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  console.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。</p>\n<h4 id=\"新手错误-2：-WTF-用了-promises-后怎么用-forEach\"><a href=\"#新手错误-2：-WTF-用了-promises-后怎么用-forEach\" class=\"headerlink\" title=\"新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\"></a>新手错误 #2： WTF, 用了 promises 后怎么用 forEach?</h4><p>这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// I want to remove() all docs</span><br><span class=\"line\">db.allDocs(&#123;include_docs: true&#125;).then(function (result) &#123;</span><br><span class=\"line\">  result.rows.forEach(function (row) &#123;</span><br><span class=\"line\">    db.remove(row.doc);  </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(function () &#123;</span><br><span class=\"line\">  // I naively believe all docs have been removed() now!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！</p>\n<p>这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。</p>\n<p>简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.allDocs(&#123;include_docs: true&#125;).then(function (result) &#123;</span><br><span class=\"line\">  return Promise.all(result.rows.map(function (row) &#123;</span><br><span class=\"line\">    return db.remove(row.doc);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;).then(function (arrayOfResults) &#123;</span><br><span class=\"line\">  // All docs have really been removed() now!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。</p>\n<p>并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。</p>\n<h4 id=\"新手错误-3：-忘记使用-catch\"><a href=\"#新手错误-3：-忘记使用-catch\" class=\"headerlink\" title=\"新手错误 #3： 忘记使用 .catch()\"></a>新手错误 #3： 忘记使用 .catch()</h4><p>这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。</p>\n<p>类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注<br>为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  return anotherPromise();</span><br><span class=\"line\">&#125;).then(function () &#123;</span><br><span class=\"line\">  return yetAnotherPromise();</span><br><span class=\"line\">&#125;).catch(console.log.bind(console)); // &lt;-- this is badass</span><br></pre></td></tr></table></figure>\n<p>即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。</p>\n<h4 id=\"新手错误-4：使用-“deferred”\"><a href=\"#新手错误-4：使用-“deferred”\" class=\"headerlink\" title=\"新手错误 #4：使用 “deferred”\"></a>新手错误 #4：使用 “deferred”</h4><p>这是一个我<a href=\"https://gonehybrid.com/how-to-use-pouchdb-sqlite-for-local-storage-in-your-ionic-app/\" target=\"_blank\" rel=\"noopener\">经常可以看到的错误</a>，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。</p>\n<p>简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。</p>\n<p>因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。</p>\n<p>首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$q.when(db.put(doc)).then(/* ... */); // &lt;-- this is all the code you need</span><br></pre></td></tr></table></figure>\n<p>另一种策略是使用<a href=\"https://blog.domenic.me/the-revealing-constructor-pattern/\" target=\"_blank\" rel=\"noopener\">构造函数声明模式</a>，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  fs.readFile(&apos;myfile.txt&apos;, function (err, file) &#123;</span><br><span class=\"line\">    if (err) &#123;</span><br><span class=\"line\">      return reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(file);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(/* ... */)</span><br></pre></td></tr></table></figure>\n<p>完工！我们打败了可怕的 def….啊哈，抓到自己了。:)</p>\n<blockquote>\n<p>关于为何这是一种反模式更多的内容，请查看 Bluebird 的 <a href=\"https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern\" target=\"_blank\" rel=\"noopener\">promise anti-patterns wiki</a> 页</p>\n</blockquote>\n<h4 id=\"新手错误-5：使用副作用调用而非返回\"><a href=\"#新手错误-5：使用副作用调用而非返回\" class=\"headerlink\" title=\"新手错误 #5：使用副作用调用而非返回\"></a>新手错误 #5：使用副作用调用而非返回</h4><p>下面的代码有什么问题？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  someOtherPromise();</span><br><span class=\"line\">&#125;).then(function () &#123;</span><br><span class=\"line\">  // Gee, I hope someOtherPromise() has resolved!</span><br><span class=\"line\">  // Spoiler alert: it hasn&apos;t.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>好了，现在是时候讨论一下关于 promises 你所需要知道的一切。</p>\n<p>认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？</p>\n<p>就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？</p>\n<p>每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, …) 的语法糖)。当我们在 then() 函数内部时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  // I&apos;m inside a then() function!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们可以做什么呢？有三种事情：</p>\n<p>return 另一个 promise<br>return 一个同步的值 (或者 undefined)<br>throw 一个同步异常<br>就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。</p>\n<ul>\n<li><p>返回另一个 promise</p>\n<p>  这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id);</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // I got a user account!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  注意到我是 <code>return</code> 第二个 promise，这个 <code>return</code> 非常重要。如果我没有写 <code>return</code>，<code>getUserAccountById()</code> 就会成为一个副作用，并且下一个函数将会接收到 <code>undefined</code> 而非 <code>userAccount</code>。</p>\n</li>\n<li><p>返回一个同步值 (或者 undefined)</p>\n<p>  返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  if (inMemoryCache[user.id]) &#123;</span><br><span class=\"line\">    return inMemoryCache[user.id];    // returning a synchronous value!</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return getUserAccountById(user.id); // returning a promise!</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // I got a user account!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。</p>\n<p>  不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。</p>\n<p>  出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。</p>\n</li>\n<li><p>抛出同步异常</p>\n<p>  谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  if (user.isLoggedOut()) &#123;</span><br><span class=\"line\">    throw new Error(&apos;user logged out!&apos;); // throwing a synchronous error!</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (inMemoryCache[user.id]) &#123;</span><br><span class=\"line\">    return inMemoryCache[user.id];       // returning a synchronous value!</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return getUserAccountById(user.id);    // returning a promise!</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // I got a user account!</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // Boo, I got an error!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。</p>\n<p>  这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。</p>\n</li>\n</ul>\n<h3 id=\"进阶错误\"><a href=\"#进阶错误\" class=\"headerlink\" title=\"进阶错误\"></a>进阶错误</h3><p>好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。</p>\n<p>这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。</p>\n<h4 id=\"进阶错误-1：不知道-Promise-resolve\"><a href=\"#进阶错误-1：不知道-Promise-resolve\" class=\"headerlink\" title=\"进阶错误 #1：不知道 Promise.resolve()\"></a>进阶错误 #1：不知道 Promise.resolve()</h4><p>如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(someSynchronousValue);</span><br><span class=\"line\">&#125;).then(/* ... */);</span><br></pre></td></tr></table></figure>\n<p>你会发现使用 Promise.resolve 会更加简洁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(someSynchronousValue).then(/* ... */);</span><br></pre></td></tr></table></figure></p>\n<p>它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function somePromiseAPI() &#123;</span><br><span class=\"line\">  return Promise.resolve().then(function () &#123;</span><br><span class=\"line\">    doSomethingThatMayThrow();</span><br><span class=\"line\">    return &apos;foo&apos;;</span><br><span class=\"line\">  &#125;).then(/* ... */);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。</p>\n<p>类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.reject(new Error(&apos;some awful error&apos;));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"进阶错误-2：catch-与-then-null-…-并非完全等价\"><a href=\"#进阶错误-2：catch-与-then-null-…-并非完全等价\" class=\"headerlink\" title=\"进阶错误 #2：catch() 与 then(null, …) 并非完全等价\"></a>进阶错误 #2：catch() 与 then(null, …) 并非完全等价</h4><p>之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().catch(function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(null, function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然而，这并不意味着下面两段代码是等价的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  return someOtherPromise();</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  return someOtherPromise();</span><br><span class=\"line\">&#125;, function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  throw new Error(&apos;oh noes&apos;);</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // I caught your error! :)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  throw new Error(&apos;oh noes&apos;);</span><br><span class=\"line\">&#125;, function (err) &#123;</span><br><span class=\"line\">  // I didn&apos;t catch your error! :(</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。</p>\n<p>鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(&apos;should throw an error&apos;, function () &#123;</span><br><span class=\"line\">  return doSomethingThatThrows().then(function () &#123;</span><br><span class=\"line\">    throw new Error(&apos;I expected an error!&apos;);</span><br><span class=\"line\">  &#125;, function (err) &#123;</span><br><span class=\"line\">    should.exist(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>说到这里，Mocha 和 Chai 用来测试 promise 接口时，是一对非常好的组合。 pouchdb-plugin-seed 项目中有一些 示例 可以帮助你入门。</p>\n<h4 id=\"进阶错误-3：promises-vs-promises-factories\"><a href=\"#进阶错误-3：promises-vs-promises-factories\" class=\"headerlink\" title=\"进阶错误 #3：promises vs promises factories\"></a>进阶错误 #3：promises vs promises factories</h4><p>当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。</p>\n<p>你可能天真的写下这样的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function executeSequentially(promises) &#123;</span><br><span class=\"line\">  var result = Promise.resolve();</span><br><span class=\"line\">  promises.forEach(function (promise) &#123;</span><br><span class=\"line\">    result = result.then(promise);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。</p>\n<p>其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function executeSequentially(promiseFactories) &#123;</span><br><span class=\"line\">  var result = Promise.resolve();</span><br><span class=\"line\">  promiseFactories.forEach(function (promiseFactory) &#123;</span><br><span class=\"line\">    result = result.then(promiseFactory);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myPromiseFactory() &#123;</span><br><span class=\"line\">  return somethingThatCreatesAPromise();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。</p>\n<p>如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(…) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。</p>\n<h4 id=\"进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\"><a href=\"#进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\" class=\"headerlink\" title=\"进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\"></a>进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办</h4><p>有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id);</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // dangit, I need the &quot;user&quot; object too!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var user;</span><br><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (result) &#123;</span><br><span class=\"line\">  user = result;</span><br><span class=\"line\">  return getUserAccountById(user.id);</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // okay, I have both the &quot;user&quot; and the &quot;userAccount&quot;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id).then(function (userAccount) &#123;</span><br><span class=\"line\">    // okay, I have both the &quot;user&quot; and the &quot;userAccount&quot;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function onGetUserAndUserAccount(user, userAccount) &#123;</span><br><span class=\"line\">  return doSomething(user, userAccount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function onGetUser(user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id).then(function (userAccount) &#123;</span><br><span class=\"line\">    return onGetUserAndUserAccount(user, userAccount);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getUserByName(&apos;nolan&apos;)</span><br><span class=\"line\">  .then(onGetUser)</span><br><span class=\"line\">  .then(function () &#123;</span><br><span class=\"line\">  // at this point, doSomething() is done, and we are back to indentation 0</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">putYourRightFootIn()</span><br><span class=\"line\">  .then(putYourRightFootOut)</span><br><span class=\"line\">  .then(putYourRightFootIn)  </span><br><span class=\"line\">  .then(shakeItAllAbout);</span><br></pre></td></tr></table></figure>\n<p>这就是 promises 的重点。</p>\n<h4 id=\"进阶错误-5：promises-穿透\"><a href=\"#进阶错误-5：promises-穿透\" class=\"headerlink\" title=\"进阶错误 #5：promises 穿透\"></a>进阶错误 #5：promises 穿透</h4><p>最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。</p>\n<p>你认为下面的代码会打印出什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;).then(Promise.resolve(&apos;bar&apos;)).then(function (result) &#123;</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！</p>\n<p>发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;).then(null).then(function (result) &#123;</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>添加任意数量的 then(null)，它依然会打印 foo。</p>\n<p>这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;).then(function () &#123;</span><br><span class=\"line\">  return Promise.resolve(&apos;bar&apos;);</span><br><span class=\"line\">&#125;).then(function (result) &#123;</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样他就会如我们所想的打印出 bar。</p>\n<p>因此记住：永远都是往 then() 中传递函数！</p>\n<h3 id=\"谜题揭晓\"><a href=\"#谜题揭晓\" class=\"headerlink\" title=\"谜题揭晓\"></a>谜题揭晓</h3><p>现在我们了解了关于 promsies 所有的知识（或者接近！），我们应该可以解决文章最开始我提出的谜题了。</p>\n<p>这里是谜题的所有答案，我以图形的格式展示出来方便你查看：</p>\n<h4 id=\"Puzzle-1\"><a href=\"#Puzzle-1\" class=\"headerlink\" title=\"Puzzle #1\"></a>Puzzle #1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  return doSomethingElse();</span><br><span class=\"line\">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(undefined)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Puzzle-2\"><a href=\"#Puzzle-2\" class=\"headerlink\" title=\"Puzzle #2\"></a>Puzzle #2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  doSomethingElse();</span><br><span class=\"line\">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(undefined)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                  finalHandler(undefined)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Puzzle-3\"><a href=\"#Puzzle-3\" class=\"headerlink\" title=\"Puzzle #3\"></a>Puzzle #3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(doSomethingElse())</span><br><span class=\"line\">  .then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">doSomethingElse(undefined)</span><br><span class=\"line\">|---------------------------------|</span><br><span class=\"line\">                  finalHandler(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Puzzle-4\"><a href=\"#Puzzle-4\" class=\"headerlink\" title=\"Puzzle #4\"></a>Puzzle #4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(doSomethingElse)</span><br><span class=\"line\">  .then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure></p>\n<p>如果这些答案你依然无法理解，那么我强烈建议你重新读一下这篇文章，或者实现一下 doSomething() 和 doSomethingElse() 函数并且在浏览器中自己试试看。</p>\n<p>声明：在这些例子中，我假定 doSomething() 和 doSomethingElse() 均返回 promises，并且这些 promises 代表某些在 JavaScript event loop (如 IndexedDB, network, setTimeout) 之外的某些工作结束，这也是为何它们在某些时候表现起来像是并行执行的意义。这里是一个模拟用的 <a href=\"http://jsbin.com/tuqukakawo/1/edit?js,console,output\" target=\"_blank\" rel=\"noopener\">JSBin</a>。<br>关于更多 promises 的进阶用法，可以参考我的 <a href=\"https://gist.github.com/nolanlawson/6ce81186421d2fa109a4\" target=\"_blank\" rel=\"noopener\">promise protips cheat sheet</a></p>\n<h3 id=\"关于-promises-最后的话\"><a href=\"#关于-promises-最后的话\" class=\"headerlink\" title=\"关于 promises 最后的话\"></a>关于 promises 最后的话</h3><p>Promises 是非常赞的。如果你还在使用回调模式，我强烈建议你切换到 promises。你的代码会变的更少，更优雅，并且更加容易理解。</p>\n<p>如果你不相信我，这里是证明：<a href=\"https://t.co/hRyc6ENYGC\" target=\"_blank\" rel=\"noopener\">a refactor of PouchDB’s map/reduce module</a>，使用 promises 替换回调。结果是：新增 290 行，删除 555 行。</p>\n<p>顺带一提，写出那令人讨厌的回调代码的人。。是我！因此这是我第一次领会到 promises 的力量，同时我感谢其他 PouchDB 的贡献者们教导我这样做。</p>\n<p>当然了，promises 并非完美。虽然它的确比回调模式要好，但是这样说就好比说给你肚子来一拳会比在你牙齿上踹一脚好。的确，它是会略有优势，但是如果你有选择，你会两者都尽力避免。</p>\n<p>作为回调模式的升级版，promises 依然难以理解并且容易误用，证明之一就是我不得不写下这篇博文。初学者与专家都很容易经常将它用错，并且真要说的话，并非是他们的问题。问题在于 promises 的使用模式与我们写同步代码非常类似，但是又不尽然。</p>\n<blockquote>\n<p>我也认为 promises 的确难以理解并且容易误用，证明之一就是我不得不翻译这篇博文。 译者注</p>\n</blockquote>\n<p>老实说，你不应该需要去学一堆晦涩难懂的规则和新的 API 去做在同步代码中我们已经熟稔的 return，catch，throw 和 for 循环。在你的脑中不应该总是要提醒自己要区分有两套并行的系统。</p>\n<h3 id=\"期待-async-await\"><a href=\"#期待-async-await\" class=\"headerlink\" title=\"期待 async/await\"></a>期待 async/await</h3><p>这是我在 <a href=\"http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html\" target=\"_blank\" rel=\"noopener\">“Taming the asynchronous beast with ES7”</a> 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。</p>\n<p>这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。</p>\n<p>从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。</p>\n<p>ES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。</p>\n<p>因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”</p>\n<blockquote>\n<p>更新：有人告知我 Bluebird 3.0 将会 打印警告 来避免我文中所列举的这些错误。因此当我们还在等待 ES7 时，使用 Bluebird 会是另一个极好的方案。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">转自：[翻译] We have a problem with promises</a></p>\n<blockquote>\n<p>Q: 下面的四种 promises 的区别是什么</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  return doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse());</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当我尝试分析这道题的答案时，看了一半就楞(meng)住(bi)了，深深的怀疑我是否看过《你不知道的 JavaScript》中关于<code>异步和性能</code>的那章，看完这篇文章，有豁然开朗的感觉。</p>\n</blockquote>","more":"<p>用Javascript的小伙伴们，是时候承认了，关于 promises 我们一直存在着问题。并非说 promises 本身有问题，Promises/A+ 是极好的。</p>\n<p>就我过去数年观察大量 PouchDB API 以及其他 promise-heavy API 的使用者们与这些 API 的搏斗中我发现，最大的问题是：</p>\n<p>大部分使用 promises 的小伙伴们并没有真正的理解它</p>\n<p>如果你不认同这个观点，可以看看我最近在 <a href=\"https://twitter.com/nolanlawson/status/578948854411878400\" target=\"_blank\" rel=\"noopener\">twitter</a> 上出的这道题：</p>\n<blockquote>\n<p>Q: 下面的四种 promises 的区别是什么</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  return doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  doSomethingElse();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse());</span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<p>如果你知道正常答案，那么我要恭喜你，你是一位 promises 大拿，你完全可以不再继续阅读这篇文件。</p>\n<p>另外 99.99% 的小伙伴们，你们才是正义。没有一个人在 twitter 上给出正确答案，甚至我自己也被 #3 的答案惊到了。恩，即使这道题是我自己出的。</p>\n<p>正确答案在这篇文章的结尾，在此之前，我希望首先探究一下为何为何 promises 如此复杂，并且为何有这么多人，无论是新手还是专家，都被它坑到了。同时我还会给出一个我自认为非常独特的视角，可以让 promises 变的更加容易理解。同时，我非常确信在了解这些之后，promises 并不会再难以理解。</p>\n<p>不过在开始这些之前，让我们先了解一些 promises 的基础知识。</p>\n<h3 id=\"Promises-的起源\"><a href=\"#Promises-的起源\" class=\"headerlink\" title=\"Promises 的起源\"></a>Promises 的起源</h3><p>如果你阅读了 promises 的一些相关文献，你会发现有一个词 <a href=\"https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf\" target=\"_blank\" rel=\"noopener\">金字塔问题</a> 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。</p>\n<p>Promises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 <a href=\"https://www.youtube.com/watch?v=hf1T_AONQJU&amp;feature=youtu.be\" target=\"_blank\" rel=\"noopener\">Callback Hell的救赎</a> 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。</p>\n<blockquote>\n<p>原文关于副作用的描述并不能很直观的进行理解，建议参考 <a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science\" target=\"_blank\" rel=\"noopener\">WIKI</a>) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。译者注。</p>\n</blockquote>\n<p>并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的 堆栈 破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。</p>\n<p>Promises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。</p>\n<h3 id=\"新手错误\"><a href=\"#新手错误\" class=\"headerlink\" title=\"新手错误\"></a>新手错误</h3><p>一些同学试图通过用 <a href=\"http://andyshora.com/promises-angularjs-explained-as-cartoon.html\" target=\"_blank\" rel=\"noopener\">卡通</a> 来描述 promises，或者试图用语言去描述它: “哦，你可以把它作为一个异步的值进行传递。”</p>\n<p>我认为这些解释并不会有很大的帮助。对我来说，promises 完全是一种代码结构和流程。因此我认为直接展示一些常见的错误并且演示如何修复它们更能够说明问题。我说这些问题是 “新手问题” ，这意味着 “虽然你现在是一个新手，孩子，但是马上你会变成一位专家”。</p>\n<p>小插曲: “promises” 对于不同的人有不同的理解和观点，但是在这篇文章中我特指 <a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">正式标准</a> ，在现代浏览器中暴露为 window.Promise。虽然并非所有浏览器都有 windows.Promise，但是可以寻找一些 pollyfill ，比如 <a href=\"https://github.com/calvinmetcalf/lie\" target=\"_blank\" rel=\"noopener\">Lie</a> 是目前体积最小的兼容标准的库。</p>\n<h4 id=\"新手错误-1：-promise版的金字塔问题\"><a href=\"#新手错误-1：-promise版的金字塔问题\" class=\"headerlink\" title=\"新手错误 #1： promise版的金字塔问题\"></a>新手错误 #1： promise版的金字塔问题</h4><p>观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remotedb.allDocs(&#123;</span><br><span class=\"line\">  include_docs: true,</span><br><span class=\"line\">  attachments: true</span><br><span class=\"line\">&#125;).then(function (result) &#123;</span><br><span class=\"line\">  var docs = result.rows;</span><br><span class=\"line\">  docs.forEach(function(element) &#123;</span><br><span class=\"line\">    localdb.put(element.doc).then(function(response) &#123;</span><br><span class=\"line\">      alert(&quot;Pulled doc with id &quot; + element.doc._id + &quot; and added to local db.&quot;);</span><br><span class=\"line\">    &#125;).catch(function (err) &#123;</span><br><span class=\"line\">      if (err.status == 409) &#123;</span><br><span class=\"line\">        localdb.get(element.doc._id).then(function (resp) &#123;</span><br><span class=\"line\">          localdb.remove(resp._id, resp._rev).then(function (resp) &#123;</span><br><span class=\"line\">// et cetera...</span><br></pre></td></tr></table></figure>\n<p>是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。</p>\n<p>并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)</p>\n<p>正确的风格应该是这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remotedb.allDocs(...).then(function (resultOfAllDocs) &#123;</span><br><span class=\"line\">  return localdb.put(...);</span><br><span class=\"line\">&#125;).then(function (resultOfPut) &#123;</span><br><span class=\"line\">  return localdb.get(...);</span><br><span class=\"line\">&#125;).then(function (resultOfGet) &#123;</span><br><span class=\"line\">  return localdb.put(...);</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  console.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。</p>\n<h4 id=\"新手错误-2：-WTF-用了-promises-后怎么用-forEach\"><a href=\"#新手错误-2：-WTF-用了-promises-后怎么用-forEach\" class=\"headerlink\" title=\"新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\"></a>新手错误 #2： WTF, 用了 promises 后怎么用 forEach?</h4><p>这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// I want to remove() all docs</span><br><span class=\"line\">db.allDocs(&#123;include_docs: true&#125;).then(function (result) &#123;</span><br><span class=\"line\">  result.rows.forEach(function (row) &#123;</span><br><span class=\"line\">    db.remove(row.doc);  </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(function () &#123;</span><br><span class=\"line\">  // I naively believe all docs have been removed() now!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！</p>\n<p>这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。</p>\n<p>简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.allDocs(&#123;include_docs: true&#125;).then(function (result) &#123;</span><br><span class=\"line\">  return Promise.all(result.rows.map(function (row) &#123;</span><br><span class=\"line\">    return db.remove(row.doc);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;).then(function (arrayOfResults) &#123;</span><br><span class=\"line\">  // All docs have really been removed() now!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。</p>\n<p>并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。</p>\n<h4 id=\"新手错误-3：-忘记使用-catch\"><a href=\"#新手错误-3：-忘记使用-catch\" class=\"headerlink\" title=\"新手错误 #3： 忘记使用 .catch()\"></a>新手错误 #3： 忘记使用 .catch()</h4><p>这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。</p>\n<p>类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注<br>为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  return anotherPromise();</span><br><span class=\"line\">&#125;).then(function () &#123;</span><br><span class=\"line\">  return yetAnotherPromise();</span><br><span class=\"line\">&#125;).catch(console.log.bind(console)); // &lt;-- this is badass</span><br></pre></td></tr></table></figure>\n<p>即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。</p>\n<h4 id=\"新手错误-4：使用-“deferred”\"><a href=\"#新手错误-4：使用-“deferred”\" class=\"headerlink\" title=\"新手错误 #4：使用 “deferred”\"></a>新手错误 #4：使用 “deferred”</h4><p>这是一个我<a href=\"https://gonehybrid.com/how-to-use-pouchdb-sqlite-for-local-storage-in-your-ionic-app/\" target=\"_blank\" rel=\"noopener\">经常可以看到的错误</a>，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。</p>\n<p>简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。</p>\n<p>因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。</p>\n<p>首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$q.when(db.put(doc)).then(/* ... */); // &lt;-- this is all the code you need</span><br></pre></td></tr></table></figure>\n<p>另一种策略是使用<a href=\"https://blog.domenic.me/the-revealing-constructor-pattern/\" target=\"_blank\" rel=\"noopener\">构造函数声明模式</a>，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  fs.readFile(&apos;myfile.txt&apos;, function (err, file) &#123;</span><br><span class=\"line\">    if (err) &#123;</span><br><span class=\"line\">      return reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(file);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(/* ... */)</span><br></pre></td></tr></table></figure>\n<p>完工！我们打败了可怕的 def….啊哈，抓到自己了。:)</p>\n<blockquote>\n<p>关于为何这是一种反模式更多的内容，请查看 Bluebird 的 <a href=\"https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern\" target=\"_blank\" rel=\"noopener\">promise anti-patterns wiki</a> 页</p>\n</blockquote>\n<h4 id=\"新手错误-5：使用副作用调用而非返回\"><a href=\"#新手错误-5：使用副作用调用而非返回\" class=\"headerlink\" title=\"新手错误 #5：使用副作用调用而非返回\"></a>新手错误 #5：使用副作用调用而非返回</h4><p>下面的代码有什么问题？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  someOtherPromise();</span><br><span class=\"line\">&#125;).then(function () &#123;</span><br><span class=\"line\">  // Gee, I hope someOtherPromise() has resolved!</span><br><span class=\"line\">  // Spoiler alert: it hasn&apos;t.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>好了，现在是时候讨论一下关于 promises 你所需要知道的一切。</p>\n<p>认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？</p>\n<p>就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？</p>\n<p>每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, …) 的语法糖)。当我们在 then() 函数内部时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  // I&apos;m inside a then() function!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们可以做什么呢？有三种事情：</p>\n<p>return 另一个 promise<br>return 一个同步的值 (或者 undefined)<br>throw 一个同步异常<br>就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。</p>\n<ul>\n<li><p>返回另一个 promise</p>\n<p>  这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id);</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // I got a user account!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  注意到我是 <code>return</code> 第二个 promise，这个 <code>return</code> 非常重要。如果我没有写 <code>return</code>，<code>getUserAccountById()</code> 就会成为一个副作用，并且下一个函数将会接收到 <code>undefined</code> 而非 <code>userAccount</code>。</p>\n</li>\n<li><p>返回一个同步值 (或者 undefined)</p>\n<p>  返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  if (inMemoryCache[user.id]) &#123;</span><br><span class=\"line\">    return inMemoryCache[user.id];    // returning a synchronous value!</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return getUserAccountById(user.id); // returning a promise!</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // I got a user account!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。</p>\n<p>  不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。</p>\n<p>  出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。</p>\n</li>\n<li><p>抛出同步异常</p>\n<p>  谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  if (user.isLoggedOut()) &#123;</span><br><span class=\"line\">    throw new Error(&apos;user logged out!&apos;); // throwing a synchronous error!</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (inMemoryCache[user.id]) &#123;</span><br><span class=\"line\">    return inMemoryCache[user.id];       // returning a synchronous value!</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return getUserAccountById(user.id);    // returning a promise!</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // I got a user account!</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // Boo, I got an error!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。</p>\n<p>  这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。</p>\n</li>\n</ul>\n<h3 id=\"进阶错误\"><a href=\"#进阶错误\" class=\"headerlink\" title=\"进阶错误\"></a>进阶错误</h3><p>好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。</p>\n<p>这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。</p>\n<h4 id=\"进阶错误-1：不知道-Promise-resolve\"><a href=\"#进阶错误-1：不知道-Promise-resolve\" class=\"headerlink\" title=\"进阶错误 #1：不知道 Promise.resolve()\"></a>进阶错误 #1：不知道 Promise.resolve()</h4><p>如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(someSynchronousValue);</span><br><span class=\"line\">&#125;).then(/* ... */);</span><br></pre></td></tr></table></figure>\n<p>你会发现使用 Promise.resolve 会更加简洁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(someSynchronousValue).then(/* ... */);</span><br></pre></td></tr></table></figure></p>\n<p>它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function somePromiseAPI() &#123;</span><br><span class=\"line\">  return Promise.resolve().then(function () &#123;</span><br><span class=\"line\">    doSomethingThatMayThrow();</span><br><span class=\"line\">    return &apos;foo&apos;;</span><br><span class=\"line\">  &#125;).then(/* ... */);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。</p>\n<p>类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.reject(new Error(&apos;some awful error&apos;));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"进阶错误-2：catch-与-then-null-…-并非完全等价\"><a href=\"#进阶错误-2：catch-与-then-null-…-并非完全等价\" class=\"headerlink\" title=\"进阶错误 #2：catch() 与 then(null, …) 并非完全等价\"></a>进阶错误 #2：catch() 与 then(null, …) 并非完全等价</h4><p>之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().catch(function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(null, function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然而，这并不意味着下面两段代码是等价的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  return someOtherPromise();</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  return someOtherPromise();</span><br><span class=\"line\">&#125;, function (err) &#123;</span><br><span class=\"line\">  // handle error</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  throw new Error(&apos;oh noes&apos;);</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // I caught your error! :)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(function () &#123;</span><br><span class=\"line\">  throw new Error(&apos;oh noes&apos;);</span><br><span class=\"line\">&#125;, function (err) &#123;</span><br><span class=\"line\">  // I didn&apos;t catch your error! :(</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。</p>\n<p>鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(&apos;should throw an error&apos;, function () &#123;</span><br><span class=\"line\">  return doSomethingThatThrows().then(function () &#123;</span><br><span class=\"line\">    throw new Error(&apos;I expected an error!&apos;);</span><br><span class=\"line\">  &#125;, function (err) &#123;</span><br><span class=\"line\">    should.exist(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>说到这里，Mocha 和 Chai 用来测试 promise 接口时，是一对非常好的组合。 pouchdb-plugin-seed 项目中有一些 示例 可以帮助你入门。</p>\n<h4 id=\"进阶错误-3：promises-vs-promises-factories\"><a href=\"#进阶错误-3：promises-vs-promises-factories\" class=\"headerlink\" title=\"进阶错误 #3：promises vs promises factories\"></a>进阶错误 #3：promises vs promises factories</h4><p>当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。</p>\n<p>你可能天真的写下这样的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function executeSequentially(promises) &#123;</span><br><span class=\"line\">  var result = Promise.resolve();</span><br><span class=\"line\">  promises.forEach(function (promise) &#123;</span><br><span class=\"line\">    result = result.then(promise);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。</p>\n<p>其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function executeSequentially(promiseFactories) &#123;</span><br><span class=\"line\">  var result = Promise.resolve();</span><br><span class=\"line\">  promiseFactories.forEach(function (promiseFactory) &#123;</span><br><span class=\"line\">    result = result.then(promiseFactory);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myPromiseFactory() &#123;</span><br><span class=\"line\">  return somethingThatCreatesAPromise();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。</p>\n<p>如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(…) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。</p>\n<h4 id=\"进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\"><a href=\"#进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\" class=\"headerlink\" title=\"进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\"></a>进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办</h4><p>有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id);</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // dangit, I need the &quot;user&quot; object too!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var user;</span><br><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (result) &#123;</span><br><span class=\"line\">  user = result;</span><br><span class=\"line\">  return getUserAccountById(user.id);</span><br><span class=\"line\">&#125;).then(function (userAccount) &#123;</span><br><span class=\"line\">  // okay, I have both the &quot;user&quot; and the &quot;userAccount&quot;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserByName(&apos;nolan&apos;).then(function (user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id).then(function (userAccount) &#123;</span><br><span class=\"line\">    // okay, I have both the &quot;user&quot; and the &quot;userAccount&quot;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function onGetUserAndUserAccount(user, userAccount) &#123;</span><br><span class=\"line\">  return doSomething(user, userAccount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function onGetUser(user) &#123;</span><br><span class=\"line\">  return getUserAccountById(user.id).then(function (userAccount) &#123;</span><br><span class=\"line\">    return onGetUserAndUserAccount(user, userAccount);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getUserByName(&apos;nolan&apos;)</span><br><span class=\"line\">  .then(onGetUser)</span><br><span class=\"line\">  .then(function () &#123;</span><br><span class=\"line\">  // at this point, doSomething() is done, and we are back to indentation 0</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">putYourRightFootIn()</span><br><span class=\"line\">  .then(putYourRightFootOut)</span><br><span class=\"line\">  .then(putYourRightFootIn)  </span><br><span class=\"line\">  .then(shakeItAllAbout);</span><br></pre></td></tr></table></figure>\n<p>这就是 promises 的重点。</p>\n<h4 id=\"进阶错误-5：promises-穿透\"><a href=\"#进阶错误-5：promises-穿透\" class=\"headerlink\" title=\"进阶错误 #5：promises 穿透\"></a>进阶错误 #5：promises 穿透</h4><p>最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。</p>\n<p>你认为下面的代码会打印出什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;).then(Promise.resolve(&apos;bar&apos;)).then(function (result) &#123;</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！</p>\n<p>发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;).then(null).then(function (result) &#123;</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>添加任意数量的 then(null)，它依然会打印 foo。</p>\n<p>这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;).then(function () &#123;</span><br><span class=\"line\">  return Promise.resolve(&apos;bar&apos;);</span><br><span class=\"line\">&#125;).then(function (result) &#123;</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样他就会如我们所想的打印出 bar。</p>\n<p>因此记住：永远都是往 then() 中传递函数！</p>\n<h3 id=\"谜题揭晓\"><a href=\"#谜题揭晓\" class=\"headerlink\" title=\"谜题揭晓\"></a>谜题揭晓</h3><p>现在我们了解了关于 promsies 所有的知识（或者接近！），我们应该可以解决文章最开始我提出的谜题了。</p>\n<p>这里是谜题的所有答案，我以图形的格式展示出来方便你查看：</p>\n<h4 id=\"Puzzle-1\"><a href=\"#Puzzle-1\" class=\"headerlink\" title=\"Puzzle #1\"></a>Puzzle #1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  return doSomethingElse();</span><br><span class=\"line\">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(undefined)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Puzzle-2\"><a href=\"#Puzzle-2\" class=\"headerlink\" title=\"Puzzle #2\"></a>Puzzle #2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(function () &#123;</span><br><span class=\"line\">  doSomethingElse();</span><br><span class=\"line\">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(undefined)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                  finalHandler(undefined)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Puzzle-3\"><a href=\"#Puzzle-3\" class=\"headerlink\" title=\"Puzzle #3\"></a>Puzzle #3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(doSomethingElse())</span><br><span class=\"line\">  .then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">doSomethingElse(undefined)</span><br><span class=\"line\">|---------------------------------|</span><br><span class=\"line\">                  finalHandler(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Puzzle-4\"><a href=\"#Puzzle-4\" class=\"headerlink\" title=\"Puzzle #4\"></a>Puzzle #4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(doSomethingElse)</span><br><span class=\"line\">  .then(finalHandler);</span><br></pre></td></tr></table></figure>\n<p>Answer:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure></p>\n<p>如果这些答案你依然无法理解，那么我强烈建议你重新读一下这篇文章，或者实现一下 doSomething() 和 doSomethingElse() 函数并且在浏览器中自己试试看。</p>\n<p>声明：在这些例子中，我假定 doSomething() 和 doSomethingElse() 均返回 promises，并且这些 promises 代表某些在 JavaScript event loop (如 IndexedDB, network, setTimeout) 之外的某些工作结束，这也是为何它们在某些时候表现起来像是并行执行的意义。这里是一个模拟用的 <a href=\"http://jsbin.com/tuqukakawo/1/edit?js,console,output\" target=\"_blank\" rel=\"noopener\">JSBin</a>。<br>关于更多 promises 的进阶用法，可以参考我的 <a href=\"https://gist.github.com/nolanlawson/6ce81186421d2fa109a4\" target=\"_blank\" rel=\"noopener\">promise protips cheat sheet</a></p>\n<h3 id=\"关于-promises-最后的话\"><a href=\"#关于-promises-最后的话\" class=\"headerlink\" title=\"关于 promises 最后的话\"></a>关于 promises 最后的话</h3><p>Promises 是非常赞的。如果你还在使用回调模式，我强烈建议你切换到 promises。你的代码会变的更少，更优雅，并且更加容易理解。</p>\n<p>如果你不相信我，这里是证明：<a href=\"https://t.co/hRyc6ENYGC\" target=\"_blank\" rel=\"noopener\">a refactor of PouchDB’s map/reduce module</a>，使用 promises 替换回调。结果是：新增 290 行，删除 555 行。</p>\n<p>顺带一提，写出那令人讨厌的回调代码的人。。是我！因此这是我第一次领会到 promises 的力量，同时我感谢其他 PouchDB 的贡献者们教导我这样做。</p>\n<p>当然了，promises 并非完美。虽然它的确比回调模式要好，但是这样说就好比说给你肚子来一拳会比在你牙齿上踹一脚好。的确，它是会略有优势，但是如果你有选择，你会两者都尽力避免。</p>\n<p>作为回调模式的升级版，promises 依然难以理解并且容易误用，证明之一就是我不得不写下这篇博文。初学者与专家都很容易经常将它用错，并且真要说的话，并非是他们的问题。问题在于 promises 的使用模式与我们写同步代码非常类似，但是又不尽然。</p>\n<blockquote>\n<p>我也认为 promises 的确难以理解并且容易误用，证明之一就是我不得不翻译这篇博文。 译者注</p>\n</blockquote>\n<p>老实说，你不应该需要去学一堆晦涩难懂的规则和新的 API 去做在同步代码中我们已经熟稔的 return，catch，throw 和 for 循环。在你的脑中不应该总是要提醒自己要区分有两套并行的系统。</p>\n<h3 id=\"期待-async-await\"><a href=\"#期待-async-await\" class=\"headerlink\" title=\"期待 async/await\"></a>期待 async/await</h3><p>这是我在 <a href=\"http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html\" target=\"_blank\" rel=\"noopener\">“Taming the asynchronous beast with ES7”</a> 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。</p>\n<p>这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。</p>\n<p>从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。</p>\n<p>ES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。</p>\n<p>因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”</p>\n<blockquote>\n<p>更新：有人告知我 Bluebird 3.0 将会 打印警告 来避免我文中所列举的这些错误。因此当我们还在等待 ES7 时，使用 Bluebird 会是另一个极好的方案。</p>\n</blockquote>"},{"title":"【译】vuex 基础：教程和说明","date":"2017-06-04T07:00:00.000Z","_content":"\n原文地址：[Vuex basics: Tutorial and explanation](https://skyronic.com/2016/01/03/vuex-basics-tutorial)\n\n作者注：[2016.11 更新]这篇文章是基于一个非常旧的 vuex api 版本而写的，代码来自于2015年12月。\n但是，它仍能针对下面几个问题深入探讨：\n1. vuex 为什么重要\n2. vuex 如何工作\n3. vuex 如何使你的应用更容易维护\n\nvuex 是 vue.js 作者开发的一个原型库，它帮助你创建更大、维护性更强的应用，类似于 Facebook 的 flux 库（以及由社区维护的 redux 库）。\n这篇文章不直接跳到 vuex 教你如何使用它，而是从背后的故事开始说起，逐步解释它为什么是优雅的替代方法，以及将如何帮助你。\n\n译者注：[a git repo of vuex-tutorial use vue2.0](https://github.com/letica/vuex-tutorial)\n<!-- more -->\n\n## 你想要创建什么应用？\n\n![target](/img/trans_vuex20170531/target.png)\n\n一个拥有`按钮`和`计数器`的简单应用，点击按钮计数器加1。这听起来非常容易理解和完成。\n\n![problem](/img/trans_vuex20170531/problem.dot.png)\n\n我们假设这个应用有两个组件：\n1. 按钮 （它是事件的来源）\n2. 计数器 （它必须按照事件来反映更新）\n\n这两个组件不知道彼此的存在，也不能相互通信。即使是在最小的 web 应用中，这也是一种非常常见的模式。在更大点儿的应用中，十几个组件相互通信，并时刻关注对方的变化。不相信我？这里是一个基础的 TODOlist 应用的交互清单：\n\n![todo](/img/trans_vuex20170531/todo.dot.png)\n\n## 这篇文章的目标\n\n我们将讨论解决同一个问题的3种方法：\n1. 组件之间使用事件广播来通信\n2. 使用一个共享的状态对象通信\n3. 使用 vuex 通信\n\n读完这篇文章，希望你能理解：\n1. 在你的项目中使用 vuex 的一个基本工作流程\n2. 它解决了哪些问题\n3. 相对其他方法，为什么它是更好的（尽管有些冗长和严格）\n\n## 准备工作\n\n我们将使用3种不同的方法来解决同一个问题。在这之前，需要做一些共同的准备工作。如果你打算跟着我做，我建议你为这个教程创建一个 git repo，这一小节结束后提交一次代码，然后为不同的方法创建不同的分支。\n\n```\n$ npm install -g vue-cli\n$ vue init webpack vuex-tutorial\n$ cd vuex-tutorial\n$ npm install\n$ npm install --save vuex\n$ npm run dev\n```\n\n现在你应该能看到 vue 的脚手架页面了，下面来为我们要做的事来修改一些文件。\n\n首先，在文件 `src/components/IncrementButton.vue` 中创建 `IncrementButton` 组件：\n\n```\n<template>\n    <button @click.prevent=\"activate\">+1</button>\n</template>\n\n<script>\nexport default {\n    methods: {\n        activate () {\n            console.log('+1 Pressed')\n        }\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n下一步，在文件 `src/components/CounterDisplay.vue` 中创建 `CounterDisplay` 组件来展示计数：\n\n```\n<template>\n    Count is {{ count }}\n</template>\n\n<script>\nexport default {\n    data () {\n        return {\n            count: 0\n        }\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n使用下面的内容替换 `App.vue`：\n\n```\n<template>\n    <div id=\"app\">\n        <h3>Increment:</h3>\n        <increment></increment>\n        <h3>Counter:</h3>\n        <counter></counter>\n    </div>\n</template>\n\n<script>\nimport Counter from './components/CounterDisplay.vue'\nimport Increment from './components/IncrementButton.vue'\n\nexport default {\n    components: {\n        Counter,\n        Increment\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n现在，重新运行 `npm run dev`，在浏览器打开页面，你应该看到一个 `按钮` 和一个 `计数器`。点击按钮，控制台将显示一条信息，其它没什么变化。\n现在我们已经来到了起点，开始吧。\n\n## 方法1：事件广播\n\n![solution1](/img/trans_vuex20170531/solution1.dot.png)\n\n来修改组件的代码。\n首先在 `IncrementButton.vue` 中，在按钮被点击时使用 `$dispatch` 给父组件发送一个消息。\n\n```\nexport default {\n    methods: {\n        activate () {\n            // Send an event upwards to be picked up by App\n            this.$dispatch('button-pressed')\n        }\n    }\n}\n```\n\n在 `App.vue` 中监听来自子组件的这个消息事件，然后广播一个新的事件 `increment` 给所有的子组件：\n\n```\nexport default {\n    components: {\n        Counter,\n        Increment\n    },\n    events: {\n        'button-pressed': function () {\n            // Send a message to all children\n            this.$broadcast('increment')\n        }\n    }\n}\n```\n\n在 `CounterDisplay.vue` 中，监听 `increment` 事件，并增加状态数据中的变量：\n\n```\nexport default {\n    data () {\n        return {\n            count: 0\n        }\n    },\n    events: {\n        increment () {\n            this.count++\n        }\n    }\n}\n```\n\n**这个方法的缺点：**\n\n这个方法基本没有什么技术上的错误。此外，在一个文件里实现整个应用的逻辑，专门使用 goto 来跳转也没有错。这只与可维护性有关，这里会讲一下为什么这个方法在可维护性上是糟糕的。\n\n1. 对于每一个操作，父组件都需要将事件分发给正确的组件；\n2. 在大型应用中，可能很难理解事件是从哪儿来的；\n3. 业务逻辑没有明确的位置。`this.count++` 是在 `CounterDisplay` 中，但业务逻辑可能到处都是，这会导致难以维护。\n\n**让我来举例说明一下这个方法会怎样导致bug：**\n\n1. 你雇了两个实习生： Alice 和 Bob。你告诉 Alice 你需要为另外一个组件实现另一个计数器，告诉 Bob 写一个重置按钮；\n2. Alice 写了一个新的组件 `FormattedCounterDisplay`，它能够监听增量，并增加自己的状态数据。Alice 开心的提交了代码；\n3. Bob 写了一个新的 `Reset` 组件，它向应用发出一个 `reset` 事件，并重新分发它。他在 `CounterDisplay` 中将 count 重置为0，但是他没有意识到 Alice 的组件也订阅了这个变化；\n4. 你的用户点击 `+1` 按钮后看到应用工作正常。但是当他点击 `重置` 按钮，只有一个计数器被重置了。这看起来是一个非常简单的例子，仅仅为了说明状态和业务逻辑绑在一起可能会导致错误。\n\n\n## 方法2： 共享状态\n\n撤销方法1中的改动，创建一个新文件 `src/store.js`：\n\n```\nexport default {\n    state: {\n        counter: 0\n    }\n}\n```\n\n首先修改 `CounterDisplay.vue`：\n\n```\n<template>\n    Count is {{ sharedState.counter }}\n</template>\n\n<script>\nimport store from '../store'\n\nexport default {\n    data () {\n        return {\n            sharedState: store.state\n        }\n    }\n}\n</script>\n```\n\n**这里我们做了一些有趣的事情：**\n\n1. 获取到一个 store 对象，它仅仅是一个对象常量，但是在不同的文件中定义的；\n2. 在本地数据中，我们创建了一个叫 `sharedState` 的数据，它映射到 `store.state`；\n3. vue 使用 `store.state` 作为当前组件的一部分数据，这意味着 `store.state` 有任何变化，vue 都会自动更新 `sharedState`。\n\n到目前为止它还不能工作，现在我们来修改 `IncrementButton.vue`：\n\n```\nimport store from '../store'\n\nexport default {\n    data () {\n        return {\n            sharedState: store.state\n        }\n    },\n    methods: {\n        activate () {\n            this.sharedState.counter += 1\n        }\n    }\n}\n```\n\n1. 在这里，我们引入 `store`，并像之前的例子一样监听了数据的状态变化；\n2. 当 `activate` 方法被调用时，指向 `store.state` 的 `sharedState` 的计数器 counter 增加；\n3. 监听了计数器的所有组件和计算属性都会被更新。\n\n### 它为什么比方法1更好\n\n我们来回顾一下两个实习生 Alice 和 Bob 的问题：\n\n1. Alice 写的用来监听共享数据的 `FormattedComponentDisplay` 组件将会始终显示最新的 counter 数据；\n2. Bob 的重置按钮组件将共享数据的 counter 置为0，这将同时影响 `CounterDisplay` 和 Alice 写的 `FormattedCounterDisplay`；\n3. 重置按钮符合预期。\n\n### 为什么这样仍然不够好\n\n1. 在 Alice 和 Bob 的实习期内，他们使用不同的格式写了许多计数器、重置按钮，以及增量按钮，它们更新的是同一份共享的数据，生活很美好；\n2. 一旦他们回到学校，你需要维护他们的代码；\n3. 新任经理 Carol 进来之后说：“我不想看到计数器的数字超过100”\n\n### 你现在该做什么？\n\n1. 你去十几个组件的代码里找到所有更新数据的地方吗？这让人沮丧；\n2. 你找到显示数据的地方然后添加一个 `filter/formatter` 来格式化数据吗？这同样让人沮丧；\n3. 这里就是这个问题，业务逻辑分散在应用的各个角落，原则上一个很简单的问题，但是维护和调试起来却特别痛苦。\n\n### 稍好一点儿的方法\n\n现在来重构你的代码，重写 `store.js` 如下：\n\n```\nvar store = {\n    state: {\n        counter: 0\n    },\n    increment: function () {\n        if (store.state.counter < 100) {\n            store.state.counter += 1;\n        }\n    },\n    reset: function () {\n        store.state.counter = 0;\n    }\n}\n\nexport default store\n```\n\n显式调用 `increment` 并将所有业务逻辑都放进 `store` 后代码看起来清晰了许多。然而，一个新实习生不知道这背后的理论，他发现在应用的其他部分直接写入 `store.state.counter` 更容易，于是一切变得难于调试。\n然后，你制定大量严格的规则和代码审查，以确保没有人在 `store.js` 中不使用函数的情况下修改状态数据。如果这都不起作用，那你可以告诉hr结束他的实习了。\n\n## 方法3：vuex\n\n回滚方法2里的修改，原则上 vuex 的工作原理与方法2有些相似。给你看一张稍稍有些可怕的图：\n\n![solution3](/img/trans_vuex20170531/solution3.dot.png)\n\n首先来创建 `src/store.js`，这次用下面的代码：\n\n```\nimport Vuex from 'vuex'\nimport Vue from 'vue'\n\nVue.use(Vuex)\n\nvar store = new Vuex.Store({\n    state: {\n        counter: 0\n    },\n    mutations: {\n        INCREMENT (state) {\n            state.counter++\n        }\n    }\n})\n\nexport default store\n```\n\n**现在来看看这段代码做了什么：**\n\n1. 获取 Vuex 模块，然后使用 `Vue.use` 安装这个插件；\n2. `store` 不再是一个普通的 JSON 对象，而是 `Vuex.Store` 的一个实例；\n3. 在 `state` 中创建一个计数器 `counter`，设置为0；\n4. 创建一个新的变异对象，包含 `INCREMENT` 方法：获取一个状态数据，然后改变它。\n\n**看看这段代码里有哪些有趣的东东：**\n\n1. 所有通过 `require('../store.js')` 或 `import store from '../store.js'` 引入的 `store` 将使用同一个 store 实例；\n2. 我们不会修改 `store.state.counter`，但是我们有一份 `state` 的拷贝用来做修改，这在接下来会很重要。\n\n现在我们已经改好了 store，来继续修改 `IncrementButton.vue`：\n\n```\nimport store from '../store'\n\nexport default {\n    methods: {\n        activate () {\n            store.dispatch('INCREMENT')\n        }\n    }\n}\n```\n\n这个组件没有任何数据，但是点击的时候调用 `store.dispatch('INCREMENT')`，一会儿再返回来看。\n\n下面更新一下 `CounterDisplay.vue`：\n\n```\n<template>\n    Count is {{ counter }}\n</template>\n\n<script>\nimport store from '../store'\n\nexport default {\n    computed: {\n        counter () {\n            return store.state.counter\n        }\n    }\n}\n</script>\n```\n\n事情从这儿才真正有趣！我们不再订阅共享的状态数据的变化，而是使用 vue 的计算属性来给 counter 同步 store 中的数据。\nVue 足够聪明来计算出基于 `store.state.counter` 的计算属性 `counter`，无论 store 何时被更新，它将更新所有的关联项。That's it!\n\n**如果你刷新这个页面，你将看到计数器依然正确工作。下面将逐步解释发生了什么：**\n\n1. vue 的事件处理函数是 `activate`，这个方法调用了 `store.dispatch('INCREMENT')`；\n2. 在这里，`INCREMENT` 是一个动作的名称。它表示 “这是 state 应该做出的那种改变”。我们还可以传递额外的其他参数给分发函数；\n3. vue 指明了分发事件时应该调用哪个函数。现在我们只有一个，但是我们可以为大型应用定制的更复杂；\n4. 这个函数接收状态数据的拷贝，并对它进行更新。vue 保留一份旧数据的拷贝用于后续的高级功能；\n5. 当状态更新之后，vue 自动更新所有组件；\n6. 这些使得你的代码可测试性更强，如果你做了这些的话。\n\n### 这里是比办法2更好的原因\n\n假如在开发过程中所有状态的拷贝都被保存下来，vue 开发者建立起所谓的“时间旅行调试器”是非常有可能的。除了一个听起来超酷的超级英雄的名字，它将允许你在应用中撤销行为、改变逻辑，以及开发的更快。\n只要状态改变，你就可以构建中间件。例如，你可以创建一个 logger 来记录用户执行的所有操作。如果他们发现了一个bug，你可以获取到用户日志，重新播放所有的行为，并正确的重现他们的bug。\n通过强制你在一个地方（store）进行所有的动作，这是一个很好的参考，你团队中的每一个人都可以使用你应用中所有修改状态数据的方法。\n\n### 还有很长的路要走\n\n这里仅仅接触到了 vuex 表面可以做的事情，它自身仍然是一个早期版本，我相信这将成为未来许多年里最成熟的模式之一。\n你可以去网上找到关于如何组织 store 以及 vuex 文档的更多信息。你可能需要花一些时间来理解所有的概念，甚至可能需要一些尝试和错误才能找出正确的方法。\n\n## 结语：处理实习生的代码\n\n你将应用移植到 vue.js，你的实习生仍旧可以找到方法在自己的组件中重写 `store.state.counter`。你明白的，这是最后一根稻草。然后继续在你的 `store.js` 中增加一行代码：\n\n```\nvar store = new Vuex.Store({\n  state: {\n    counter: 0\n  },\n  mutations: {\n    INCREMENT (state) {\n      state.counter++\n    }\n  },\n  strict: true // Vuex's patent pending anti-intern device\n})\n```\n\n现在无论何时何人直接修改 store，将会抛出一个错误。请注意这会减慢你的应用运行的时间，这个配置可以在生产环境移除，相关示例请查文档。\n","source":"_posts/trans_vuex_basics_tutorial.md","raw":"title: 【译】vuex 基础：教程和说明\ndate: 2017-06-04 15:00:00\ncategories: front-end\ntags: vuex\n---\n\n原文地址：[Vuex basics: Tutorial and explanation](https://skyronic.com/2016/01/03/vuex-basics-tutorial)\n\n作者注：[2016.11 更新]这篇文章是基于一个非常旧的 vuex api 版本而写的，代码来自于2015年12月。\n但是，它仍能针对下面几个问题深入探讨：\n1. vuex 为什么重要\n2. vuex 如何工作\n3. vuex 如何使你的应用更容易维护\n\nvuex 是 vue.js 作者开发的一个原型库，它帮助你创建更大、维护性更强的应用，类似于 Facebook 的 flux 库（以及由社区维护的 redux 库）。\n这篇文章不直接跳到 vuex 教你如何使用它，而是从背后的故事开始说起，逐步解释它为什么是优雅的替代方法，以及将如何帮助你。\n\n译者注：[a git repo of vuex-tutorial use vue2.0](https://github.com/letica/vuex-tutorial)\n<!-- more -->\n\n## 你想要创建什么应用？\n\n![target](/img/trans_vuex20170531/target.png)\n\n一个拥有`按钮`和`计数器`的简单应用，点击按钮计数器加1。这听起来非常容易理解和完成。\n\n![problem](/img/trans_vuex20170531/problem.dot.png)\n\n我们假设这个应用有两个组件：\n1. 按钮 （它是事件的来源）\n2. 计数器 （它必须按照事件来反映更新）\n\n这两个组件不知道彼此的存在，也不能相互通信。即使是在最小的 web 应用中，这也是一种非常常见的模式。在更大点儿的应用中，十几个组件相互通信，并时刻关注对方的变化。不相信我？这里是一个基础的 TODOlist 应用的交互清单：\n\n![todo](/img/trans_vuex20170531/todo.dot.png)\n\n## 这篇文章的目标\n\n我们将讨论解决同一个问题的3种方法：\n1. 组件之间使用事件广播来通信\n2. 使用一个共享的状态对象通信\n3. 使用 vuex 通信\n\n读完这篇文章，希望你能理解：\n1. 在你的项目中使用 vuex 的一个基本工作流程\n2. 它解决了哪些问题\n3. 相对其他方法，为什么它是更好的（尽管有些冗长和严格）\n\n## 准备工作\n\n我们将使用3种不同的方法来解决同一个问题。在这之前，需要做一些共同的准备工作。如果你打算跟着我做，我建议你为这个教程创建一个 git repo，这一小节结束后提交一次代码，然后为不同的方法创建不同的分支。\n\n```\n$ npm install -g vue-cli\n$ vue init webpack vuex-tutorial\n$ cd vuex-tutorial\n$ npm install\n$ npm install --save vuex\n$ npm run dev\n```\n\n现在你应该能看到 vue 的脚手架页面了，下面来为我们要做的事来修改一些文件。\n\n首先，在文件 `src/components/IncrementButton.vue` 中创建 `IncrementButton` 组件：\n\n```\n<template>\n    <button @click.prevent=\"activate\">+1</button>\n</template>\n\n<script>\nexport default {\n    methods: {\n        activate () {\n            console.log('+1 Pressed')\n        }\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n下一步，在文件 `src/components/CounterDisplay.vue` 中创建 `CounterDisplay` 组件来展示计数：\n\n```\n<template>\n    Count is {{ count }}\n</template>\n\n<script>\nexport default {\n    data () {\n        return {\n            count: 0\n        }\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n使用下面的内容替换 `App.vue`：\n\n```\n<template>\n    <div id=\"app\">\n        <h3>Increment:</h3>\n        <increment></increment>\n        <h3>Counter:</h3>\n        <counter></counter>\n    </div>\n</template>\n\n<script>\nimport Counter from './components/CounterDisplay.vue'\nimport Increment from './components/IncrementButton.vue'\n\nexport default {\n    components: {\n        Counter,\n        Increment\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n现在，重新运行 `npm run dev`，在浏览器打开页面，你应该看到一个 `按钮` 和一个 `计数器`。点击按钮，控制台将显示一条信息，其它没什么变化。\n现在我们已经来到了起点，开始吧。\n\n## 方法1：事件广播\n\n![solution1](/img/trans_vuex20170531/solution1.dot.png)\n\n来修改组件的代码。\n首先在 `IncrementButton.vue` 中，在按钮被点击时使用 `$dispatch` 给父组件发送一个消息。\n\n```\nexport default {\n    methods: {\n        activate () {\n            // Send an event upwards to be picked up by App\n            this.$dispatch('button-pressed')\n        }\n    }\n}\n```\n\n在 `App.vue` 中监听来自子组件的这个消息事件，然后广播一个新的事件 `increment` 给所有的子组件：\n\n```\nexport default {\n    components: {\n        Counter,\n        Increment\n    },\n    events: {\n        'button-pressed': function () {\n            // Send a message to all children\n            this.$broadcast('increment')\n        }\n    }\n}\n```\n\n在 `CounterDisplay.vue` 中，监听 `increment` 事件，并增加状态数据中的变量：\n\n```\nexport default {\n    data () {\n        return {\n            count: 0\n        }\n    },\n    events: {\n        increment () {\n            this.count++\n        }\n    }\n}\n```\n\n**这个方法的缺点：**\n\n这个方法基本没有什么技术上的错误。此外，在一个文件里实现整个应用的逻辑，专门使用 goto 来跳转也没有错。这只与可维护性有关，这里会讲一下为什么这个方法在可维护性上是糟糕的。\n\n1. 对于每一个操作，父组件都需要将事件分发给正确的组件；\n2. 在大型应用中，可能很难理解事件是从哪儿来的；\n3. 业务逻辑没有明确的位置。`this.count++` 是在 `CounterDisplay` 中，但业务逻辑可能到处都是，这会导致难以维护。\n\n**让我来举例说明一下这个方法会怎样导致bug：**\n\n1. 你雇了两个实习生： Alice 和 Bob。你告诉 Alice 你需要为另外一个组件实现另一个计数器，告诉 Bob 写一个重置按钮；\n2. Alice 写了一个新的组件 `FormattedCounterDisplay`，它能够监听增量，并增加自己的状态数据。Alice 开心的提交了代码；\n3. Bob 写了一个新的 `Reset` 组件，它向应用发出一个 `reset` 事件，并重新分发它。他在 `CounterDisplay` 中将 count 重置为0，但是他没有意识到 Alice 的组件也订阅了这个变化；\n4. 你的用户点击 `+1` 按钮后看到应用工作正常。但是当他点击 `重置` 按钮，只有一个计数器被重置了。这看起来是一个非常简单的例子，仅仅为了说明状态和业务逻辑绑在一起可能会导致错误。\n\n\n## 方法2： 共享状态\n\n撤销方法1中的改动，创建一个新文件 `src/store.js`：\n\n```\nexport default {\n    state: {\n        counter: 0\n    }\n}\n```\n\n首先修改 `CounterDisplay.vue`：\n\n```\n<template>\n    Count is {{ sharedState.counter }}\n</template>\n\n<script>\nimport store from '../store'\n\nexport default {\n    data () {\n        return {\n            sharedState: store.state\n        }\n    }\n}\n</script>\n```\n\n**这里我们做了一些有趣的事情：**\n\n1. 获取到一个 store 对象，它仅仅是一个对象常量，但是在不同的文件中定义的；\n2. 在本地数据中，我们创建了一个叫 `sharedState` 的数据，它映射到 `store.state`；\n3. vue 使用 `store.state` 作为当前组件的一部分数据，这意味着 `store.state` 有任何变化，vue 都会自动更新 `sharedState`。\n\n到目前为止它还不能工作，现在我们来修改 `IncrementButton.vue`：\n\n```\nimport store from '../store'\n\nexport default {\n    data () {\n        return {\n            sharedState: store.state\n        }\n    },\n    methods: {\n        activate () {\n            this.sharedState.counter += 1\n        }\n    }\n}\n```\n\n1. 在这里，我们引入 `store`，并像之前的例子一样监听了数据的状态变化；\n2. 当 `activate` 方法被调用时，指向 `store.state` 的 `sharedState` 的计数器 counter 增加；\n3. 监听了计数器的所有组件和计算属性都会被更新。\n\n### 它为什么比方法1更好\n\n我们来回顾一下两个实习生 Alice 和 Bob 的问题：\n\n1. Alice 写的用来监听共享数据的 `FormattedComponentDisplay` 组件将会始终显示最新的 counter 数据；\n2. Bob 的重置按钮组件将共享数据的 counter 置为0，这将同时影响 `CounterDisplay` 和 Alice 写的 `FormattedCounterDisplay`；\n3. 重置按钮符合预期。\n\n### 为什么这样仍然不够好\n\n1. 在 Alice 和 Bob 的实习期内，他们使用不同的格式写了许多计数器、重置按钮，以及增量按钮，它们更新的是同一份共享的数据，生活很美好；\n2. 一旦他们回到学校，你需要维护他们的代码；\n3. 新任经理 Carol 进来之后说：“我不想看到计数器的数字超过100”\n\n### 你现在该做什么？\n\n1. 你去十几个组件的代码里找到所有更新数据的地方吗？这让人沮丧；\n2. 你找到显示数据的地方然后添加一个 `filter/formatter` 来格式化数据吗？这同样让人沮丧；\n3. 这里就是这个问题，业务逻辑分散在应用的各个角落，原则上一个很简单的问题，但是维护和调试起来却特别痛苦。\n\n### 稍好一点儿的方法\n\n现在来重构你的代码，重写 `store.js` 如下：\n\n```\nvar store = {\n    state: {\n        counter: 0\n    },\n    increment: function () {\n        if (store.state.counter < 100) {\n            store.state.counter += 1;\n        }\n    },\n    reset: function () {\n        store.state.counter = 0;\n    }\n}\n\nexport default store\n```\n\n显式调用 `increment` 并将所有业务逻辑都放进 `store` 后代码看起来清晰了许多。然而，一个新实习生不知道这背后的理论，他发现在应用的其他部分直接写入 `store.state.counter` 更容易，于是一切变得难于调试。\n然后，你制定大量严格的规则和代码审查，以确保没有人在 `store.js` 中不使用函数的情况下修改状态数据。如果这都不起作用，那你可以告诉hr结束他的实习了。\n\n## 方法3：vuex\n\n回滚方法2里的修改，原则上 vuex 的工作原理与方法2有些相似。给你看一张稍稍有些可怕的图：\n\n![solution3](/img/trans_vuex20170531/solution3.dot.png)\n\n首先来创建 `src/store.js`，这次用下面的代码：\n\n```\nimport Vuex from 'vuex'\nimport Vue from 'vue'\n\nVue.use(Vuex)\n\nvar store = new Vuex.Store({\n    state: {\n        counter: 0\n    },\n    mutations: {\n        INCREMENT (state) {\n            state.counter++\n        }\n    }\n})\n\nexport default store\n```\n\n**现在来看看这段代码做了什么：**\n\n1. 获取 Vuex 模块，然后使用 `Vue.use` 安装这个插件；\n2. `store` 不再是一个普通的 JSON 对象，而是 `Vuex.Store` 的一个实例；\n3. 在 `state` 中创建一个计数器 `counter`，设置为0；\n4. 创建一个新的变异对象，包含 `INCREMENT` 方法：获取一个状态数据，然后改变它。\n\n**看看这段代码里有哪些有趣的东东：**\n\n1. 所有通过 `require('../store.js')` 或 `import store from '../store.js'` 引入的 `store` 将使用同一个 store 实例；\n2. 我们不会修改 `store.state.counter`，但是我们有一份 `state` 的拷贝用来做修改，这在接下来会很重要。\n\n现在我们已经改好了 store，来继续修改 `IncrementButton.vue`：\n\n```\nimport store from '../store'\n\nexport default {\n    methods: {\n        activate () {\n            store.dispatch('INCREMENT')\n        }\n    }\n}\n```\n\n这个组件没有任何数据，但是点击的时候调用 `store.dispatch('INCREMENT')`，一会儿再返回来看。\n\n下面更新一下 `CounterDisplay.vue`：\n\n```\n<template>\n    Count is {{ counter }}\n</template>\n\n<script>\nimport store from '../store'\n\nexport default {\n    computed: {\n        counter () {\n            return store.state.counter\n        }\n    }\n}\n</script>\n```\n\n事情从这儿才真正有趣！我们不再订阅共享的状态数据的变化，而是使用 vue 的计算属性来给 counter 同步 store 中的数据。\nVue 足够聪明来计算出基于 `store.state.counter` 的计算属性 `counter`，无论 store 何时被更新，它将更新所有的关联项。That's it!\n\n**如果你刷新这个页面，你将看到计数器依然正确工作。下面将逐步解释发生了什么：**\n\n1. vue 的事件处理函数是 `activate`，这个方法调用了 `store.dispatch('INCREMENT')`；\n2. 在这里，`INCREMENT` 是一个动作的名称。它表示 “这是 state 应该做出的那种改变”。我们还可以传递额外的其他参数给分发函数；\n3. vue 指明了分发事件时应该调用哪个函数。现在我们只有一个，但是我们可以为大型应用定制的更复杂；\n4. 这个函数接收状态数据的拷贝，并对它进行更新。vue 保留一份旧数据的拷贝用于后续的高级功能；\n5. 当状态更新之后，vue 自动更新所有组件；\n6. 这些使得你的代码可测试性更强，如果你做了这些的话。\n\n### 这里是比办法2更好的原因\n\n假如在开发过程中所有状态的拷贝都被保存下来，vue 开发者建立起所谓的“时间旅行调试器”是非常有可能的。除了一个听起来超酷的超级英雄的名字，它将允许你在应用中撤销行为、改变逻辑，以及开发的更快。\n只要状态改变，你就可以构建中间件。例如，你可以创建一个 logger 来记录用户执行的所有操作。如果他们发现了一个bug，你可以获取到用户日志，重新播放所有的行为，并正确的重现他们的bug。\n通过强制你在一个地方（store）进行所有的动作，这是一个很好的参考，你团队中的每一个人都可以使用你应用中所有修改状态数据的方法。\n\n### 还有很长的路要走\n\n这里仅仅接触到了 vuex 表面可以做的事情，它自身仍然是一个早期版本，我相信这将成为未来许多年里最成熟的模式之一。\n你可以去网上找到关于如何组织 store 以及 vuex 文档的更多信息。你可能需要花一些时间来理解所有的概念，甚至可能需要一些尝试和错误才能找出正确的方法。\n\n## 结语：处理实习生的代码\n\n你将应用移植到 vue.js，你的实习生仍旧可以找到方法在自己的组件中重写 `store.state.counter`。你明白的，这是最后一根稻草。然后继续在你的 `store.js` 中增加一行代码：\n\n```\nvar store = new Vuex.Store({\n  state: {\n    counter: 0\n  },\n  mutations: {\n    INCREMENT (state) {\n      state.counter++\n    }\n  },\n  strict: true // Vuex's patent pending anti-intern device\n})\n```\n\n现在无论何时何人直接修改 store，将会抛出一个错误。请注意这会减慢你的应用运行的时间，这个配置可以在生产环境移除，相关示例请查文档。\n","slug":"trans_vuex_basics_tutorial","published":1,"updated":"2018-02-05T16:36:30.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdag5s80000t9ms6j44c58g2","content":"<p>原文地址：<a href=\"https://skyronic.com/2016/01/03/vuex-basics-tutorial\" target=\"_blank\" rel=\"noopener\">Vuex basics: Tutorial and explanation</a></p>\n<p>作者注：[2016.11 更新]这篇文章是基于一个非常旧的 vuex api 版本而写的，代码来自于2015年12月。<br>但是，它仍能针对下面几个问题深入探讨：</p>\n<ol>\n<li>vuex 为什么重要</li>\n<li>vuex 如何工作</li>\n<li>vuex 如何使你的应用更容易维护</li>\n</ol>\n<p>vuex 是 vue.js 作者开发的一个原型库，它帮助你创建更大、维护性更强的应用，类似于 Facebook 的 flux 库（以及由社区维护的 redux 库）。<br>这篇文章不直接跳到 vuex 教你如何使用它，而是从背后的故事开始说起，逐步解释它为什么是优雅的替代方法，以及将如何帮助你。</p>\n<p>译者注：<a href=\"https://github.com/letica/vuex-tutorial\" target=\"_blank\" rel=\"noopener\">a git repo of vuex-tutorial use vue2.0</a><br><a id=\"more\"></a></p>\n<h2 id=\"你想要创建什么应用？\"><a href=\"#你想要创建什么应用？\" class=\"headerlink\" title=\"你想要创建什么应用？\"></a>你想要创建什么应用？</h2><p><img src=\"/img/trans_vuex20170531/target.png\" alt=\"target\"></p>\n<p>一个拥有<code>按钮</code>和<code>计数器</code>的简单应用，点击按钮计数器加1。这听起来非常容易理解和完成。</p>\n<p><img src=\"/img/trans_vuex20170531/problem.dot.png\" alt=\"problem\"></p>\n<p>我们假设这个应用有两个组件：</p>\n<ol>\n<li>按钮 （它是事件的来源）</li>\n<li>计数器 （它必须按照事件来反映更新）</li>\n</ol>\n<p>这两个组件不知道彼此的存在，也不能相互通信。即使是在最小的 web 应用中，这也是一种非常常见的模式。在更大点儿的应用中，十几个组件相互通信，并时刻关注对方的变化。不相信我？这里是一个基础的 TODOlist 应用的交互清单：</p>\n<p><img src=\"/img/trans_vuex20170531/todo.dot.png\" alt=\"todo\"></p>\n<h2 id=\"这篇文章的目标\"><a href=\"#这篇文章的目标\" class=\"headerlink\" title=\"这篇文章的目标\"></a>这篇文章的目标</h2><p>我们将讨论解决同一个问题的3种方法：</p>\n<ol>\n<li>组件之间使用事件广播来通信</li>\n<li>使用一个共享的状态对象通信</li>\n<li>使用 vuex 通信</li>\n</ol>\n<p>读完这篇文章，希望你能理解：</p>\n<ol>\n<li>在你的项目中使用 vuex 的一个基本工作流程</li>\n<li>它解决了哪些问题</li>\n<li>相对其他方法，为什么它是更好的（尽管有些冗长和严格）</li>\n</ol>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>我们将使用3种不同的方法来解决同一个问题。在这之前，需要做一些共同的准备工作。如果你打算跟着我做，我建议你为这个教程创建一个 git repo，这一小节结束后提交一次代码，然后为不同的方法创建不同的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\">$ vue init webpack vuex-tutorial</span><br><span class=\"line\">$ cd vuex-tutorial</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install --save vuex</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>现在你应该能看到 vue 的脚手架页面了，下面来为我们要做的事来修改一些文件。</p>\n<p>首先，在文件 <code>src/components/IncrementButton.vue</code> 中创建 <code>IncrementButton</code> 组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;button @click.prevent=&quot;activate&quot;&gt;+1&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            console.log(&apos;+1 Pressed&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>下一步，在文件 <code>src/components/CounterDisplay.vue</code> 中创建 <code>CounterDisplay</code> 组件来展示计数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    Count is &#123;&#123; count &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            count: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>使用下面的内容替换 <code>App.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h3&gt;Increment:&lt;/h3&gt;</span><br><span class=\"line\">        &lt;increment&gt;&lt;/increment&gt;</span><br><span class=\"line\">        &lt;h3&gt;Counter:&lt;/h3&gt;</span><br><span class=\"line\">        &lt;counter&gt;&lt;/counter&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Counter from &apos;./components/CounterDisplay.vue&apos;</span><br><span class=\"line\">import Increment from &apos;./components/IncrementButton.vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Counter,</span><br><span class=\"line\">        Increment</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>现在，重新运行 <code>npm run dev</code>，在浏览器打开页面，你应该看到一个 <code>按钮</code> 和一个 <code>计数器</code>。点击按钮，控制台将显示一条信息，其它没什么变化。<br>现在我们已经来到了起点，开始吧。</p>\n<h2 id=\"方法1：事件广播\"><a href=\"#方法1：事件广播\" class=\"headerlink\" title=\"方法1：事件广播\"></a>方法1：事件广播</h2><p><img src=\"/img/trans_vuex20170531/solution1.dot.png\" alt=\"solution1\"></p>\n<p>来修改组件的代码。<br>首先在 <code>IncrementButton.vue</code> 中，在按钮被点击时使用 <code>$dispatch</code> 给父组件发送一个消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            // Send an event upwards to be picked up by App</span><br><span class=\"line\">            this.$dispatch(&apos;button-pressed&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>App.vue</code> 中监听来自子组件的这个消息事件，然后广播一个新的事件 <code>increment</code> 给所有的子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Counter,</span><br><span class=\"line\">        Increment</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    events: &#123;</span><br><span class=\"line\">        &apos;button-pressed&apos;: function () &#123;</span><br><span class=\"line\">            // Send a message to all children</span><br><span class=\"line\">            this.$broadcast(&apos;increment&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>CounterDisplay.vue</code> 中，监听 <code>increment</code> 事件，并增加状态数据中的变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            count: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    events: &#123;</span><br><span class=\"line\">        increment () &#123;</span><br><span class=\"line\">            this.count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法的缺点：</strong></p>\n<p>这个方法基本没有什么技术上的错误。此外，在一个文件里实现整个应用的逻辑，专门使用 goto 来跳转也没有错。这只与可维护性有关，这里会讲一下为什么这个方法在可维护性上是糟糕的。</p>\n<ol>\n<li>对于每一个操作，父组件都需要将事件分发给正确的组件；</li>\n<li>在大型应用中，可能很难理解事件是从哪儿来的；</li>\n<li>业务逻辑没有明确的位置。<code>this.count++</code> 是在 <code>CounterDisplay</code> 中，但业务逻辑可能到处都是，这会导致难以维护。</li>\n</ol>\n<p><strong>让我来举例说明一下这个方法会怎样导致bug：</strong></p>\n<ol>\n<li>你雇了两个实习生： Alice 和 Bob。你告诉 Alice 你需要为另外一个组件实现另一个计数器，告诉 Bob 写一个重置按钮；</li>\n<li>Alice 写了一个新的组件 <code>FormattedCounterDisplay</code>，它能够监听增量，并增加自己的状态数据。Alice 开心的提交了代码；</li>\n<li>Bob 写了一个新的 <code>Reset</code> 组件，它向应用发出一个 <code>reset</code> 事件，并重新分发它。他在 <code>CounterDisplay</code> 中将 count 重置为0，但是他没有意识到 Alice 的组件也订阅了这个变化；</li>\n<li>你的用户点击 <code>+1</code> 按钮后看到应用工作正常。但是当他点击 <code>重置</code> 按钮，只有一个计数器被重置了。这看起来是一个非常简单的例子，仅仅为了说明状态和业务逻辑绑在一起可能会导致错误。</li>\n</ol>\n<h2 id=\"方法2：-共享状态\"><a href=\"#方法2：-共享状态\" class=\"headerlink\" title=\"方法2： 共享状态\"></a>方法2： 共享状态</h2><p>撤销方法1中的改动，创建一个新文件 <code>src/store.js</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        counter: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先修改 <code>CounterDisplay.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    Count is &#123;&#123; sharedState.counter &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            sharedState: store.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>这里我们做了一些有趣的事情：</strong></p>\n<ol>\n<li>获取到一个 store 对象，它仅仅是一个对象常量，但是在不同的文件中定义的；</li>\n<li>在本地数据中，我们创建了一个叫 <code>sharedState</code> 的数据，它映射到 <code>store.state</code>；</li>\n<li>vue 使用 <code>store.state</code> 作为当前组件的一部分数据，这意味着 <code>store.state</code> 有任何变化，vue 都会自动更新 <code>sharedState</code>。</li>\n</ol>\n<p>到目前为止它还不能工作，现在我们来修改 <code>IncrementButton.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            sharedState: store.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            this.sharedState.counter += 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在这里，我们引入 <code>store</code>，并像之前的例子一样监听了数据的状态变化；</li>\n<li>当 <code>activate</code> 方法被调用时，指向 <code>store.state</code> 的 <code>sharedState</code> 的计数器 counter 增加；</li>\n<li>监听了计数器的所有组件和计算属性都会被更新。</li>\n</ol>\n<h3 id=\"它为什么比方法1更好\"><a href=\"#它为什么比方法1更好\" class=\"headerlink\" title=\"它为什么比方法1更好\"></a>它为什么比方法1更好</h3><p>我们来回顾一下两个实习生 Alice 和 Bob 的问题：</p>\n<ol>\n<li>Alice 写的用来监听共享数据的 <code>FormattedComponentDisplay</code> 组件将会始终显示最新的 counter 数据；</li>\n<li>Bob 的重置按钮组件将共享数据的 counter 置为0，这将同时影响 <code>CounterDisplay</code> 和 Alice 写的 <code>FormattedCounterDisplay</code>；</li>\n<li>重置按钮符合预期。</li>\n</ol>\n<h3 id=\"为什么这样仍然不够好\"><a href=\"#为什么这样仍然不够好\" class=\"headerlink\" title=\"为什么这样仍然不够好\"></a>为什么这样仍然不够好</h3><ol>\n<li>在 Alice 和 Bob 的实习期内，他们使用不同的格式写了许多计数器、重置按钮，以及增量按钮，它们更新的是同一份共享的数据，生活很美好；</li>\n<li>一旦他们回到学校，你需要维护他们的代码；</li>\n<li>新任经理 Carol 进来之后说：“我不想看到计数器的数字超过100”</li>\n</ol>\n<h3 id=\"你现在该做什么？\"><a href=\"#你现在该做什么？\" class=\"headerlink\" title=\"你现在该做什么？\"></a>你现在该做什么？</h3><ol>\n<li>你去十几个组件的代码里找到所有更新数据的地方吗？这让人沮丧；</li>\n<li>你找到显示数据的地方然后添加一个 <code>filter/formatter</code> 来格式化数据吗？这同样让人沮丧；</li>\n<li>这里就是这个问题，业务逻辑分散在应用的各个角落，原则上一个很简单的问题，但是维护和调试起来却特别痛苦。</li>\n</ol>\n<h3 id=\"稍好一点儿的方法\"><a href=\"#稍好一点儿的方法\" class=\"headerlink\" title=\"稍好一点儿的方法\"></a>稍好一点儿的方法</h3><p>现在来重构你的代码，重写 <code>store.js</code> 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var store = &#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        counter: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    increment: function () &#123;</span><br><span class=\"line\">        if (store.state.counter &lt; 100) &#123;</span><br><span class=\"line\">            store.state.counter += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    reset: function () &#123;</span><br><span class=\"line\">        store.state.counter = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n<p>显式调用 <code>increment</code> 并将所有业务逻辑都放进 <code>store</code> 后代码看起来清晰了许多。然而，一个新实习生不知道这背后的理论，他发现在应用的其他部分直接写入 <code>store.state.counter</code> 更容易，于是一切变得难于调试。<br>然后，你制定大量严格的规则和代码审查，以确保没有人在 <code>store.js</code> 中不使用函数的情况下修改状态数据。如果这都不起作用，那你可以告诉hr结束他的实习了。</p>\n<h2 id=\"方法3：vuex\"><a href=\"#方法3：vuex\" class=\"headerlink\" title=\"方法3：vuex\"></a>方法3：vuex</h2><p>回滚方法2里的修改，原则上 vuex 的工作原理与方法2有些相似。给你看一张稍稍有些可怕的图：</p>\n<p><img src=\"/img/trans_vuex20170531/solution3.dot.png\" alt=\"solution3\"></p>\n<p>首先来创建 <code>src/store.js</code>，这次用下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vuex from &apos;vuex&apos;</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">var store = new Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        counter: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        INCREMENT (state) &#123;</span><br><span class=\"line\">            state.counter++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n<p><strong>现在来看看这段代码做了什么：</strong></p>\n<ol>\n<li>获取 Vuex 模块，然后使用 <code>Vue.use</code> 安装这个插件；</li>\n<li><code>store</code> 不再是一个普通的 JSON 对象，而是 <code>Vuex.Store</code> 的一个实例；</li>\n<li>在 <code>state</code> 中创建一个计数器 <code>counter</code>，设置为0；</li>\n<li>创建一个新的变异对象，包含 <code>INCREMENT</code> 方法：获取一个状态数据，然后改变它。</li>\n</ol>\n<p><strong>看看这段代码里有哪些有趣的东东：</strong></p>\n<ol>\n<li>所有通过 <code>require(&#39;../store.js&#39;)</code> 或 <code>import store from &#39;../store.js&#39;</code> 引入的 <code>store</code> 将使用同一个 store 实例；</li>\n<li>我们不会修改 <code>store.state.counter</code>，但是我们有一份 <code>state</code> 的拷贝用来做修改，这在接下来会很重要。</li>\n</ol>\n<p>现在我们已经改好了 store，来继续修改 <code>IncrementButton.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            store.dispatch(&apos;INCREMENT&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个组件没有任何数据，但是点击的时候调用 <code>store.dispatch(&#39;INCREMENT&#39;)</code>，一会儿再返回来看。</p>\n<p>下面更新一下 <code>CounterDisplay.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    Count is &#123;&#123; counter &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        counter () &#123;</span><br><span class=\"line\">            return store.state.counter</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>事情从这儿才真正有趣！我们不再订阅共享的状态数据的变化，而是使用 vue 的计算属性来给 counter 同步 store 中的数据。<br>Vue 足够聪明来计算出基于 <code>store.state.counter</code> 的计算属性 <code>counter</code>，无论 store 何时被更新，它将更新所有的关联项。That’s it!</p>\n<p><strong>如果你刷新这个页面，你将看到计数器依然正确工作。下面将逐步解释发生了什么：</strong></p>\n<ol>\n<li>vue 的事件处理函数是 <code>activate</code>，这个方法调用了 <code>store.dispatch(&#39;INCREMENT&#39;)</code>；</li>\n<li>在这里，<code>INCREMENT</code> 是一个动作的名称。它表示 “这是 state 应该做出的那种改变”。我们还可以传递额外的其他参数给分发函数；</li>\n<li>vue 指明了分发事件时应该调用哪个函数。现在我们只有一个，但是我们可以为大型应用定制的更复杂；</li>\n<li>这个函数接收状态数据的拷贝，并对它进行更新。vue 保留一份旧数据的拷贝用于后续的高级功能；</li>\n<li>当状态更新之后，vue 自动更新所有组件；</li>\n<li>这些使得你的代码可测试性更强，如果你做了这些的话。</li>\n</ol>\n<h3 id=\"这里是比办法2更好的原因\"><a href=\"#这里是比办法2更好的原因\" class=\"headerlink\" title=\"这里是比办法2更好的原因\"></a>这里是比办法2更好的原因</h3><p>假如在开发过程中所有状态的拷贝都被保存下来，vue 开发者建立起所谓的“时间旅行调试器”是非常有可能的。除了一个听起来超酷的超级英雄的名字，它将允许你在应用中撤销行为、改变逻辑，以及开发的更快。<br>只要状态改变，你就可以构建中间件。例如，你可以创建一个 logger 来记录用户执行的所有操作。如果他们发现了一个bug，你可以获取到用户日志，重新播放所有的行为，并正确的重现他们的bug。<br>通过强制你在一个地方（store）进行所有的动作，这是一个很好的参考，你团队中的每一个人都可以使用你应用中所有修改状态数据的方法。</p>\n<h3 id=\"还有很长的路要走\"><a href=\"#还有很长的路要走\" class=\"headerlink\" title=\"还有很长的路要走\"></a>还有很长的路要走</h3><p>这里仅仅接触到了 vuex 表面可以做的事情，它自身仍然是一个早期版本，我相信这将成为未来许多年里最成熟的模式之一。<br>你可以去网上找到关于如何组织 store 以及 vuex 文档的更多信息。你可能需要花一些时间来理解所有的概念，甚至可能需要一些尝试和错误才能找出正确的方法。</p>\n<h2 id=\"结语：处理实习生的代码\"><a href=\"#结语：处理实习生的代码\" class=\"headerlink\" title=\"结语：处理实习生的代码\"></a>结语：处理实习生的代码</h2><p>你将应用移植到 vue.js，你的实习生仍旧可以找到方法在自己的组件中重写 <code>store.state.counter</code>。你明白的，这是最后一根稻草。然后继续在你的 <code>store.js</code> 中增加一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var store = new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    counter: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    INCREMENT (state) &#123;</span><br><span class=\"line\">      state.counter++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  strict: true // Vuex&apos;s patent pending anti-intern device</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在无论何时何人直接修改 store，将会抛出一个错误。请注意这会减慢你的应用运行的时间，这个配置可以在生产环境移除，相关示例请查文档。</p>\n","site":{"data":{}},"excerpt":"<p>原文地址：<a href=\"https://skyronic.com/2016/01/03/vuex-basics-tutorial\" target=\"_blank\" rel=\"noopener\">Vuex basics: Tutorial and explanation</a></p>\n<p>作者注：[2016.11 更新]这篇文章是基于一个非常旧的 vuex api 版本而写的，代码来自于2015年12月。<br>但是，它仍能针对下面几个问题深入探讨：</p>\n<ol>\n<li>vuex 为什么重要</li>\n<li>vuex 如何工作</li>\n<li>vuex 如何使你的应用更容易维护</li>\n</ol>\n<p>vuex 是 vue.js 作者开发的一个原型库，它帮助你创建更大、维护性更强的应用，类似于 Facebook 的 flux 库（以及由社区维护的 redux 库）。<br>这篇文章不直接跳到 vuex 教你如何使用它，而是从背后的故事开始说起，逐步解释它为什么是优雅的替代方法，以及将如何帮助你。</p>\n<p>译者注：<a href=\"https://github.com/letica/vuex-tutorial\" target=\"_blank\" rel=\"noopener\">a git repo of vuex-tutorial use vue2.0</a><br>","more":"</p>\n<h2 id=\"你想要创建什么应用？\"><a href=\"#你想要创建什么应用？\" class=\"headerlink\" title=\"你想要创建什么应用？\"></a>你想要创建什么应用？</h2><p><img src=\"/img/trans_vuex20170531/target.png\" alt=\"target\"></p>\n<p>一个拥有<code>按钮</code>和<code>计数器</code>的简单应用，点击按钮计数器加1。这听起来非常容易理解和完成。</p>\n<p><img src=\"/img/trans_vuex20170531/problem.dot.png\" alt=\"problem\"></p>\n<p>我们假设这个应用有两个组件：</p>\n<ol>\n<li>按钮 （它是事件的来源）</li>\n<li>计数器 （它必须按照事件来反映更新）</li>\n</ol>\n<p>这两个组件不知道彼此的存在，也不能相互通信。即使是在最小的 web 应用中，这也是一种非常常见的模式。在更大点儿的应用中，十几个组件相互通信，并时刻关注对方的变化。不相信我？这里是一个基础的 TODOlist 应用的交互清单：</p>\n<p><img src=\"/img/trans_vuex20170531/todo.dot.png\" alt=\"todo\"></p>\n<h2 id=\"这篇文章的目标\"><a href=\"#这篇文章的目标\" class=\"headerlink\" title=\"这篇文章的目标\"></a>这篇文章的目标</h2><p>我们将讨论解决同一个问题的3种方法：</p>\n<ol>\n<li>组件之间使用事件广播来通信</li>\n<li>使用一个共享的状态对象通信</li>\n<li>使用 vuex 通信</li>\n</ol>\n<p>读完这篇文章，希望你能理解：</p>\n<ol>\n<li>在你的项目中使用 vuex 的一个基本工作流程</li>\n<li>它解决了哪些问题</li>\n<li>相对其他方法，为什么它是更好的（尽管有些冗长和严格）</li>\n</ol>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>我们将使用3种不同的方法来解决同一个问题。在这之前，需要做一些共同的准备工作。如果你打算跟着我做，我建议你为这个教程创建一个 git repo，这一小节结束后提交一次代码，然后为不同的方法创建不同的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\">$ vue init webpack vuex-tutorial</span><br><span class=\"line\">$ cd vuex-tutorial</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install --save vuex</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>现在你应该能看到 vue 的脚手架页面了，下面来为我们要做的事来修改一些文件。</p>\n<p>首先，在文件 <code>src/components/IncrementButton.vue</code> 中创建 <code>IncrementButton</code> 组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;button @click.prevent=&quot;activate&quot;&gt;+1&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            console.log(&apos;+1 Pressed&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>下一步，在文件 <code>src/components/CounterDisplay.vue</code> 中创建 <code>CounterDisplay</code> 组件来展示计数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    Count is &#123;&#123; count &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            count: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>使用下面的内容替换 <code>App.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h3&gt;Increment:&lt;/h3&gt;</span><br><span class=\"line\">        &lt;increment&gt;&lt;/increment&gt;</span><br><span class=\"line\">        &lt;h3&gt;Counter:&lt;/h3&gt;</span><br><span class=\"line\">        &lt;counter&gt;&lt;/counter&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Counter from &apos;./components/CounterDisplay.vue&apos;</span><br><span class=\"line\">import Increment from &apos;./components/IncrementButton.vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Counter,</span><br><span class=\"line\">        Increment</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>现在，重新运行 <code>npm run dev</code>，在浏览器打开页面，你应该看到一个 <code>按钮</code> 和一个 <code>计数器</code>。点击按钮，控制台将显示一条信息，其它没什么变化。<br>现在我们已经来到了起点，开始吧。</p>\n<h2 id=\"方法1：事件广播\"><a href=\"#方法1：事件广播\" class=\"headerlink\" title=\"方法1：事件广播\"></a>方法1：事件广播</h2><p><img src=\"/img/trans_vuex20170531/solution1.dot.png\" alt=\"solution1\"></p>\n<p>来修改组件的代码。<br>首先在 <code>IncrementButton.vue</code> 中，在按钮被点击时使用 <code>$dispatch</code> 给父组件发送一个消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            // Send an event upwards to be picked up by App</span><br><span class=\"line\">            this.$dispatch(&apos;button-pressed&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>App.vue</code> 中监听来自子组件的这个消息事件，然后广播一个新的事件 <code>increment</code> 给所有的子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Counter,</span><br><span class=\"line\">        Increment</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    events: &#123;</span><br><span class=\"line\">        &apos;button-pressed&apos;: function () &#123;</span><br><span class=\"line\">            // Send a message to all children</span><br><span class=\"line\">            this.$broadcast(&apos;increment&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>CounterDisplay.vue</code> 中，监听 <code>increment</code> 事件，并增加状态数据中的变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            count: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    events: &#123;</span><br><span class=\"line\">        increment () &#123;</span><br><span class=\"line\">            this.count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法的缺点：</strong></p>\n<p>这个方法基本没有什么技术上的错误。此外，在一个文件里实现整个应用的逻辑，专门使用 goto 来跳转也没有错。这只与可维护性有关，这里会讲一下为什么这个方法在可维护性上是糟糕的。</p>\n<ol>\n<li>对于每一个操作，父组件都需要将事件分发给正确的组件；</li>\n<li>在大型应用中，可能很难理解事件是从哪儿来的；</li>\n<li>业务逻辑没有明确的位置。<code>this.count++</code> 是在 <code>CounterDisplay</code> 中，但业务逻辑可能到处都是，这会导致难以维护。</li>\n</ol>\n<p><strong>让我来举例说明一下这个方法会怎样导致bug：</strong></p>\n<ol>\n<li>你雇了两个实习生： Alice 和 Bob。你告诉 Alice 你需要为另外一个组件实现另一个计数器，告诉 Bob 写一个重置按钮；</li>\n<li>Alice 写了一个新的组件 <code>FormattedCounterDisplay</code>，它能够监听增量，并增加自己的状态数据。Alice 开心的提交了代码；</li>\n<li>Bob 写了一个新的 <code>Reset</code> 组件，它向应用发出一个 <code>reset</code> 事件，并重新分发它。他在 <code>CounterDisplay</code> 中将 count 重置为0，但是他没有意识到 Alice 的组件也订阅了这个变化；</li>\n<li>你的用户点击 <code>+1</code> 按钮后看到应用工作正常。但是当他点击 <code>重置</code> 按钮，只有一个计数器被重置了。这看起来是一个非常简单的例子，仅仅为了说明状态和业务逻辑绑在一起可能会导致错误。</li>\n</ol>\n<h2 id=\"方法2：-共享状态\"><a href=\"#方法2：-共享状态\" class=\"headerlink\" title=\"方法2： 共享状态\"></a>方法2： 共享状态</h2><p>撤销方法1中的改动，创建一个新文件 <code>src/store.js</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        counter: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先修改 <code>CounterDisplay.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    Count is &#123;&#123; sharedState.counter &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            sharedState: store.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>这里我们做了一些有趣的事情：</strong></p>\n<ol>\n<li>获取到一个 store 对象，它仅仅是一个对象常量，但是在不同的文件中定义的；</li>\n<li>在本地数据中，我们创建了一个叫 <code>sharedState</code> 的数据，它映射到 <code>store.state</code>；</li>\n<li>vue 使用 <code>store.state</code> 作为当前组件的一部分数据，这意味着 <code>store.state</code> 有任何变化，vue 都会自动更新 <code>sharedState</code>。</li>\n</ol>\n<p>到目前为止它还不能工作，现在我们来修改 <code>IncrementButton.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            sharedState: store.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            this.sharedState.counter += 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在这里，我们引入 <code>store</code>，并像之前的例子一样监听了数据的状态变化；</li>\n<li>当 <code>activate</code> 方法被调用时，指向 <code>store.state</code> 的 <code>sharedState</code> 的计数器 counter 增加；</li>\n<li>监听了计数器的所有组件和计算属性都会被更新。</li>\n</ol>\n<h3 id=\"它为什么比方法1更好\"><a href=\"#它为什么比方法1更好\" class=\"headerlink\" title=\"它为什么比方法1更好\"></a>它为什么比方法1更好</h3><p>我们来回顾一下两个实习生 Alice 和 Bob 的问题：</p>\n<ol>\n<li>Alice 写的用来监听共享数据的 <code>FormattedComponentDisplay</code> 组件将会始终显示最新的 counter 数据；</li>\n<li>Bob 的重置按钮组件将共享数据的 counter 置为0，这将同时影响 <code>CounterDisplay</code> 和 Alice 写的 <code>FormattedCounterDisplay</code>；</li>\n<li>重置按钮符合预期。</li>\n</ol>\n<h3 id=\"为什么这样仍然不够好\"><a href=\"#为什么这样仍然不够好\" class=\"headerlink\" title=\"为什么这样仍然不够好\"></a>为什么这样仍然不够好</h3><ol>\n<li>在 Alice 和 Bob 的实习期内，他们使用不同的格式写了许多计数器、重置按钮，以及增量按钮，它们更新的是同一份共享的数据，生活很美好；</li>\n<li>一旦他们回到学校，你需要维护他们的代码；</li>\n<li>新任经理 Carol 进来之后说：“我不想看到计数器的数字超过100”</li>\n</ol>\n<h3 id=\"你现在该做什么？\"><a href=\"#你现在该做什么？\" class=\"headerlink\" title=\"你现在该做什么？\"></a>你现在该做什么？</h3><ol>\n<li>你去十几个组件的代码里找到所有更新数据的地方吗？这让人沮丧；</li>\n<li>你找到显示数据的地方然后添加一个 <code>filter/formatter</code> 来格式化数据吗？这同样让人沮丧；</li>\n<li>这里就是这个问题，业务逻辑分散在应用的各个角落，原则上一个很简单的问题，但是维护和调试起来却特别痛苦。</li>\n</ol>\n<h3 id=\"稍好一点儿的方法\"><a href=\"#稍好一点儿的方法\" class=\"headerlink\" title=\"稍好一点儿的方法\"></a>稍好一点儿的方法</h3><p>现在来重构你的代码，重写 <code>store.js</code> 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var store = &#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        counter: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    increment: function () &#123;</span><br><span class=\"line\">        if (store.state.counter &lt; 100) &#123;</span><br><span class=\"line\">            store.state.counter += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    reset: function () &#123;</span><br><span class=\"line\">        store.state.counter = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n<p>显式调用 <code>increment</code> 并将所有业务逻辑都放进 <code>store</code> 后代码看起来清晰了许多。然而，一个新实习生不知道这背后的理论，他发现在应用的其他部分直接写入 <code>store.state.counter</code> 更容易，于是一切变得难于调试。<br>然后，你制定大量严格的规则和代码审查，以确保没有人在 <code>store.js</code> 中不使用函数的情况下修改状态数据。如果这都不起作用，那你可以告诉hr结束他的实习了。</p>\n<h2 id=\"方法3：vuex\"><a href=\"#方法3：vuex\" class=\"headerlink\" title=\"方法3：vuex\"></a>方法3：vuex</h2><p>回滚方法2里的修改，原则上 vuex 的工作原理与方法2有些相似。给你看一张稍稍有些可怕的图：</p>\n<p><img src=\"/img/trans_vuex20170531/solution3.dot.png\" alt=\"solution3\"></p>\n<p>首先来创建 <code>src/store.js</code>，这次用下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vuex from &apos;vuex&apos;</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">var store = new Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        counter: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        INCREMENT (state) &#123;</span><br><span class=\"line\">            state.counter++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n<p><strong>现在来看看这段代码做了什么：</strong></p>\n<ol>\n<li>获取 Vuex 模块，然后使用 <code>Vue.use</code> 安装这个插件；</li>\n<li><code>store</code> 不再是一个普通的 JSON 对象，而是 <code>Vuex.Store</code> 的一个实例；</li>\n<li>在 <code>state</code> 中创建一个计数器 <code>counter</code>，设置为0；</li>\n<li>创建一个新的变异对象，包含 <code>INCREMENT</code> 方法：获取一个状态数据，然后改变它。</li>\n</ol>\n<p><strong>看看这段代码里有哪些有趣的东东：</strong></p>\n<ol>\n<li>所有通过 <code>require(&#39;../store.js&#39;)</code> 或 <code>import store from &#39;../store.js&#39;</code> 引入的 <code>store</code> 将使用同一个 store 实例；</li>\n<li>我们不会修改 <code>store.state.counter</code>，但是我们有一份 <code>state</code> 的拷贝用来做修改，这在接下来会很重要。</li>\n</ol>\n<p>现在我们已经改好了 store，来继续修改 <code>IncrementButton.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        activate () &#123;</span><br><span class=\"line\">            store.dispatch(&apos;INCREMENT&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个组件没有任何数据，但是点击的时候调用 <code>store.dispatch(&#39;INCREMENT&#39;)</code>，一会儿再返回来看。</p>\n<p>下面更新一下 <code>CounterDisplay.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    Count is &#123;&#123; counter &#125;&#125;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import store from &apos;../store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        counter () &#123;</span><br><span class=\"line\">            return store.state.counter</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>事情从这儿才真正有趣！我们不再订阅共享的状态数据的变化，而是使用 vue 的计算属性来给 counter 同步 store 中的数据。<br>Vue 足够聪明来计算出基于 <code>store.state.counter</code> 的计算属性 <code>counter</code>，无论 store 何时被更新，它将更新所有的关联项。That’s it!</p>\n<p><strong>如果你刷新这个页面，你将看到计数器依然正确工作。下面将逐步解释发生了什么：</strong></p>\n<ol>\n<li>vue 的事件处理函数是 <code>activate</code>，这个方法调用了 <code>store.dispatch(&#39;INCREMENT&#39;)</code>；</li>\n<li>在这里，<code>INCREMENT</code> 是一个动作的名称。它表示 “这是 state 应该做出的那种改变”。我们还可以传递额外的其他参数给分发函数；</li>\n<li>vue 指明了分发事件时应该调用哪个函数。现在我们只有一个，但是我们可以为大型应用定制的更复杂；</li>\n<li>这个函数接收状态数据的拷贝，并对它进行更新。vue 保留一份旧数据的拷贝用于后续的高级功能；</li>\n<li>当状态更新之后，vue 自动更新所有组件；</li>\n<li>这些使得你的代码可测试性更强，如果你做了这些的话。</li>\n</ol>\n<h3 id=\"这里是比办法2更好的原因\"><a href=\"#这里是比办法2更好的原因\" class=\"headerlink\" title=\"这里是比办法2更好的原因\"></a>这里是比办法2更好的原因</h3><p>假如在开发过程中所有状态的拷贝都被保存下来，vue 开发者建立起所谓的“时间旅行调试器”是非常有可能的。除了一个听起来超酷的超级英雄的名字，它将允许你在应用中撤销行为、改变逻辑，以及开发的更快。<br>只要状态改变，你就可以构建中间件。例如，你可以创建一个 logger 来记录用户执行的所有操作。如果他们发现了一个bug，你可以获取到用户日志，重新播放所有的行为，并正确的重现他们的bug。<br>通过强制你在一个地方（store）进行所有的动作，这是一个很好的参考，你团队中的每一个人都可以使用你应用中所有修改状态数据的方法。</p>\n<h3 id=\"还有很长的路要走\"><a href=\"#还有很长的路要走\" class=\"headerlink\" title=\"还有很长的路要走\"></a>还有很长的路要走</h3><p>这里仅仅接触到了 vuex 表面可以做的事情，它自身仍然是一个早期版本，我相信这将成为未来许多年里最成熟的模式之一。<br>你可以去网上找到关于如何组织 store 以及 vuex 文档的更多信息。你可能需要花一些时间来理解所有的概念，甚至可能需要一些尝试和错误才能找出正确的方法。</p>\n<h2 id=\"结语：处理实习生的代码\"><a href=\"#结语：处理实习生的代码\" class=\"headerlink\" title=\"结语：处理实习生的代码\"></a>结语：处理实习生的代码</h2><p>你将应用移植到 vue.js，你的实习生仍旧可以找到方法在自己的组件中重写 <code>store.state.counter</code>。你明白的，这是最后一根稻草。然后继续在你的 <code>store.js</code> 中增加一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var store = new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    counter: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    INCREMENT (state) &#123;</span><br><span class=\"line\">      state.counter++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  strict: true // Vuex&apos;s patent pending anti-intern device</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在无论何时何人直接修改 store，将会抛出一个错误。请注意这会减慢你的应用运行的时间，这个配置可以在生产环境移除，相关示例请查文档。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdag5s6500009ms6nzvosj4o","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s77000c9ms6vpilctx7"},{"post_id":"cjdag5s6v00069ms6jp2swv51","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s7l000g9ms6quzj4hi2"},{"post_id":"cjdag5s70000a9ms6r8iao1xv","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s7p000j9ms6x1f2d8ue"},{"post_id":"cjdag5s6e00019ms6a7b574ld","category_id":"cjdag5s6w00079ms6nqmmzw9v","_id":"cjdag5s7w000n9ms64gr3s70n"},{"post_id":"cjdag5s74000b9ms6o2ltnl9s","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s7z000q9ms609f3vkmx"},{"post_id":"cjdag5s6n00049ms6fjhrdk1i","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s83000u9ms66kxn6yms"},{"post_id":"cjdag5s7n000i9ms63aev9l1j","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s83000w9ms6wnsus86g"},{"post_id":"cjdag5s6q00059ms6oekieuzr","category_id":"cjdag5s7p000k9ms6e6xpj5dp","_id":"cjdag5s85000y9ms6bw8y5q85"},{"post_id":"cjdag5s7x000p9ms6hskar7ix","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s8500119ms6cuneqay6"},{"post_id":"cjdag5s80000t9ms6j44c58g2","category_id":"cjdag5s6k00029ms69ez109cw","_id":"cjdag5s8700129ms6imwrel7i"},{"post_id":"cjdag5s7i000f9ms6pk2fyjg8","category_id":"cjdag5s7z000r9ms66epugsn8","_id":"cjdag5s8800149ms64ymiuh4j"},{"post_id":"cjdag5s7u000m9ms6wg94rj21","category_id":"cjdag5s84000x9ms6uon0p82m","_id":"cjdag5s8800169ms60qjd33xz"}],"PostTag":[{"post_id":"cjdag5s6500009ms6nzvosj4o","tag_id":"cjdag5s6m00039ms6tpty92rp","_id":"cjdag5s6z00099ms6lgv6vlp9"},{"post_id":"cjdag5s6e00019ms6a7b574ld","tag_id":"cjdag5s6x00089ms61h1hjncq","_id":"cjdag5s7m000h9ms6la31vmuc"},{"post_id":"cjdag5s6n00049ms6fjhrdk1i","tag_id":"cjdag5s78000e9ms6rrojtqor","_id":"cjdag5s7x000o9ms6lw4zgxiq"},{"post_id":"cjdag5s6q00059ms6oekieuzr","tag_id":"cjdag5s7s000l9ms6mt3hxsos","_id":"cjdag5s83000v9ms63b557joc"},{"post_id":"cjdag5s6v00069ms6jp2swv51","tag_id":"cjdag5s80000s9ms6x4tp5tsd","_id":"cjdag5s8500109ms6tj5zid3p"},{"post_id":"cjdag5s70000a9ms6r8iao1xv","tag_id":"cjdag5s85000z9ms69vpg5dp2","_id":"cjdag5s8800159ms6hdjncxik"},{"post_id":"cjdag5s74000b9ms6o2ltnl9s","tag_id":"cjdag5s85000z9ms69vpg5dp2","_id":"cjdag5s8900189ms6tfuxrf7q"},{"post_id":"cjdag5s7i000f9ms6pk2fyjg8","tag_id":"cjdag5s8900179ms6gt6par15","_id":"cjdag5s8a001a9ms6m5dao0hc"},{"post_id":"cjdag5s7n000i9ms63aev9l1j","tag_id":"cjdag5s8900199ms6cfq9f8ni","_id":"cjdag5s8b001c9ms6qpyrngao"},{"post_id":"cjdag5s7x000p9ms6hskar7ix","tag_id":"cjdag5s8a001b9ms6lgrv1okp","_id":"cjdag5s8b001e9ms6jhqm2jw8"},{"post_id":"cjdag5s80000t9ms6j44c58g2","tag_id":"cjdag5s8b001d9ms6523toxuq","_id":"cjdag5s8b001f9ms6fv8ilpdw"}],"Tag":[{"name":"ES6","_id":"cjdag5s6m00039ms6tpty92rp"},{"name":"hexo","_id":"cjdag5s6x00089ms61h1hjncq"},{"name":"规范","_id":"cjdag5s78000e9ms6rrojtqor"},{"name":"随笔","_id":"cjdag5s7s000l9ms6mt3hxsos"},{"name":"meta","_id":"cjdag5s80000s9ms6x4tp5tsd"},{"name":"javascript","_id":"cjdag5s85000z9ms69vpg5dp2"},{"name":"js","_id":"cjdag5s8900179ms6gt6par15"},{"name":"layout","_id":"cjdag5s8900199ms6cfq9f8ni"},{"name":"promise","_id":"cjdag5s8a001b9ms6lgrv1okp"},{"name":"vuex","_id":"cjdag5s8b001d9ms6523toxuq"}]}}