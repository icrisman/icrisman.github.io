{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-laughing/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css.map","path":"css/main_style.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css","path":"css/main_style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css.map","path":"css/main_style.min.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css","path":"css/main_style.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.eot","path":"fonts/icon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.woff","path":"fonts/icon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.ttf","path":"fonts/icon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.svg","path":"fonts/icon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/sass/main_style.scss","path":"sass/main_style.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/LICENSE","path":"components/reset-css/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/README.md","path":"components/reset-css/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/gruntfile.js","path":"components/reset-css/gruntfile.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/package.json","path":"components/reset-css/package.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/main.scss","path":"components/reset-css/sass/main.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-native.scss","path":"components/reset-css/sass/mobile-native.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-single.scss","path":"components/reset-css/sass/mobile-single.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.css","path":"components/reset-css/dist/mobile/reset.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.min.css","path":"components/reset-css/dist/mobile/reset.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.css","path":"components/reset-css/dist/pc/reset.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.min.css","path":"components/reset-css/dist/pc/reset.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css.map","path":"components/reset-css/public/main/reset.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css","path":"components/reset-css/public/main/reset.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css.map","path":"components/reset-css/public/main/reset.min.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css","path":"components/reset-css/public/main/reset.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css","path":"components/reset-css/public/mobile/reset.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css","path":"components/reset-css/public/mobile/reset.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css.map","path":"components/reset-css/public/mobile/reset.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css.map","path":"components/reset-css/public/mobile/reset.min.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css","path":"components/reset-css/public/native/reset.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css","path":"components/reset-css/public/native/reset.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css.map","path":"components/reset-css/public/native/reset.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css.map","path":"components/reset-css/public/native/reset.min.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/custom/imitation-native.scss","path":"components/reset-css/sass/custom/imitation-native.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/ie.scss","path":"components/reset-css/sass/reset/ie.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/basic.scss","path":"components/reset-css/sass/reset/basic.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/mobile.scss","path":"components/reset-css/sass/reset/mobile.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/macos.scss","path":"components/reset-css/sass/reset/macos.scss","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-laughing/.bowerrc","hash":"cd6df79a8be68d066ccb35c5470fba3e6f12bb00","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/.gitignore","hash":"cbdea42ead12e6fd5e03d489e0482bbb37cd582b","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1502953334000},{"_id":"themes/hexo-theme-laughing/_config.yml","hash":"2617c42eea40aa22017ef5b1b03943e43c16ce60","modified":1503017288000},{"_id":"themes/hexo-theme-laughing/.git","hash":"9671f110b7635b242544358dcc9f31b6f1dd6b8d","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/package.json","hash":"90437a166ff42fe162a7224078fdcd69de48b6cb","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/README.md","hash":"b7826b23f0c526cf23a92d9a99b89f61d07bf544","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/LICENSE","hash":"b2d04276dc82c827b32e34c9d7b473ad5c0c0f4f","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/gruntfile.js","hash":"dce145bcbf831af91d778a0f05adf8ab3f648262","modified":1502884436000},{"_id":"source/_posts/hello-world.md","hash":"d840c40d78d129097b0838ee262995a4b8f2fe64","modified":1502982229000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1503019734000},{"_id":"source/_posts/js之闭包.md","hash":"a753c28e668bf8844277c0ed1e2313f9a02cdc2a","modified":1502975463000},{"_id":"themes/hexo-theme-laughing/layout/post.pug","hash":"fd10e59f17b02653b0e2faafaa0a98af134c7713","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/layout/index.pug","hash":"342ec754890a8e4f037f4c47938a91468f4decee","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/favicon.ico","hash":"3c779118c15f1734e08d83ec62d8e0d73c61339b","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/layout/_partial/footer.pug","hash":"73a26c2c5cedfe6ab7c31b7e58639e62d0c64bb0","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/layout/_partial/page_header.pug","hash":"6b46eae5f0a1db0c39d7a622a7acb3494f4de242","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/layout/_partial/layout.pug","hash":"96f07d54e5712092ca41604abe0c0d3133837ad0","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/layout/_partial/pagination.pug","hash":"0622c7633acdeb16d51979e05e360a2b69b13495","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/layout/_partial/post_header.pug","hash":"2470e6d75691be209f176716815b81347acb699d","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css.map","hash":"c3e624de8678bffa3d0859362382c86245015d1b","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/css/main_style.css","hash":"cbd0541a11ebd938d798e3cee397a5a4d26d84ec","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css.map","hash":"b714707c0c6893720548709c52dc35e0e4ac5387","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/css/main_style.min.css","hash":"7224d03577ecfa3cb51688ce5f0ef68d73166156","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.eot","hash":"845e74fd0134d11cb064e5440ae490c846670f2e","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.woff","hash":"7d828283afa799b70a8531b9a2662c559b346439","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.ttf","hash":"c403df27000403dd4de7ffe2b4e80d04c4475a07","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/fonts/icon.svg","hash":"b812a585d7dbb508874605a48436c77c8271e28b","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/main_style.scss","hash":"898aefb75f72fed686ac9a60eff1ceb44a2f3ea3","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/LICENSE","hash":"b2d04276dc82c827b32e34c9d7b473ad5c0c0f4f","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/README.md","hash":"42ba92ca71daff15d0e27ae9e1624e86298f88b8","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/.bower.json","hash":"870be6ad54cc1c5284d38b1cd104ac8412054498","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/.gitignore","hash":"dc763f22f9c31a8daefbf47989e76da901ffd47c","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/gruntfile.js","hash":"eda72e7747c8952dcc98d9249a5d8ca2279a89d6","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/package.json","hash":"c859e74c55d08e683d72ada52ad786f49eb19be2","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/list.scss","hash":"ea845f4182a2979a3039a587cacff7fb170f5184","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/main_navi.scss","hash":"068d1c8cf9af65c0258cf06e01305574629145ae","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/layout.scss","hash":"32c191b0a510c387baa4ef85426eb13607e3c451","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/footer.scss","hash":"353e3e086aa70849c924fb8789b30b5a996d8676","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/pagination.scss","hash":"6d26b9990bf957e06af87f36aafee1e3bdb505ef","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/post.scss","hash":"4f2a71a3a11896bb364fe3d51d32aa96e37b80d5","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/page_header.scss","hash":"628a2cdcf1093cfdf05b2c7e67f270d3bbea4fb4","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/navication.scss","hash":"08a01a3b4d627cff6b2521114378578625f779da","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_util/hightlight.scss","hash":"2be013af766705fcac2cbcb8058b5eed2a314550","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_util/icon.scss","hash":"f7a2f1adb843c211a4b526ba56565ad683902df1","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_util/color.scss","hash":"2dfaa41b7f960473b9c2a154989791f643737211","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/post_header.scss","hash":"dd790985f86f7a6af1a26baca50d8ec8fab14add","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_util/mixin.scss","hash":"37309124d68d74e1d920dae40546c6dfa53c4d86","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_partial/duoshuo.scss","hash":"033b88d981fea35adad1b2ad96fbf5a497598cc3","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/sass/_util/media.scss","hash":"7eb47453422b703af4a272f64b44a5e062f133ee","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/_common.scss","hash":"e43ee0cc485b6e8ee11e33434dd8472e449f8804","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/main.scss","hash":"b34aeac5d981e3ac4c46a292e6197f2f7f860b32","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-native.scss","hash":"ce2116425e00aa7a450cfcd93c86f95213b7deed","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/mobile-single.scss","hash":"80c5c752656b61690e8df463e5b45b787621c249","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.css","hash":"c157f0c30827d47590cb99a25a34eb712ca1890a","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/mobile/reset.min.css","hash":"752bcb20555fb6152867a7437aacf079f3c93c36","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.css","hash":"9ed2cbf6f1dd7df99849ad22700e9339914a358a","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/dist/pc/reset.min.css","hash":"d0e76dd5d95e95deee9c745438d8bf36b342081c","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css.map","hash":"af850e4c2b2ab129e8c419cdd3da8dc3190449ed","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css","hash":"1a81aa7c066cf34dbc61709c9c11d2ef053ae456","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.min.css.map","hash":"8132d37d36c5b1d9826f9896dc61165229178c42","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/main/reset.css","hash":"8879756ab7e775eaf29e661503e4e472bde804d9","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css","hash":"64fbf2a4717a88d31b9b85806f39ec8d3edfb538","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css","hash":"f531c995853af9871b8be1c7c324a8f65d1c355a","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.css.map","hash":"a2ccb8da7fe8a22edcf91bf2171ebca67cb6c093","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/mobile/reset.min.css.map","hash":"7a98495520ecb5d4badd36d6145d7b22f0a57c5b","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css","hash":"6cbf4e09d9f8f5fd2c6b961cf4f473c41a5cde48","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css","hash":"fa81cc36008bb69fefc9986d3e3c479d14ad3a09","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.css.map","hash":"926d39cb34066c99e9ba3185926865b73c943288","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/public/native/reset.min.css.map","hash":"840a041a42aa45b3dafccaaeabf869076d7cc9de","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/custom/_microsoft-yahei.scss","hash":"4c29be667ae1decd0cc2da424e89c792b901eefe","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/custom/imitation-native.scss","hash":"db910f6a7a008bc3c47a4ccebb0f9301b1dd6f58","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/ie.scss","hash":"032d5f6831a43ffe278b711331308a17b0fa0848","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/basic.scss","hash":"523a6deffbd0699f3225adbdeda5d0fc5c6e1e4d","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/mobile.scss","hash":"391a7886de3256582d37a252f743a2cd08ae0964","modified":1502884436000},{"_id":"themes/hexo-theme-laughing/source/components/reset-css/sass/reset/macos.scss","hash":"c4863f82e33f87dd4c724d68906a4cbe2b935e6c","modified":1502884436000},{"_id":"public/2017/08/16/hello-world/index.html","hash":"acc32cd9fb3581bce23cacfe5ed1799b033c33df","modified":1503019746381},{"_id":"public/index.html","hash":"203daf65ca8059c6a845debc79f75dded0c4a45c","modified":1503019746381},{"_id":"public/tags/js/index.html","hash":"55646b7a3ab52c8fee73c1e3e9ee1f7640a7c7aa","modified":1503019746382},{"_id":"public/tags/随笔/index.html","hash":"97e8c73bf9692930b5ea3bda26adcffd3ed64392","modified":1503019746382},{"_id":"public/archives/index.html","hash":"203daf65ca8059c6a845debc79f75dded0c4a45c","modified":1503019746382},{"_id":"public/archives/2017/index.html","hash":"203daf65ca8059c6a845debc79f75dded0c4a45c","modified":1503019746382},{"_id":"public/archives/2017/08/index.html","hash":"203daf65ca8059c6a845debc79f75dded0c4a45c","modified":1503019746385},{"_id":"public/categories/js/index.html","hash":"55646b7a3ab52c8fee73c1e3e9ee1f7640a7c7aa","modified":1503019746385},{"_id":"public/categories/杂记/index.html","hash":"97e8c73bf9692930b5ea3bda26adcffd3ed64392","modified":1503019746385},{"_id":"public/2017/08/17/js之闭包/index.html","hash":"b4863427e269df131b61e6368e6ce3d258e16baa","modified":1503019746386},{"_id":"public/favicon.ico","hash":"3c779118c15f1734e08d83ec62d8e0d73c61339b","modified":1503019746386},{"_id":"public/css/main_style.css.map","hash":"c3e624de8678bffa3d0859362382c86245015d1b","modified":1503019746386},{"_id":"public/css/main_style.min.css.map","hash":"b714707c0c6893720548709c52dc35e0e4ac5387","modified":1503019746386},{"_id":"public/fonts/icon.eot","hash":"845e74fd0134d11cb064e5440ae490c846670f2e","modified":1503019746386},{"_id":"public/fonts/icon.woff","hash":"7d828283afa799b70a8531b9a2662c559b346439","modified":1503019746386},{"_id":"public/fonts/icon.ttf","hash":"c403df27000403dd4de7ffe2b4e80d04c4475a07","modified":1503019746386},{"_id":"public/fonts/icon.svg","hash":"b812a585d7dbb508874605a48436c77c8271e28b","modified":1503019746386},{"_id":"public/sass/main_style.scss","hash":"898aefb75f72fed686ac9a60eff1ceb44a2f3ea3","modified":1503019746386},{"_id":"public/components/reset-css/LICENSE","hash":"b2d04276dc82c827b32e34c9d7b473ad5c0c0f4f","modified":1503019746387},{"_id":"public/components/reset-css/sass/main.scss","hash":"b34aeac5d981e3ac4c46a292e6197f2f7f860b32","modified":1503019746387},{"_id":"public/components/reset-css/sass/mobile-native.scss","hash":"ce2116425e00aa7a450cfcd93c86f95213b7deed","modified":1503019746387},{"_id":"public/components/reset-css/sass/mobile-single.scss","hash":"80c5c752656b61690e8df463e5b45b787621c249","modified":1503019746387},{"_id":"public/components/reset-css/public/main/reset.css.map","hash":"af850e4c2b2ab129e8c419cdd3da8dc3190449ed","modified":1503019746387},{"_id":"public/components/reset-css/public/main/reset.min.css.map","hash":"8132d37d36c5b1d9826f9896dc61165229178c42","modified":1503019746387},{"_id":"public/components/reset-css/public/mobile/reset.css.map","hash":"a2ccb8da7fe8a22edcf91bf2171ebca67cb6c093","modified":1503019746387},{"_id":"public/components/reset-css/public/mobile/reset.min.css.map","hash":"7a98495520ecb5d4badd36d6145d7b22f0a57c5b","modified":1503019746387},{"_id":"public/components/reset-css/public/native/reset.css.map","hash":"926d39cb34066c99e9ba3185926865b73c943288","modified":1503019746387},{"_id":"public/components/reset-css/public/native/reset.min.css.map","hash":"840a041a42aa45b3dafccaaeabf869076d7cc9de","modified":1503019746387},{"_id":"public/components/reset-css/sass/custom/imitation-native.scss","hash":"db910f6a7a008bc3c47a4ccebb0f9301b1dd6f58","modified":1503019746388},{"_id":"public/components/reset-css/sass/reset/ie.scss","hash":"032d5f6831a43ffe278b711331308a17b0fa0848","modified":1503019746388},{"_id":"public/components/reset-css/sass/reset/basic.scss","hash":"523a6deffbd0699f3225adbdeda5d0fc5c6e1e4d","modified":1503019746388},{"_id":"public/components/reset-css/sass/reset/mobile.scss","hash":"391a7886de3256582d37a252f743a2cd08ae0964","modified":1503019746388},{"_id":"public/components/reset-css/sass/reset/macos.scss","hash":"c4863f82e33f87dd4c724d68906a4cbe2b935e6c","modified":1503019746388},{"_id":"public/components/reset-css/README.html","hash":"8e6de58e63d6a04c3c1160409e17e7b255202704","modified":1503019746426},{"_id":"public/components/reset-css/gruntfile.js","hash":"eda72e7747c8952dcc98d9249a5d8ca2279a89d6","modified":1503019746426},{"_id":"public/components/reset-css/package.json","hash":"cafa376792f3516b399c2dff52f6de75fe5456e7","modified":1503019746427},{"_id":"public/components/reset-css/dist/mobile/reset.css","hash":"c157f0c30827d47590cb99a25a34eb712ca1890a","modified":1503019746427},{"_id":"public/components/reset-css/dist/mobile/reset.min.css","hash":"752bcb20555fb6152867a7437aacf079f3c93c36","modified":1503019746427},{"_id":"public/components/reset-css/dist/pc/reset.css","hash":"9ed2cbf6f1dd7df99849ad22700e9339914a358a","modified":1503019746427},{"_id":"public/components/reset-css/dist/pc/reset.min.css","hash":"d0e76dd5d95e95deee9c745438d8bf36b342081c","modified":1503019746427},{"_id":"public/components/reset-css/public/main/reset.min.css","hash":"1a81aa7c066cf34dbc61709c9c11d2ef053ae456","modified":1503019746427},{"_id":"public/components/reset-css/public/mobile/reset.css","hash":"f531c995853af9871b8be1c7c324a8f65d1c355a","modified":1503019746427},{"_id":"public/components/reset-css/public/main/reset.css","hash":"8879756ab7e775eaf29e661503e4e472bde804d9","modified":1503019746427},{"_id":"public/components/reset-css/public/mobile/reset.min.css","hash":"64fbf2a4717a88d31b9b85806f39ec8d3edfb538","modified":1503019746427},{"_id":"public/components/reset-css/public/native/reset.css","hash":"6cbf4e09d9f8f5fd2c6b961cf4f473c41a5cde48","modified":1503019746428},{"_id":"public/components/reset-css/public/native/reset.min.css","hash":"fa81cc36008bb69fefc9986d3e3c479d14ad3a09","modified":1503019746428},{"_id":"public/css/main_style.css","hash":"cbd0541a11ebd938d798e3cee397a5a4d26d84ec","modified":1503019746428},{"_id":"public/css/main_style.min.css","hash":"7224d03577ecfa3cb51688ce5f0ef68d73166156","modified":1503019746428}],"Category":[{"name":"js","_id":"cj6h75e0x00025fpfbxk0vcot"},{"name":"杂记","_id":"cj6h75e1200045fpfbxd0a26x"}],"Data":[],"Page":[],"Post":[{"title":"js之闭包","date":"2017-08-17T08:20:56.000Z","_content":"\n米福镇楼 科科^_^\n\n![米福镇楼](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1487524457&di=f1af0fb7bbdb7f4254d0627f7f61f772&imgtype=jpg&er=1&src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg)\n\n其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。\n<!--more-->\n\n对闭包的理解基本可以分这几个点来思考：y\n> * 什么是闭包\n> * 闭包的基本形式\n> * 闭包的作用是什么\n\n### 一、什么是闭包\n**闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染**。\n\n我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：**一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值** 举个栗子：\n```\nfunction a(){\n    var b = 0;\n    console.log(++b);\n}\na(); // 1\na(); // 1  第二次调用a()结果还是1\n```\n第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果\n\n也遵从作用域链的原则，即：**函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。**再举个栗子：\n```\nfunction a() {\n\tvar b = 1\n\tfunction c(){\n\t    console.log(b);\n\t }\n\t c();\n}\na(); //  1   \n```\n 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。\n\n\n闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说**闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)**\n注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：\n```\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n        console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n```\n这里就一目了然了，**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**（这个例子下面也会用到 ）。\n\n\n### 二、闭包的基本形式\n**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**\n\n从这句话可以明白常见的闭包的基本形式为：\n　****两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。****例如：\n```\nfunction a(){\n    var b = 1;\n    return function c(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5    \n.\n.     \n```\n这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。\n\n### 三、闭包应用中的作用\n\n> * 外部作用域获取内部作用域变量的值\n> * 保存内部变量的值到一个独立的环境中\n\n在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。\n##### 1）外部作用域获取内部作用域变量的值\n在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：\n```\nfunction a() {\n\tvar c = 1;\n\treturn function b() {\n\t\tconsole.log(c);\n\t}\n}\nvar d = a();\nd(); // 1  执行外部的函数d便获得了作用域a中的变量\n```\n例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。\n\n##### 2） 保存内部变量的值到一个独立的环境中\n由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。\n\n例子1：\n\n```\n//使用闭包前\nfunction a(){\n\tvar b = 1;\n\tb+=1;\n\tconsole.log(b);\n}　\na(); // 2\na(); // 2 \na(); // 2\na(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收\n.\n.\n.     \n```\n使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。\n```\n//使用闭包后\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n.\n.     \n```\n使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。\n\n例子2：\n```\n//使用闭包前\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = function(){\n        console.log(i);\n    }\n}\narr[0]() ; // 8\narr[1]() ;// 8\narr[2]() ;// 8    每次结果都为8 \n..\n```\n使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。\n```\n//使用闭包后\nvar arr = [];\nfor(var i=0;i<8;i++){\n    (function(i){\n        arr[i] = function(){\n            console.log(i);\n        }\n    })(i)\n}\narr[0](); //0\narr[1](); //1\narr[2](); //2\n...\narr[7](); //7\n```\n使用闭包后，此时已经把要`return`出去的`function(){  console.log(i); }`直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：\n```\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = (function(i){\n        return function(){\n            console.log(i);\n        }\n    })(i)\n}\n```\n再进一步改写：\n```\nvar arr = [];\nfunction a(i){\n    return function(){\n        console.log(i);\n    }\n}\nfor(var i=0;i<8;i++){\n    arr[i] = a(i);\n}\n```\n此时一目了然，这也就是我们常说的`立即执行函数（IIFE）`中的闭包。\n\n闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的... 囧。\n\n#### -END-","source":"_posts/js之闭包.md","raw":"---\ntitle: js之闭包\ndate: 2017-08-17 16:20:56\ntag: js\ncategory: js\n\n---\n\n米福镇楼 科科^_^\n\n![米福镇楼](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1487524457&di=f1af0fb7bbdb7f4254d0627f7f61f772&imgtype=jpg&er=1&src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg)\n\n其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。\n<!--more-->\n\n对闭包的理解基本可以分这几个点来思考：y\n> * 什么是闭包\n> * 闭包的基本形式\n> * 闭包的作用是什么\n\n### 一、什么是闭包\n**闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染**。\n\n我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：**一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值** 举个栗子：\n```\nfunction a(){\n    var b = 0;\n    console.log(++b);\n}\na(); // 1\na(); // 1  第二次调用a()结果还是1\n```\n第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果\n\n也遵从作用域链的原则，即：**函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。**再举个栗子：\n```\nfunction a() {\n\tvar b = 1\n\tfunction c(){\n\t    console.log(b);\n\t }\n\t c();\n}\na(); //  1   \n```\n 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。\n\n\n闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说**闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)**\n注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：\n```\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n        console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n```\n这里就一目了然了，**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**（这个例子下面也会用到 ）。\n\n\n### 二、闭包的基本形式\n**只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包**\n\n从这句话可以明白常见的闭包的基本形式为：\n　****两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。****例如：\n```\nfunction a(){\n    var b = 1;\n    return function c(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5    \n.\n.     \n```\n这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。\n\n### 三、闭包应用中的作用\n\n> * 外部作用域获取内部作用域变量的值\n> * 保存内部变量的值到一个独立的环境中\n\n在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。\n##### 1）外部作用域获取内部作用域变量的值\n在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：\n```\nfunction a() {\n\tvar c = 1;\n\treturn function b() {\n\t\tconsole.log(c);\n\t}\n}\nvar d = a();\nd(); // 1  执行外部的函数d便获得了作用域a中的变量\n```\n例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。\n\n##### 2） 保存内部变量的值到一个独立的环境中\n由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。\n\n例子1：\n\n```\n//使用闭包前\nfunction a(){\n\tvar b = 1;\n\tb+=1;\n\tconsole.log(b);\n}　\na(); // 2\na(); // 2 \na(); // 2\na(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收\n.\n.\n.     \n```\n使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。\n```\n//使用闭包后\nfunction a(){\n    var b = 1;\n    return function(){\n        b+=1;\n\t    console.log(b);\n    }\n}\nf = a();\nf(); // 2\nf(); // 3 \nf(); // 4\nf(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。\n.\n.     \n```\n使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。\n\n例子2：\n```\n//使用闭包前\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = function(){\n        console.log(i);\n    }\n}\narr[0]() ; // 8\narr[1]() ;// 8\narr[2]() ;// 8    每次结果都为8 \n..\n```\n使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。\n```\n//使用闭包后\nvar arr = [];\nfor(var i=0;i<8;i++){\n    (function(i){\n        arr[i] = function(){\n            console.log(i);\n        }\n    })(i)\n}\narr[0](); //0\narr[1](); //1\narr[2](); //2\n...\narr[7](); //7\n```\n使用闭包后，此时已经把要`return`出去的`function(){  console.log(i); }`直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：\n```\nvar arr = [];\nfor(var i=0;i<8;i++){\n    arr[i] = (function(i){\n        return function(){\n            console.log(i);\n        }\n    })(i)\n}\n```\n再进一步改写：\n```\nvar arr = [];\nfunction a(i){\n    return function(){\n        console.log(i);\n    }\n}\nfor(var i=0;i<8;i++){\n    arr[i] = a(i);\n}\n```\n此时一目了然，这也就是我们常说的`立即执行函数（IIFE）`中的闭包。\n\n闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的... 囧。\n\n#### -END-","slug":"js之闭包","published":1,"updated":"2017-08-17T13:11:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6h75e0n00005fpf25nhbrqh","content":"<p>米福镇楼 科科^_^</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1487524457&amp;di=f1af0fb7bbdb7f4254d0627f7f61f772&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg\" alt=\"米福镇楼\"></p>\n<p>其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。<br><a id=\"more\"></a></p>\n<p>对闭包的理解基本可以分这几个点来思考：y</p>\n<blockquote>\n<ul>\n<li>什么是闭包</li>\n<li>闭包的基本形式</li>\n<li>闭包的作用是什么</li>\n</ul>\n</blockquote>\n<h3 id=\"一、什么是闭包\"><a href=\"#一、什么是闭包\" class=\"headerlink\" title=\"一、什么是闭包\"></a>一、什么是闭包</h3><p><strong>闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染</strong>。</p>\n<p>我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：<strong>一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值</strong> 举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 0;</div><div class=\"line\">    console.log(++b);</div><div class=\"line\">&#125;</div><div class=\"line\">a(); // 1</div><div class=\"line\">a(); // 1  第二次调用a()结果还是1</div></pre></td></tr></table></figure></p>\n<p>第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果</p>\n<p>也遵从作用域链的原则，即：<strong>函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。</strong>再举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">\tvar b = 1</div><div class=\"line\">\tfunction c()&#123;</div><div class=\"line\">\t    console.log(b);</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t c();</div><div class=\"line\">&#125;</div><div class=\"line\">a(); //  1</div></pre></td></tr></table></figure></p>\n<p> 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。</p>\n<p>闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说<strong>闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)</strong><br>注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 1;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        b+=1;</div><div class=\"line\">        console.log(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f = a();</div><div class=\"line\">f(); // 2</div><div class=\"line\">f(); // 3 </div><div class=\"line\">f(); // 4</div><div class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</div></pre></td></tr></table></figure></p>\n<p>这里就一目了然了，<strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong>（这个例子下面也会用到 ）。</p>\n<h3 id=\"二、闭包的基本形式\"><a href=\"#二、闭包的基本形式\" class=\"headerlink\" title=\"二、闭包的基本形式\"></a>二、闭包的基本形式</h3><p><strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong></p>\n<p>从这句话可以明白常见的闭包的基本形式为：<br>　<strong><strong>两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。</strong></strong>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 1;</div><div class=\"line\">    return function c()&#123;</div><div class=\"line\">        b+=1;</div><div class=\"line\">\t    console.log(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f = a();</div><div class=\"line\">f(); // 2</div><div class=\"line\">f(); // 3 </div><div class=\"line\">f(); // 4</div><div class=\"line\">f(); // 5    </div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure></p>\n<p>这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。</p>\n<h3 id=\"三、闭包应用中的作用\"><a href=\"#三、闭包应用中的作用\" class=\"headerlink\" title=\"三、闭包应用中的作用\"></a>三、闭包应用中的作用</h3><blockquote>\n<ul>\n<li>外部作用域获取内部作用域变量的值</li>\n<li>保存内部变量的值到一个独立的环境中</li>\n</ul>\n</blockquote>\n<p>在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。</p>\n<h5 id=\"1）外部作用域获取内部作用域变量的值\"><a href=\"#1）外部作用域获取内部作用域变量的值\" class=\"headerlink\" title=\"1）外部作用域获取内部作用域变量的值\"></a>1）外部作用域获取内部作用域变量的值</h5><p>在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">\tvar c = 1;</div><div class=\"line\">\treturn function b() &#123;</div><div class=\"line\">\t\tconsole.log(c);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var d = a();</div><div class=\"line\">d(); // 1  执行外部的函数d便获得了作用域a中的变量</div></pre></td></tr></table></figure></p>\n<p>例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。</p>\n<h5 id=\"2）-保存内部变量的值到一个独立的环境中\"><a href=\"#2）-保存内部变量的值到一个独立的环境中\" class=\"headerlink\" title=\"2） 保存内部变量的值到一个独立的环境中\"></a>2） 保存内部变量的值到一个独立的环境中</h5><p>由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。</p>\n<p>例子1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包前</div><div class=\"line\">function a()&#123;</div><div class=\"line\">\tvar b = 1;</div><div class=\"line\">\tb+=1;</div><div class=\"line\">\tconsole.log(b);</div><div class=\"line\">&#125;　</div><div class=\"line\">a(); // 2</div><div class=\"line\">a(); // 2 </div><div class=\"line\">a(); // 2</div><div class=\"line\">a(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n<p>使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包后</div><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 1;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        b+=1;</div><div class=\"line\">\t    console.log(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f = a();</div><div class=\"line\">f(); // 2</div><div class=\"line\">f(); // 3 </div><div class=\"line\">f(); // 4</div><div class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure></p>\n<p>使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。</p>\n<p>例子2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包前</div><div class=\"line\">var arr = [];</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    arr[i] = function()&#123;</div><div class=\"line\">        console.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">arr[0]() ; // 8</div><div class=\"line\">arr[1]() ;// 8</div><div class=\"line\">arr[2]() ;// 8    每次结果都为8 </div><div class=\"line\">..</div></pre></td></tr></table></figure></p>\n<p>使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包后</div><div class=\"line\">var arr = [];</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    (function(i)&#123;</div><div class=\"line\">        arr[i] = function()&#123;</div><div class=\"line\">            console.log(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i)</div><div class=\"line\">&#125;</div><div class=\"line\">arr[0](); //0</div><div class=\"line\">arr[1](); //1</div><div class=\"line\">arr[2](); //2</div><div class=\"line\">...</div><div class=\"line\">arr[7](); //7</div></pre></td></tr></table></figure></p>\n<p>使用闭包后，此时已经把要<code>return</code>出去的<code>function(){  console.log(i); }</code>直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    arr[i] = (function(i)&#123;</div><div class=\"line\">        return function()&#123;</div><div class=\"line\">            console.log(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再进一步改写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">function a(i)&#123;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        console.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    arr[i] = a(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时一目了然，这也就是我们常说的<code>立即执行函数（IIFE）</code>中的闭包。</p>\n<p>闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的… 囧。</p>\n<h4 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"-END-\"></a>-END-</h4>","site":{"data":{}},"excerpt":"<p>米福镇楼 科科^_^</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1487524457&amp;di=f1af0fb7bbdb7f4254d0627f7f61f772&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fi-7.vcimg.com%2Ftrim%2F0f279905008fbf08faa3f7b28346b042114295%2Ftrim.jpg\" alt=\"米福镇楼\"></p>\n<p>其实每个人对闭包理解的侧重点多少有点差异，有些人侧重在词法作用域问题，有些人侧重在变量保存问题，整体上都大同小异，这里简单说一下我对闭包的理解，希望能对你有一些启发。<br>","more":"</p>\n<p>对闭包的理解基本可以分这几个点来思考：y</p>\n<blockquote>\n<ul>\n<li>什么是闭包</li>\n<li>闭包的基本形式</li>\n<li>闭包的作用是什么</li>\n</ul>\n</blockquote>\n<h3 id=\"一、什么是闭包\"><a href=\"#一、什么是闭包\" class=\"headerlink\" title=\"一、什么是闭包\"></a>一、什么是闭包</h3><p><strong>闭包就是把一块区域封装成一块独立的空间，从而内部的变量不受外部的污染</strong>。</p>\n<p>我们都知道在js中，函数内部的局部变量遵从变量销毁机制（回收机制），即：<strong>一个函数执行完毕之后，当再次调用该函数时，其内部的变量会被重新赋值，而不会保存上次函数执行后变量的值</strong> 举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 0;</div><div class=\"line\">    console.log(++b);</div><div class=\"line\">&#125;</div><div class=\"line\">a(); // 1</div><div class=\"line\">a(); // 1  第二次调用a()结果还是1</div></pre></td></tr></table></figure></p>\n<p>第二次调用a()结果还是1，说明b被重新赋值了，没有保留上次执行时的结果</p>\n<p>也遵从作用域链的原则，即：<strong>函数内的局部变量如果没有在所在作用域内找到变量的值，便会向其父级的作用域寻找变量的值（这里的作用域指词法作用域）。</strong>再举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">\tvar b = 1</div><div class=\"line\">\tfunction c()&#123;</div><div class=\"line\">\t    console.log(b);</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t c();</div><div class=\"line\">&#125;</div><div class=\"line\">a(); //  1</div></pre></td></tr></table></figure></p>\n<p> 在ES6之前js中没有块级作用域的概念，所以一个function代表一个作用域，当函数c执行时在其内部没有找到b时，变向其上级作用域a()寻找。</p>\n<p>闭包从字面意思上来说就是把一个区域封存起来，形成一个密封的环境，那么既然是一个密封的环境，那么它之内的局部变量就是独立的，也就是说<strong>闭包存在的目的是让函数不再遵守内存销毁机制。(划重点)</strong><br>注：有人从函数执行在词法作用域而非执行时的作用域来理解闭包，可能会认为仍然在执行作用域链，这里存在争议，不过我还是举个例子反驳下吧 ，科科：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 1;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        b+=1;</div><div class=\"line\">        console.log(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f = a();</div><div class=\"line\">f(); // 2</div><div class=\"line\">f(); // 3 </div><div class=\"line\">f(); // 4</div><div class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</div></pre></td></tr></table></figure></p>\n<p>这里就一目了然了，<strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong>（这个例子下面也会用到 ）。</p>\n<h3 id=\"二、闭包的基本形式\"><a href=\"#二、闭包的基本形式\" class=\"headerlink\" title=\"二、闭包的基本形式\"></a>二、闭包的基本形式</h3><p><strong>只有当return出去的变量，被保存成全局变量时才不会被销毁，也才形成闭包，其它的情况有可能不是闭包</strong></p>\n<p>从这句话可以明白常见的闭包的基本形式为：<br>　<strong><strong>两个函数相互嵌套，内层的函数被return出去，并且被保存在一个变量中，这样就创建了一个闭包。</strong></strong>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 1;</div><div class=\"line\">    return function c()&#123;</div><div class=\"line\">        b+=1;</div><div class=\"line\">\t    console.log(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f = a();</div><div class=\"line\">f(); // 2</div><div class=\"line\">f(); // 3 </div><div class=\"line\">f(); // 4</div><div class=\"line\">f(); // 5    </div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure></p>\n<p>这是闭包的较为常见的基本样式，至于其它立即执行函数等样式的闭包，其实也都是这种方式的转变，下面将会讲到。</p>\n<h3 id=\"三、闭包应用中的作用\"><a href=\"#三、闭包应用中的作用\" class=\"headerlink\" title=\"三、闭包应用中的作用\"></a>三、闭包应用中的作用</h3><blockquote>\n<ul>\n<li>外部作用域获取内部作用域变量的值</li>\n<li>保存内部变量的值到一个独立的环境中</li>\n</ul>\n</blockquote>\n<p>在实际的js应用中，用闭包干的事挺多的，这两种是比较常见的，就这两种来给大家讲一下自己的理解。</p>\n<h5 id=\"1）外部作用域获取内部作用域变量的值\"><a href=\"#1）外部作用域获取内部作用域变量的值\" class=\"headerlink\" title=\"1）外部作用域获取内部作用域变量的值\"></a>1）外部作用域获取内部作用域变量的值</h5><p>在正常的作用域链中，（如果不理解什么是作用域链，可以再去看看红宝书）内部作用域可以访问外部作用域中变量，而外部不可以拿到内部的变量，但闭包却可以实现在外部获取内部变量的值，举个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">\tvar c = 1;</div><div class=\"line\">\treturn function b() &#123;</div><div class=\"line\">\t\tconsole.log(c);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var d = a();</div><div class=\"line\">d(); // 1  执行外部的函数d便获得了作用域a中的变量</div></pre></td></tr></table></figure></p>\n<p>例子中执行外部的函数d便获得了内部作用域a中的变量，这便是闭包的作用之一。</p>\n<h5 id=\"2）-保存内部变量的值到一个独立的环境中\"><a href=\"#2）-保存内部变量的值到一个独立的环境中\" class=\"headerlink\" title=\"2） 保存内部变量的值到一个独立的环境中\"></a>2） 保存内部变量的值到一个独立的环境中</h5><p>由上文中我们可知，函数的内部变量遵循作用域销毁机制，当函数再次被调用时，内部变量会被重新赋值，然而有时候我们并不想让这个局部变量被重新赋值，那么这时候变用到了闭包，下面我用两个例子来说明这个问题。</p>\n<p>例子1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包前</div><div class=\"line\">function a()&#123;</div><div class=\"line\">\tvar b = 1;</div><div class=\"line\">\tb+=1;</div><div class=\"line\">\tconsole.log(b);</div><div class=\"line\">&#125;　</div><div class=\"line\">a(); // 2</div><div class=\"line\">a(); // 2 </div><div class=\"line\">a(); // 2</div><div class=\"line\">a(); // 2      无论多少次调用结果都为2 ，说明变量所占内存被回收</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n<p>使用闭包前：无论多少次调用结果都为2 ，说明变量所占内存被回收。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包后</div><div class=\"line\">function a()&#123;</div><div class=\"line\">    var b = 1;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        b+=1;</div><div class=\"line\">\t    console.log(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f = a();</div><div class=\"line\">f(); // 2</div><div class=\"line\">f(); // 3 </div><div class=\"line\">f(); // 4</div><div class=\"line\">f(); // 5      这里f形成了一个独立的作用域封装b，b不再收回收机制的限制，形成闭包。</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure></p>\n<p>使用闭包后：这里f形成了一个独立的作用域封装b，b不再受回收机制的限制，形成闭包。</p>\n<p>例子2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包前</div><div class=\"line\">var arr = [];</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    arr[i] = function()&#123;</div><div class=\"line\">        console.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">arr[0]() ; // 8</div><div class=\"line\">arr[1]() ;// 8</div><div class=\"line\">arr[2]() ;// 8    每次结果都为8 </div><div class=\"line\">..</div></pre></td></tr></table></figure></p>\n<p>使用闭包前，每次调用的结果都为8，原因很简单，就是在for循环执行一遍时，里面的函数并没有执行；而当在外面调用的时候，for循环已经执行完毕，此时的i始终为8。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用闭包后</div><div class=\"line\">var arr = [];</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    (function(i)&#123;</div><div class=\"line\">        arr[i] = function()&#123;</div><div class=\"line\">            console.log(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i)</div><div class=\"line\">&#125;</div><div class=\"line\">arr[0](); //0</div><div class=\"line\">arr[1](); //1</div><div class=\"line\">arr[2](); //2</div><div class=\"line\">...</div><div class=\"line\">arr[7](); //7</div></pre></td></tr></table></figure></p>\n<p>使用闭包后，此时已经把要<code>return</code>出去的<code>function(){  console.log(i); }</code>直接赋值给了外部的变量arr，如果看不懂的话换成另外的写法或许就好理解了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    arr[i] = (function(i)&#123;</div><div class=\"line\">        return function()&#123;</div><div class=\"line\">            console.log(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再进一步改写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">function a(i)&#123;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        console.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">for(var i=0;i&lt;8;i++)&#123;</div><div class=\"line\">    arr[i] = a(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时一目了然，这也就是我们常说的<code>立即执行函数（IIFE）</code>中的闭包。</p>\n<p>闭包使用需谨慎，变量一直存在于全局变量中（内存）中，有可能造成内存泄露等问题，别问我怎么知道的… 囧。</p>\n<h4 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"-END-\"></a>-END-</h4>"},{"title":"诞生于狗善党的春天","_content":"\n# 阿一古 金社长~！！\n\n### 看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\n### 因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\n<!--more-->\n   \n   ![cmd-markdown-logo](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1502979972172&di=9f27f10470bd58853d7abe36c09c80ca&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif)\n   \n### 你开心啦！幸福的像花儿一样！\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif)\n \n### 德善呐~你可长点心吧！\n\n\n ![cmd-markdown-logo](http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif)\n \n\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif)\n \n### 哈哈哈 ~~~~\n\n\n ![cmd-markdown-logo]( http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif)\n \n###  公交车上狗焕表现不错！\n\n\n ![cmd-markdown-logo](http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg)\n\n  \n### 每天早上醒来 阳光和你都在\n\n \n ![cmd-markdown-logo]( http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif)\n\n \n### happy ending ！！老夫的少女心呐！！\n\n\n\n##### and 今天也是本blog诞生的日子 科科~\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 诞生于狗善党的春天\ntag: 随笔\ncategory: 杂记\n---\n\n# 阿一古 金社长~！！\n\n### 看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\n### 因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\n<!--more-->\n   \n   ![cmd-markdown-logo](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1502979972172&di=9f27f10470bd58853d7abe36c09c80ca&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif)\n   \n### 你开心啦！幸福的像花儿一样！\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif)\n \n### 德善呐~你可长点心吧！\n\n\n ![cmd-markdown-logo](http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif)\n \n\n\n ![cmd-markdown-logo](http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif)\n \n### 哈哈哈 ~~~~\n\n\n ![cmd-markdown-logo]( http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif)\n \n###  公交车上狗焕表现不错！\n\n\n ![cmd-markdown-logo](http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg)\n\n  \n### 每天早上醒来 阳光和你都在\n\n \n ![cmd-markdown-logo]( http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif)\n\n \n### happy ending ！！老夫的少女心呐！！\n\n\n\n##### and 今天也是本blog诞生的日子 科科~\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n","slug":"hello-world","published":1,"date":"2017-08-16T11:47:40.000Z","updated":"2017-08-17T15:03:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6h75e0u00015fpfxchia2ng","content":"<h1 id=\"阿一古-金社长-！！\"><a href=\"#阿一古-金社长-！！\" class=\"headerlink\" title=\"阿一古 金社长~！！\"></a>阿一古 金社长~！！</h1><h3 id=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"><a href=\"#看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\" class=\"headerlink\" title=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"></a>看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！</h3><h3 id=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\"><a href=\"#因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\" class=\"headerlink\" title=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\"></a>因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~</h3><a id=\"more\"></a>\n<p>   <img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502979972172&amp;di=9f27f10470bd58853d7abe36c09c80ca&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"你开心啦！幸福的像花儿一样！\"><a href=\"#你开心啦！幸福的像花儿一样！\" class=\"headerlink\" title=\"你开心啦！幸福的像花儿一样！\"></a>你开心啦！幸福的像花儿一样！</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"德善呐-你可长点心吧！\"><a href=\"#德善呐-你可长点心吧！\" class=\"headerlink\" title=\"德善呐~你可长点心吧！\"></a>德善呐~你可长点心吧！</h3><p> <img src=\"http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif\" alt=\"cmd-markdown-logo\"></p>\n<p> <img src=\"http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈 ~~~~\"></a>哈哈哈 ~~~~</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"公交车上狗焕表现不错！\"><a href=\"#公交车上狗焕表现不错！\" class=\"headerlink\" title=\"公交车上狗焕表现不错！\"></a>公交车上狗焕表现不错！</h3><p> <img src=\"http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"每天早上醒来-阳光和你都在\"><a href=\"#每天早上醒来-阳光和你都在\" class=\"headerlink\" title=\"每天早上醒来 阳光和你都在\"></a>每天早上醒来 阳光和你都在</h3><p> <img src=\"http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"happy-ending-！！老夫的少女心呐！！\"><a href=\"#happy-ending-！！老夫的少女心呐！！\" class=\"headerlink\" title=\"happy ending ！！老夫的少女心呐！！\"></a>happy ending ！！老夫的少女心呐！！</h3><h5 id=\"and-今天也是本blog诞生的日子-科科\"><a href=\"#and-今天也是本blog诞生的日子-科科\" class=\"headerlink\" title=\"and 今天也是本blog诞生的日子 科科~\"></a>and 今天也是本blog诞生的日子 科科~</h5>","site":{"data":{}},"excerpt":"<h1 id=\"阿一古-金社长-！！\"><a href=\"#阿一古-金社长-！！\" class=\"headerlink\" title=\"阿一古 金社长~！！\"></a>阿一古 金社长~！！</h1><h3 id=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"><a href=\"#看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈-，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\" class=\"headerlink\" title=\"看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！\"></a>看到新闻的那一刻激动的不得了，很久没有这么开心的感觉了哈哈 ，心都快炸了！祝福祝福，没想到《请回答1988》售后服务这么好，终于圆满大结局了！欧耶！</h3><h3 id=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\"><a href=\"#因为这件事，起码得开心半个月！嘻嘻哈哈呼呼\" class=\"headerlink\" title=\"因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~\"></a>因为这件事，起码得开心半个月！嘻嘻哈哈呼呼~~</h3>","more":"<p>   <img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502979972172&amp;di=9f27f10470bd58853d7abe36c09c80ca&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161229%2F813dcc3d6acd4415b11334a63dffe6c7.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"你开心啦！幸福的像花儿一样！\"><a href=\"#你开心啦！幸福的像花儿一样！\" class=\"headerlink\" title=\"你开心啦！幸福的像花儿一样！\"></a>你开心啦！幸福的像花儿一样！</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/005GsvR3gy1fimr4bdxnsg308w050hdt.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"德善呐-你可长点心吧！\"><a href=\"#德善呐-你可长点心吧！\" class=\"headerlink\" title=\"德善呐~你可长点心吧！\"></a>德善呐~你可长点心吧！</h3><p> <img src=\"http://ww4.sinaimg.cn/bmiddle/005xZAeCgy1fimyc59doxg30b407a7wi.gif\" alt=\"cmd-markdown-logo\"></p>\n<p> <img src=\"http://ww1.sinaimg.cn/bmiddle/a03bd7a0gy1fimotqdvkug209w05kx6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈 ~~~~\"></a>哈哈哈 ~~~~</h3><p> <img src=\"http://ww1.sinaimg.cn/bmiddle/749fa947gy1fimx2swaaqg209w05ke84.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"公交车上狗焕表现不错！\"><a href=\"#公交车上狗焕表现不错！\" class=\"headerlink\" title=\"公交车上狗焕表现不错！\"></a>公交车上狗焕表现不错！</h3><p> <img src=\"http://wx1.sinaimg.cn/bmiddle/6208f82fgy1fimxyop869j20yi1ejaey.jpg\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"每天早上醒来-阳光和你都在\"><a href=\"#每天早上醒来-阳光和你都在\" class=\"headerlink\" title=\"每天早上醒来 阳光和你都在\"></a>每天早上醒来 阳光和你都在</h3><p> <img src=\"http://wx1.sinaimg.cn/large/005HpgfWgy1filodrsg11g30hs0a0x6r.gif\" alt=\"cmd-markdown-logo\"></p>\n<h3 id=\"happy-ending-！！老夫的少女心呐！！\"><a href=\"#happy-ending-！！老夫的少女心呐！！\" class=\"headerlink\" title=\"happy ending ！！老夫的少女心呐！！\"></a>happy ending ！！老夫的少女心呐！！</h3><h5 id=\"and-今天也是本blog诞生的日子-科科\"><a href=\"#and-今天也是本blog诞生的日子-科科\" class=\"headerlink\" title=\"and 今天也是本blog诞生的日子 科科~\"></a>and 今天也是本blog诞生的日子 科科~</h5>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6h75e0n00005fpf25nhbrqh","category_id":"cj6h75e0x00025fpfbxk0vcot","_id":"cj6h75e1300075fpfn09nwo6r"},{"post_id":"cj6h75e0u00015fpfxchia2ng","category_id":"cj6h75e1200045fpfbxd0a26x","_id":"cj6h75e1400095fpfvv2e11j1"}],"PostTag":[{"post_id":"cj6h75e0n00005fpf25nhbrqh","tag_id":"cj6h75e1100035fpfc24yuz3z","_id":"cj6h75e1300065fpfhkdvtid7"},{"post_id":"cj6h75e0u00015fpfxchia2ng","tag_id":"cj6h75e1200055fpfu8qll40c","_id":"cj6h75e1400085fpf8xn1qhjv"}],"Tag":[{"name":"js","_id":"cj6h75e1100035fpfc24yuz3z"},{"name":"随笔","_id":"cj6h75e1200055fpfu8qll40c"}]}}